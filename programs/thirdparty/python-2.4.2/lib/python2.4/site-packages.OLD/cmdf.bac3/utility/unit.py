#!/usr/bin/env python
#############################################################################################
#                                                                                           #
# Unit class stores physics constants and unit conveters.                                   # 
#                                                                                           #
# Created on 03/08/06, last revision on 04/01/06. yi                                        #
#                                                                                           #
#############################################################################################

class Unit:

    """
The units and constants in this class are adopted from 2002 set of CODATA in CRC handbook
of Chemistry and Physcis (85th Edition). The latest adjustment is closed on Dec. 31, 2002.

Most of the units here are derived from a few base units to keep self-consistency.
The derived numbers may be slightly different from values recommended by CODATA. 
Units or constants which are explicit (absolute) numbers (CODATA values) are commented out 
and can be used for validation test.

This class modified and expanded the unit module in MMTK, and paticularly tuned for CMDF internal units. 
Moreover, explicit unit converters are provided for arbitary unit conversion. 

Aviable units and constants:

SI Prefixes: yocto, zepto, atto, femto, pico, nano, micro, milli, centi, deci, deka,
hecto, kilo, mega, giga, tera, peta, exa, zetta, yotta (local variables)

Length units: m, dm, cm, mm, um, nm, pm, fm, Ang, Bohr

Angle units: rad, deg

Area units: Ang2, m2, dm2, cm2

Volume units: Ang3, m3, dm3, L, cm3

Mass units: amu, g, kg

Mass density units: kgpm3, gpcm3

Time units: s, ms, us, ns, ps, fs

Velocity units: mps, radps

Acceleration units: mps2, radps2

Frequency units: Hz, THz, GHz, inverse_cm (wavenumbers)

Quantity-of-matter units: mol

Energy units:
J, kJ, cal, kcal, eV, Hartree, Rydburg
kJpermol, kcalpermol

Power units: W

Temperature units:
K

Pressure units:
Pa, GPa, bar, atm

Electrostatic units:
C, A, V, D, e, Vpm, Apm, Apm2, F, ohm

Mathematical constants:
PI, E, GOLD

Physical constants:
c (speed of light),
mol (Avogadro number),
h (Planck constant),
hbar (Planck constant divided by 2*Pi),
R (Molar gas constants)
KB (Boltzmann constant),
eps0 (permittivity of vacuum),
me (electron mass)

    """

    def __init__(self): 
    # Physical constants and conversion factors between internal units and other units.
        from math import sqrt

        # Prefixes of SI unit.
        yocto = 1.0e-24
        zepto = 1.0e-21
        atto  = 1.0e-18
        femto = 1.0e-15
        pico  = 1.0e-12
        nano  = 1.0e-9 
        micro = 1.0e-6 
        milli = 1.0e-3 
        centi = 1.0e-2 
        deci  = 1.0e-1 
        deka  = 1.0e1  
        hecto = 1.0e2  
        kilo  = 1.0e3  
        mega  = 1.0e6  
        giga  = 1.0e9  
        tera  = 1.0e12 
        peta  = 1.0e15 
        exa   = 1.0e18
        zetta = 1.0e21
        yotta = 1.0e24

        # General constants.
        self.PI = 3.14159265358979323846264338327950288419716939937511
        self.E  = 2.71828182845904523536028747135266249775724709369996
        self.GOLD = 1.618033988749894848204586834365638117720309180       # Golden ratio
        AVOGADRO = 6.022141510e23     # Avogadro constant.

        # Quantity of matter.
        # Internal unit: number

        self.mol = AVOGADRO

        # Angle units.
        # Internal unit: radian

        self.rad = 1.
        self.deg = (self.PI / 180) * self.rad

        # Length units.
        # Internal unit: Angstrom

        self.Ang = 1.               # Angstrom
        self.m   = 10. / nano       # Meter (SI) 
        self.dm  = deci  * self.m
        self.cm  = centi * self.m
        self.mm  = milli * self.m
        self.um  = micro * self.m
        self.nm  = nano  * self.m
        self.pm  = pico  * self.m
        self.fm  = femto * self.m

        # Area units.
        # Internal unit: A^2

        self.Ang2 = 1.
        self.m2  = self.m ** 2    # m ^ 2, square meter
        self.dm2 = self.dm ** 2   # dm ^ 2
        self.cm2 = self.cm ** 2   # cm ^ 2

        # Volume units.
        # Internal unit: A^3 

        self.Ang3 = 1.
        self.m3  = self.m  ** 3   # m ^ 3, cubic meter
        self.dm3 = self.dm ** 3   # dm ^ 3
        self.L   = self.dm3       # Liter
        self.cm3 = self.cm ** 3   # cm ^ 3

        # Mass units.
        # Internal unit: amu (= g / mol)

        self.amu = 1.                   # Atomic mass unit
        #self.amu = 1.6605388628e-27 * self.kg
        self.g  = self.mol * self.amu
        self.kg = kilo * self.g         # Kilogram (SI)

        # Mass density units.
        # Internal unit: amu / (A ^ 3)

        self.kgpm3 = self.kg / self.m3   # kilogram per cubic meter
        self.gpcm3 = self.g / self.cm3   # gram per cubic centimeter

        # Energy units.
        # Internal unit: eV 

        self.eV = 1.
        self.kcalpermol = self.eV / 23.0605 
        self.kJpermol = self.kcalpermol / 4.184 
        self.Hartree = 27.211384523 * self.eV
        self.Rydberg = 13.605692312 * self.eV

        self.kcal = self.mol * self.kcalpermol
        self.kJ   = self.mol * self.kJpermol

        self.J = self.kJ / kilo
        self.cal = self.kcal / kilo
        
        #self.eV = 1.6021765314e-19 * self.J
        #self.Hartree = 4.3597441775e-18 * self.J
        #self.Hartree = 27.211384523 * self.eV

        # Force units.
        # Internal unit: eV/A.

        self.N = self.J / self.m
        self.dyn = 1.e-5 * self.N

        # Time units.
        # Internal unit: ~ 10.181 fs

        self.s = self.m * sqrt(self.kg / self.J)   # Second (SI)
        self.ms = milli * self.s
        self.us = micro * self.s
        self.ns = nano  * self.s
        self.ps = pico  * self.s
        self.fs = femto * self.s

        # Velocity units.
        # Internal unit: A/(~ 10.181 fs)

        self.mps = self.m / self.s               # Meter per second
        self.c = 299792458. * self.mps           # Speed of light
        self.radps = self.rad / self.s           # Angular velocity: radian per second

        # Acceleration units.
        # Internal unit: A/(~ 10.181 fs ^ 2)

        self.mps2 = self.m / (self.s ** 2)       # Meter per second squared
        self.radps2 = self.rad / (self.s ** 2)   # Angular acceleration: radian per second squared
        #self.gn = 9.80665 * self.m * / (self.s ** 2)   # Acceleration of gravity

        # Frequency units.
        # Internal unit: 1./(~ 10.181 fs)

        self.Hz = 1. / self.s
        self.GHz = giga * self.Hz
        self.THz = tera * self.Hz
        self.inverse_cm = self.c / self.cm

        # Power units.

        self.W = self.J / self.s    # watt 

        # Electrostatic units.
        # Internal unit: charge (e)

        self.e = 1.                           # elementary charge e = 1.6021765314e-19 C
        self.C = 6.24150947e18 * self.e       # Coulomb 
        self.A = self.C / self.s              # Ampere (SI)
        self.D = 3.336e-30 * self.C * self.m  # Debye 
        self.V = self.J / self.C              # Volt
        #self.eV = self.e * self.V            # Electron volt
        self.Vpm  = self.V / self.m           # Electric field strength: Volt per meter
        self.Apm  = self.A / self.m           # Magnetic field strength: Ampere per meter
        self.Apm2 = self.A / self.m2          # Current density: Ampere per squre meter
        self.F = self.C / self.V              # Capacitance: farad
        #self.F = 96485.338383 * self.C / self.mol   # Farady constant
        self.ohm = self.V / self.A            # Electric resistance: ohm

        # Temperature units.
        # Internal unit: K

        self.K = 1.                           # Kelvin (SI) 

        # Pressure units.
        # Internal unit: eV/A^3

        self.Pa = self.J / self.m3            # Pascal
        self.GPa = giga * self.Pa 
        self.bar = 1.e5 * self.Pa             # Bar
        self.atm = 101325. * self.Pa          # Atmosphere

        # Physical constants.

        self.h = 6.626069311e-34 * self.J * self.s           # Planck constant in Js
        #self.h = 4.1356674335e-15 * self.eV * self.s  # Planck constant in eVs 
        self.hbar = self.h / (2. * self.PI)                  # hbar in Js 
        #self.hbar = 1.0545716818e-34 *self.J * self.s       # hbar in eVs
        self.R = 8.31447215 * self.J / (self.mol * self.K)   # Molar gas constant in J/mol/K
        self.KB = 1.380650524e-23 * self.J / self.K         # Boltzmann constant in J/K
        #self.KB = 8.61734315e-5 * self.eV / self.K     # Boltamann constant in eV/K
        self.eps0 = 1. / (4.e-7 * self.PI) * self.A ** 2 * self.m / self.J / self.c ** 2
        #self.eps0 = 8.854187817e-12 * self.F / self.m       # Electric constant
        self.me = 0.51099906 * mega * self.eV / self.c ** 2  # Electron mass

        #self.me = 9.109382616e-31 * self.kg           # Electron mass
        #self.mp = 1.6726217129e-27 * self.kg          # Proton mass
        #self.mn = 1.6749272829e-27 * self.kg          # Neutron mass
        #self.md = 3.3435833557e-27 * self.kg          # Deuteron mass
        #self.mh = 5.0064121486e-27 * self.kg          # Helion mass
        self.electrostatic_energy = 1 / (4. * self.PI * self.eps0)

        # Atomic units.
        self.Bohr = 4. * self.PI * self.eps0 * self.hbar ** 2 / (self.me * self.e ** 2)
        #self.Bohr = 0.529177210818 * self.Ang         # Bohr radius 
        #self.Hartree = self.hbar ** 2 / (self.me * self.Bohr ** 2)

        return

    # Explicit unit converters.    
    # These functions are useful to convert units that donot include internal units.
    def length_auTOang(self, lau):
        lang = 0.529177210818 * lau

        return lang

    def velocity_auTOmps(self, vau):
        vmps = 2188491.52 * vau 

        return vmps

    def pressure_evTOatm(self, pev):
        patm = 1.581225295e6 * pev

        return patm

    def pressure_atmTOev(self, patm):
        pev = 6.32420948e-7 * patm

        return pev 

    def pressure_evTOgpa(self, pev):
        pgpa = 1.60217653e5 * pev

        return pgpa

    def pressure_atmTOgpa(self, patm):
        pgpa = 0.101325 * patm

        return pgpa

    def energy_evTOkcalm(self, eev):
        ekcalm = 23.0605 * eev 

        return ekcalm 

    def energy_kcalmTOev(self, ekcalm):
        eev = 0.0433641 * ekcalm

        return eev 

    def energy_haTOev(self, eha):
        eev = 27.211384523 * eha 

        return eev 

    def energy_haTOkcalm(self, eha):
        ekcalm = 627.5095 * eha 

        return ekcalm

    def energy_haTOkjm(self, eha):
        ekjm = 2625.5 * eha 

        return ekjm

    def energy_ryTOha(self, ery):
        eha = 0.5 * ery 

        return eha 

    def energy_ryTOev(self, ery):
        eev = 13.605692312 * ery 

        return eev 

