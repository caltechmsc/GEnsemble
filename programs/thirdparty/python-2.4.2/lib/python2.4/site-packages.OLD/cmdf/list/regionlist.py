#/usr/bin/env python
####################################################################################
#                                                                                  #
# RegionList generates lists of atoms/molecules in a specified region. Various     #
# constraints can then be applied to these entities in the region. Examples include#
# thermal constraints, fixed coordinates, fixed distances, moving at constant V etc# 
#                                                                                  #
# ThermoList           : return thermoAtomLists and thermoVelLists which contain   #
#                        atom number and vels of atoms in thermostat regions.      #
#                                                                                  #
# RegionRule includes various rules to define a region, e.g. orthorhombic,         #
#                        spherical regions.                                        #
#                                                                                  #
# OrthorhombicRegion  : defined by ranges of x, y, z.                              #
# SphericalRegion     : defined by origin and inner and outer radii.               #
#                                                                                  #
# Created on 08/27/06, last revision on 09/05/06. yi                               #
#                                                                                  #
####################################################################################

import numpy

class RegionRule:
    """
    Check if an entity is located in a region specified by a certain rule.
    The entity can be atom or molecule/cluster (according to center of mass).
    """
    def __init__(self, range):
        # range can be rectangular box or spherical shell etc.
        self.range = range

        return

    def inRegion(self, coord):
        # coord can be coordinates of atoms or center of mass of molecule.  

        return

class OrthorhombicRegion(RegionRule):
    """
    Check if an entity is located in a rectangular box.
    """

    def __init__(self, ranges=numpy.array([0.,0.]*3, numpy.Float)):
        # Define an orthorhombic box.
        RegionRule.__init__(self, ranges)

        return

    def inRegion(self, coord):
        ranges = self.range
        rx = coord[0]
        ry = coord[1]
        rz = coord[2]
        rangex = ranges[0]
        rangey = ranges[1]
        rangez = ranges[2]
        if (rx >= rangex[0] and rx <= rangex[1] and
            ry >= rangey[0] and ry <= rangey[1] and
            rz >= rangez[0] and rz <= rangez[1]): 
            isInRegion = True  # coords is located in orthorhombic box region.
        else:
            isInRegion = False

        return isInRegion

class SphericalRegion(RegionRule):
    """
    Check if an entity is located in a spherical shell.
    """

    def __init__(self, origin=numpy.zeros(3, numpy.Float), range=numpy.array([0.,0.], numpy.Float)):
        # Define the inner and outer radius of a spherical shell.
        RegionRule.__init__(self, range)
        self.origin = origin  # Define the origin of a sphere. 

        return

    def inRegion(self, coord):
        origin = self.origin
        range = self.range
        rx = coord[0]
        ry = coord[1]
        rz = coord[2]
        rx0 = origin[0]
        ry0 = origin[1]
        rz0 = origin[2]
        dist2 = (rx - rx0)**2 + (ry - ry0)**2 + (rz - rz0)**2  
        innerRidus2 = range[0]**2
        outerRidus2 = range[1]**2
        if (dist2 >= innerRidus2 and dist2 <= outerRidus2): 
            isInRegion = True  # coords is located in a spherical shell region.
        else:
            isInRegion = False

        return isInRegion

class RegionList:

    def __init__(self, regionRules):
        self.regionRules = regionRules  # A list of all region rules.

        return

    def calcRegionList(self, imove, masses, coords, vels):
        # coords is a coord array of all atoms.

        return

class ThermoList(RegionList):

    def __init__(self, regionRules):
        RegionList.__init__(self, regionRules)

        return

    def calcRegionList(self, imove, masses, coords, vels):
        """
        Generate a list of atoms which are exerted a thermostat:
        thermoAtomList[regionNumber][atomNum,...]  
        thermoMoveList[regionNumber][imove,...]  
        thermoMassList[regionNumber][mass,...]  
        thermoVelList[regionNumber][vx, vy, vz,...]  
        """
        from cmdf.utility.control import Control

        regionRules = self.regionRules  # Multiple region rules.
        numRegions = len(regionRules)
        thermoAtomLists = []
        thermoMoveLists = []
        thermoMassLists = []
        thermoVelLists = []
        for iRegion in range(numRegions):
            thermoAtomLists += [[]]  # Multiple thermo atoms lists.
            thermoMoveLists += [[]]  # Multiple thermo imove lists.
            thermoMassLists += [[]]  # Multiple thermo masses lists.
            thermoVelLists += [[]]  # Multiple thermo vels lists. 
        numAtoms = len(masses)
        coord = numpy.zeros(3, numpy.Float)

        for i in range(numAtoms): 
            i3 = i * 3
            coord[0] = coords[i3]
            coord[1] = coords[i3+1]
            coord[2] = coords[i3+2]
            vx = vels[i3]
            vy = vels[i3+1]
            vz = vels[i3+2]
            iRegion = 0
            # Note: If a point is located in more than one regions, only the region 
            # rule which is first satisfied has the higher priority to encompass the point.
            for regionRule in regionRules:
                if regionRule.inRegion(coord):
                    thermoAtomLists[iRegion].append(i)
                    thermoMoveLists[iRegion].append(imove[i])
                    thermoMassLists[iRegion].append(masses[i])
                    thermoVelLists[iRegion] += [vx, vy, vz] 
                    break
                iRegion += 1 

        # Convert standard python list into numarray
        for iRegion in range(numRegions):
            thermoVelLists[iRegion] = numpy.array(thermoVelLists[iRegion], numpy.Float) 

        if Control.printLevel > 1:
            print 'thermoAtomLists=', thermoAtomLists
            if Control.printLevel > 2:
                print 'thermoMoveLists=', thermoMoveLists
                print 'thermoMassLists=', thermoMassLists
                print 'thermoVelLists=', thermoVelLists   

        return thermoAtomLists, thermoMoveLists, thermoMassLists, thermoVelLists   
        
    def setVels(self, thermoAtomList, thermoVelList, vels):
        """
        update original vels array according to thermoatom vels
        """
        numThermoAtoms = len(thermoAtomList)
        for i in range(numThermoAtoms):
            atomNum = thermoAtomList[i] 
            atomNum3 = atomNum * 3
            atomNum31 = atomNum3 + 1 
            atomNum32 = atomNum3 + 2 
            i3 = i * 3
            i31 = i3 + 1
            i32 = i3 + 2
            vels[atomNum3] = thermoVelList[i3] 
            vels[atomNum31] = thermoVelList[i31] 
            vels[atomNum32] = thermoVelList[i32] 

        return vels        

if __name__ == '__main__':
    import numpy
    from cmdf.utility.control import Control
    Control.printLevel = 3

    # Testing RegionRule class
    print 'Testing RegionRule class...'
    orthorhombicRegionParameter = [[1., 2.], [1., 2.], [1., 2.]]
    orthorhombicRegion = OrthorhombicRegion(orthorhombicRegionParameter)

    sphericalRegionParameter = [[0., 0., 0.], [1., 2.]]
    sphericalRegion = SphericalRegion(sphericalRegionParameter[0], sphericalRegionParameter[1])

    # Define points.
    points = [[0., 0., 0.], [1.15, 1.15, 1.15]]

    for point in points:
        if orthorhombicRegion.inRegion(point):
            print 'Point %s is in orthorombic region defined by %s. ' % (str(point), str(orthorhombicRegionParameter))
        else:
            print 'Point %s is NOT in orthorombic region defined by %s. ' % (str(point), str(orthorhombicRegionParameter))

        if sphericalRegion.inRegion(point):
            print 'Point %s is in spherical region defined by %s. ' % (str(point), str(sphericalRegionParameter))
        else:
            print 'Point %s is NOT in spherical region defined by %s. ' % (str(point), str(sphericalRegionParameter))
    print 'Testing RegionRule class is done.'

    # Testing RegionList class
    print 'Testing RegionList class...'
    imove = [0, 0]
    masses = [1., 1.]
    coords = [0., 0., 0., 1.15, 1.15, 1.15]
    vels = [0.1, 0.2, -0.1, 0.3, -0.1, -0.6]
    print 'Original vels =', vels
    regionRules = [orthorhombicRegion, sphericalRegion]
    thermoList = ThermoList(regionRules)
    thermoAtomLists, thermoMoveLists, thermoMassLists, thermoVelLists = thermoList.calcRegionList(imove, masses, coords, vels)
    for iRegion in range(len(thermoAtomLists)):
        thermoVelLists[iRegion] = numpy.array(thermoVelLists[iRegion], numpy.Float) 
        thermoVelLists[iRegion] *= 2.
        vels = thermoList.setVels(thermoAtomLists[iRegion], thermoVelLists[iRegion], vels)
    print 'Updated vels (vels in region X2) =', vels
    print 'Note: If a point is located in more than one regions, only the region rule which is first satisfied \
has higher priority to encompass the point.'
    print 'Testing RegionList class is done.'

