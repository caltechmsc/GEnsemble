#!/usr/bin/env python
"""\
 Atom.py: Simple class for atoms.

 This program is part of the PyQuante quantum chemistry program suite

 Copyright (c) 2004, Richard P. Muller. All Rights Reserved. 

 PyQuante version 1.2 and later is covered by the modified BSD
 license. Please see the file LICENSE that is part of this
 distribution. 
"""

# My goal is to keep everything generic,i.e. not specific to
#  MINDO, HF, DFT, etc.

from PyQuante.cints import dist2,dist
from Element import mass
from Constants import bohr2ang
from Vec3 import Vec3

# Careful about units! I'm not doing anything about them here;
#  whatever you store you get back.

class Atom:
    def __init__(self,atno,x,y,z):
        self.atno = atno
        self.r = Vec3(x,y,z)
        return

    def mass(self): return mass[self.atno]
    def pos(self): return self.r.tuple()
    def dist2(self,atom): return dist2(self.pos(),atom.pos())
    def dist(self,atom): return dist(self.pos(),atom.pos())
    def atuple(self): return (self.atno,self.r)
    def translate(self,pos): self.r += pos

    # The next two I've written as functions since if I ever handle
    #  pseudopotentials I'll need to do something clever, and this
    #  gives me a degree of indirection that will allow me to do this
    def get_nel(self): return self.atno
    def get_nuke_chg(self): return self.atno

    def update_from_atuple(self,(atno,(x,y,z))): self.r = Vec3(x,y,z)


def test():
    at1 = Atom(1,0,0,0)
    at2 = Atom(1,1,0,0)
    print at1.dist(at2)

if __name__ == '__main__': test()
