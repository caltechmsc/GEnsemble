#!/usr/bin/env python
"""\
 Code for unrestricted open-shell hartree fock programs in PyQuante.
 This has now been verified against the UHF results from Jaguar for NO
  (open shell) and H2O (closed shell, trivial). Appears to require the
  density matrix averaging step herein. the convergence is still
  excruciatingly slow, possibly requiring some acceleration scheme.

 This program is part of the PyQuante quantum chemistry program suite.

 Copyright (c) 2004, Richard P. Muller. All Rights Reserved. 

 PyQuante version 1.2 and later is covered by the modified BSD
 license. Please see the file LICENSE that is part of this
 distribution. 
"""

from basis_631ss import basis
from Ints import getints,getbasis,getJ,getK
from hartree_fock import get_energy
from LA2 import mkdens,GHeigenvectors,mkdens
averaging = 0.5 # 0 turns off, D = ave*D + (1-ave)*Dold otherwise

def uhf(atomlist,charge=0,ConvCriteria=0.0001,MaxIter=20):
    "General wrapper for unrestricted Hartree-Fock"
    bfs = getbasis(atomlist,basis)
    S,h,Ints = getints(bfs,atomlist)
    orbe,orbs = GHeigenvectors(h,S)
    orbsa = orbsb = orbs
    nel = atomlist.get_nel(charge)
    nclosed,nopen = divmod(nel,2)
    nalpha,nbeta = nclosed+nopen,nclosed
    enuke = atomlist.get_enuke()
    eold = 0.
    for i in range(MaxIter):
        Da = mkdens(orbsa,0,nalpha)
        Db = mkdens(orbsb,0,nbeta)
        if averaging:
            if i: 
                Da = averaging*Da + (1-averaging)*Da0
                Db = averaging*Db + (1-averaging)*Db0
            Da0 = Da
            Db0 = Db

        Ja = getJ(Ints,Da)
        Jb = getJ(Ints,Db)
        Ka = getK(Ints,Da)
        Kb = getK(Ints,Db)
        Fa = h+Ja+Jb-Ka
        Fb = h+Ja+Jb-Kb
        orbea,orbsa = GHeigenvectors(Fa,S)
        orbeb,orbsb = GHeigenvectors(Fb,S)
        energya = get_energy(h,Fa,Da)
        energyb = get_energy(h,Fb,Db)
        energy = (energya+energyb)/2+enuke
        #print i,energy
        if abs(energy-eold) < ConvCriteria: break
        eold = energy
    return energy


    
