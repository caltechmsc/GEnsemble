#!/usr/bin/env python
"""\
 Molecule.py: Simple class for molecules.

 TODO: *Really* need to think of a more intelligent way of handling
 units!

 This program is part of the PyQuante quantum chemistry program suite.

 Copyright (c) 2004, Richard P. Muller. All Rights Reserved. 

 PyQuante version 1.2 and later is covered by the modified BSD
 license. Please see the file LICENSE that is part of this
 distribution. 
"""

from PyQuante.Atom import Atom

class Molecule:
    def __init__(self,name='molecule',atomlist=None,filename=None,
                 units='Bohr'):
        self.name = name
        self.atoms = []
        self.units = units
        if atomlist and filename:
            raise "Declare atomlist *or* filename, but not both"
        elif atomlist:
            self.add_atuples(atomlist)
        elif filename:
            self.add_xyz_file(filename)
        else:
            raise "Must declare either atomlist or filename"
        return

    def update_from_atuples(self,geo):
        for i in range(len(geo)):
            self.atoms[i].update_from_atuple(geo[i])
        return

    def translate(self,pos):
        for atom in self.atoms: atom.translate(pos)
        return
    
    def add_atuple(self,atno,xyz):
        if self.units != 'Bohr': xyz = toBohr3(xyz[0],xyz[1],xyz[2])
        self.atoms.append(Atom(atno,xyz[0],xyz[1],xyz[2]))

    def add_atuples(self,atoms):
        "Add a list of (atno,(x,y,z)) tuples to the atom list"
        from Atom import Atom
        for atno,xyz in atoms: self.add_atuple(atno,xyz)
        return

    def atuples(self):
        "Express molecule as a list of (atno,(x,y,z)) tuples"
        atoms = []
        for atom in self.atoms: atoms.append(atom.atuple())
        return atoms

    def atuples_angstrom(self):
        atoms = []
        for atom in self.atoms:
            atno,xyz = atom.atuple()
            atoms.append((atno,toAng3(xyz[0],xyz[1],xyz[2])))
        return atoms

    def add_xyz_file(self,filename,which_frame=-1):
        "Input atoms from xyz file. By default choose the last frame"
        from IO import read_xyz
        geos = read_xyz(filename)
        self.add_atuples(geos[which_frame])
        return

    def get_nel(self,charge=0):
        nel = -charge
        for atom in self.atoms: nel += atom.get_nel()
        return nel

    def get_enuke(self):
        enuke = 0.
        nat = len(self.atoms)
        for i in range(nat):
            ati = self.atoms[i]
            for j in range(i):
                atj = self.atoms[j]
                enuke += ati.get_nuke_chg()*atj.get_nuke_chg()/ati.dist(atj)
        return enuke

    # These two overloads let the molecule act as a list of atoms
    def __getitem__(self,i):return self.atoms[i]
    def __len__(self): return len(self.atoms)

# Simple utilities
def toBohr(x): return x/0.52918
def toBohr3(x,y,z): return toBohr(x),toBohr(y),toBohr(z)
def toAng(x): return x*0.52918
def toAng3(x,y,z): return toAng(x),toAng(y),toAng(z)

