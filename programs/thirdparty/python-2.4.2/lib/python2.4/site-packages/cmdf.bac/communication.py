########################################################################################
#
#  comnnunication module handles the data communication between system object and 
#  arrays. 
#  Current system object is C++ data model with Python bindings; 
#  Arrays are adapted in the form of numarray.
#
#  systemToArrays: dump system information into arrays.
#  ArraysToSystem: set system information from arrays.
#
#  Created on 05/05/2006; last revision on 06/05/2006.  Jef and yi
#
########################################################################################
from numpy import *
from modbabel import *

def systemToArrays(system):
    mol = system.getMolecule(0)
    natoms = mol.numAtoms()

    energy = mol.getPotentialEnergy()
    cellDim = array([system.getA(),system.getB(),system.getC()  \
        ,system.getAlpha(),system.getBeta(),system.getGamma()], Float)
    elements = [None]*natoms
    coords = zeros(3*natoms, Float)
    forces = zeros(3*natoms, Float)
    oldForces = zeros(3*natoms, Float)
    fixed = zeros(natoms, Int)
    charges = zeros(natoms, Float)
    fftypes = ['' for i in range(natoms)]
    vels = zeros(3*natoms, Float)
    masses = ones(natoms, Float)
    imove = zeros(natoms, Int)

    bondlist = zeros(6*natoms, Int)
    orderlist = ones(6*natoms, Float)

    for i in range(natoms):
        i30 = i * 3    
        i31 = i30 + 1
        i32 = i30 + 2
        i6  = i * 6
        atom = mol.getAtomWithNumber(i+1)
        elements[i] = atom.getElement()
        coords[i30] = atom.getX() 
        coords[i31] = atom.getY() 
        coords[i32] = atom.getZ() 
        vels[i30] = atom.getVelocityX() 
        vels[i31] = atom.getVelocityY() 
        vels[i32] = atom.getVelocityZ() 
        forces[i30] = atom.getForceX() 
        forces[i31] = atom.getForceY() 
        forces[i32] = atom.getForceZ() 
        oldForces[i30] = atom.getOldForceX() 
        oldForces[i31] = atom.getOldForceY() 
        oldForces[i32] = atom.getOldForceZ() 
        charges[i] = atom.getCharge()
        fftypes[i] = atom.getFFType()
        masses[i] = atom.getAtomicMass()
        if atom.isMovable() == 1:
            imove[i] = 0 
        elif atom.isFixed() == 1:
            imove[i] = 1
        elif atom.isIgnored() == 1:
            imove[i] = 2

        numNeighbors = atom.numNeighbors()
        for j in range(numNeighbors):
            bond = atom.getNeighbor(j)
            if j < 6:
                bondlist[i6+j] = bond.getNeighborNumber()
                orderlist[i6+j] = bond.getOrder()

    return (cellDim, elements, coords, vels, energy, forces, oldForces, imove, fixed, charges, masses, fftypes, bondlist, orderlist)

def arraysToSystem_md(system, cellDim, coords, vels, energy, forces, oldForces):
    system.setCellParameters(cellDim[0], cellDim[1], cellDim[2], cellDim[3], cellDim[4], cellDim[5])

    molecule = system.getMolecule(0)
    numAtoms = molecule.numAtoms()
    molecule.setPotentialEnergy(energy)

    for i in range(numAtoms):
        atom = molecule.getAtomWithNumber(i+1)
        i30 = i * 3    
        i31 = i30 + 1
        i32 = i30 + 2
        atom.setPosition(float(coords[i30]), float(coords[i31]), float(coords[i32])) 
        atom.setVelocity(float(vels[i30]), float(vels[i31]), float(vels[i32])) 
        atom.setForce(float(forces[i30]), float(forces[i31]), float(forces[i32])) 
        atom.setOldForce(float(oldForces[i30]), float(oldForces[i31]), float(oldForces[i32])) 

    return

def arraysToSystem_min(system, coords, energy, forces):

    molecule = system.getMolecule(0)
    numAtoms = molecule.numAtoms()
    molecule.setPotentialEnergy(energy)

    for i in range(numAtoms):
        atom = molecule.getAtomWithNumber(i+1)
        i30 = i * 3    
        i31 = i30 + 1
        i32 = i30 + 2
        atom.setPosition(float(coords[i30]), float(coords[i31]), float(coords[i32])) 
        atom.setForce(float(forces[i30]), float(forces[i31]), float(forces[i32])) 

    return

"""
if __name__ == '__main__':
    from modbabel import *
    from meeForceEngine import MeeForceEngine
    import bgfio, profile
    from communication import * 


    system = bgfio.read('RDX.bgf')
    mol = system.getMolecule(0)
    natoms = mol.numAtoms()

    cellDim, coords, vels, forces, imove, fixed, charges, masses, fftypes, blist, bolist = systemToArrays(system)
    mee = MeeForceEngine(natoms)
    mee.setupEnergyExpression(coords, fixed, charges, fftypes, blist, bolist)
    mee.setCoords(coords)
    mee.calcEnergyForce()
    forces = mee.getForces()
    energy = mee.getEnergy()

    print energy
    print forces
"""
