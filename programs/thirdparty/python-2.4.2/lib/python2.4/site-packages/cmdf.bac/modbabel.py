# This file was created automatically by SWIG.
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _modbabel

def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "this"):
        if isinstance(value, class_type):
            self.__dict__[name] = value.this
            if hasattr(value,"thisown"): self.__dict__["thisown"] = value.thisown
            del value.thisown
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name) or (name == "thisown"):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class Atom(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Atom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Atom, name)
    def __repr__(self):
        return "<%s.%s; proxy of C++ Atom instance at %s>" % (self.__class__.__module__, self.__class__.__name__, self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Atom, 'this', _modbabel.new_Atom(*args))
        _swig_setattr(self, Atom, 'thisown', 1)
    def __del__(self, destroy=_modbabel.delete_Atom):
        try:
            if self.thisown: destroy(self)
        except: pass

    def init(*args): return _modbabel.Atom_init(*args)
    def clear(*args): return _modbabel.Atom_clear(*args)
    def numNeighbors(*args): return _modbabel.Atom_numNeighbors(*args)
    def getResidueName(*args): return _modbabel.Atom_getResidueName(*args)
    def getResidueNumber(*args): return _modbabel.Atom_getResidueNumber(*args)
    def getChain(*args): return _modbabel.Atom_getChain(*args)
    def getNumber(*args): return _modbabel.Atom_getNumber(*args)
    def getAtomicNumber(*args): return _modbabel.Atom_getAtomicNumber(*args)
    def getAtomicMass(*args): return _modbabel.Atom_getAtomicMass(*args)
    def getCharge(*args): return _modbabel.Atom_getCharge(*args)
    def getX(*args): return _modbabel.Atom_getX(*args)
    def getY(*args): return _modbabel.Atom_getY(*args)
    def getZ(*args): return _modbabel.Atom_getZ(*args)
    def getVelocityX(*args): return _modbabel.Atom_getVelocityX(*args)
    def getVelocityY(*args): return _modbabel.Atom_getVelocityY(*args)
    def getVelocityZ(*args): return _modbabel.Atom_getVelocityZ(*args)
    def getForceX(*args): return _modbabel.Atom_getForceX(*args)
    def getForceY(*args): return _modbabel.Atom_getForceY(*args)
    def getForceZ(*args): return _modbabel.Atom_getForceZ(*args)
    def getOldForceX(*args): return _modbabel.Atom_getOldForceX(*args)
    def getOldForceY(*args): return _modbabel.Atom_getOldForceY(*args)
    def getOldForceZ(*args): return _modbabel.Atom_getOldForceZ(*args)
    def getOldVelocityX(*args): return _modbabel.Atom_getOldVelocityX(*args)
    def getOldVelocityY(*args): return _modbabel.Atom_getOldVelocityY(*args)
    def getOldVelocityZ(*args): return _modbabel.Atom_getOldVelocityZ(*args)
    def getOldX(*args): return _modbabel.Atom_getOldX(*args)
    def getOldY(*args): return _modbabel.Atom_getOldY(*args)
    def getOldZ(*args): return _modbabel.Atom_getOldZ(*args)
    def getFreqX(*args): return _modbabel.Atom_getFreqX(*args)
    def getFreqY(*args): return _modbabel.Atom_getFreqY(*args)
    def getFreqZ(*args): return _modbabel.Atom_getFreqZ(*args)
    def getGID(*args): return _modbabel.Atom_getGID(*args)
    def getTag(*args): return _modbabel.Atom_getTag(*args)
    def getLabel(*args): return _modbabel.Atom_getLabel(*args)
    def getFFType(*args): return _modbabel.Atom_getFFType(*args)
    def getElement(*args): return _modbabel.Atom_getElement(*args)
    def getPotentialEnergy(*args): return _modbabel.Atom_getPotentialEnergy(*args)
    def getWeight(*args): return _modbabel.Atom_getWeight(*args)
    def getTmp(*args): return _modbabel.Atom_getTmp(*args)
    def getEngine(*args): return _modbabel.Atom_getEngine(*args)
    def getNeighbor(*args): return _modbabel.Atom_getNeighbor(*args)
    def getMaxCovalentBonds(*args): return _modbabel.Atom_getMaxCovalentBonds(*args)
    def getLonePairs(*args): return _modbabel.Atom_getLonePairs(*args)
    def addBond(*args): return _modbabel.Atom_addBond(*args)
    def addBondOrder(*args): return _modbabel.Atom_addBondOrder(*args)
    def addBondItran(*args): return _modbabel.Atom_addBondItran(*args)
    def setResidueName(*args): return _modbabel.Atom_setResidueName(*args)
    def setResidueNumber(*args): return _modbabel.Atom_setResidueNumber(*args)
    def setChain(*args): return _modbabel.Atom_setChain(*args)
    def setNumber(*args): return _modbabel.Atom_setNumber(*args)
    def setAtomicNumber(*args): return _modbabel.Atom_setAtomicNumber(*args)
    def setAtomicMass(*args): return _modbabel.Atom_setAtomicMass(*args)
    def setCharge(*args): return _modbabel.Atom_setCharge(*args)
    def zeroPosition(*args): return _modbabel.Atom_zeroPosition(*args)
    def setPosition(*args): return _modbabel.Atom_setPosition(*args)
    def setX(*args): return _modbabel.Atom_setX(*args)
    def setY(*args): return _modbabel.Atom_setY(*args)
    def setZ(*args): return _modbabel.Atom_setZ(*args)
    def setOldPosition(*args): return _modbabel.Atom_setOldPosition(*args)
    def setOldX(*args): return _modbabel.Atom_setOldX(*args)
    def setOldY(*args): return _modbabel.Atom_setOldY(*args)
    def setOldZ(*args): return _modbabel.Atom_setOldZ(*args)
    def setVelocity(*args): return _modbabel.Atom_setVelocity(*args)
    def setVelocityX(*args): return _modbabel.Atom_setVelocityX(*args)
    def setVelocityY(*args): return _modbabel.Atom_setVelocityY(*args)
    def setVelocityZ(*args): return _modbabel.Atom_setVelocityZ(*args)
    def setForce(*args): return _modbabel.Atom_setForce(*args)
    def setForceX(*args): return _modbabel.Atom_setForceX(*args)
    def setForceY(*args): return _modbabel.Atom_setForceY(*args)
    def setForceZ(*args): return _modbabel.Atom_setForceZ(*args)
    def setOldForce(*args): return _modbabel.Atom_setOldForce(*args)
    def setOldForceX(*args): return _modbabel.Atom_setOldForceX(*args)
    def setOldForceY(*args): return _modbabel.Atom_setOldForceY(*args)
    def setOldForceZ(*args): return _modbabel.Atom_setOldForceZ(*args)
    def setOldVelocity(*args): return _modbabel.Atom_setOldVelocity(*args)
    def setOldVelocityX(*args): return _modbabel.Atom_setOldVelocityX(*args)
    def setOldVelocityY(*args): return _modbabel.Atom_setOldVelocityY(*args)
    def setOldVelocityZ(*args): return _modbabel.Atom_setOldVelocityZ(*args)
    def setFreq(*args): return _modbabel.Atom_setFreq(*args)
    def setFreqX(*args): return _modbabel.Atom_setFreqX(*args)
    def setFreqY(*args): return _modbabel.Atom_setFreqY(*args)
    def setFreqZ(*args): return _modbabel.Atom_setFreqZ(*args)
    def setMovable(*args): return _modbabel.Atom_setMovable(*args)
    def setFixed(*args): return _modbabel.Atom_setFixed(*args)
    def setIgnored(*args): return _modbabel.Atom_setIgnored(*args)
    def isMovable(*args): return _modbabel.Atom_isMovable(*args)
    def isFixed(*args): return _modbabel.Atom_isFixed(*args)
    def isIgnored(*args): return _modbabel.Atom_isIgnored(*args)
    def setTag(*args): return _modbabel.Atom_setTag(*args)
    def setLabel(*args): return _modbabel.Atom_setLabel(*args)
    def setFFType(*args): return _modbabel.Atom_setFFType(*args)
    def setElement(*args): return _modbabel.Atom_setElement(*args)
    def setGID(*args): return _modbabel.Atom_setGID(*args)
    def setPotentialEnergy(*args): return _modbabel.Atom_setPotentialEnergy(*args)
    def setWeight(*args): return _modbabel.Atom_setWeight(*args)
    def setTmp(*args): return _modbabel.Atom_setTmp(*args)
    def setEngine(*args): return _modbabel.Atom_setEngine(*args)
    def setMaxCovalentBonds(*args): return _modbabel.Atom_setMaxCovalentBonds(*args)
    def setLonePairs(*args): return _modbabel.Atom_setLonePairs(*args)
    def removeBond(*args): return _modbabel.Atom_removeBond(*args)

class AtomPtr(Atom):
    def __init__(self, this):
        _swig_setattr(self, Atom, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Atom, 'thisown', 0)
        _swig_setattr(self, Atom,self.__class__,Atom)
_modbabel.Atom_swigregister(AtomPtr)

class Bond(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bond, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bond, name)
    def __repr__(self):
        return "<%s.%s; proxy of C++ Bond instance at %s>" % (self.__class__.__module__, self.__class__.__name__, self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Bond, 'this', _modbabel.new_Bond(*args))
        _swig_setattr(self, Bond, 'thisown', 1)
    def __del__(self, destroy=_modbabel.delete_Bond):
        try:
            if self.thisown: destroy(self)
        except: pass

    def getOrder(*args): return _modbabel.Bond_getOrder(*args)
    def getRootNumber(*args): return _modbabel.Bond_getRootNumber(*args)
    def getNeighborNumber(*args): return _modbabel.Bond_getNeighborNumber(*args)
    def getItran(*args): return _modbabel.Bond_getItran(*args)
    def setRootNumber(*args): return _modbabel.Bond_setRootNumber(*args)
    def setNeighborNumber(*args): return _modbabel.Bond_setNeighborNumber(*args)
    def setOrder(*args): return _modbabel.Bond_setOrder(*args)
    def setItran(*args): return _modbabel.Bond_setItran(*args)

class BondPtr(Bond):
    def __init__(self, this):
        _swig_setattr(self, Bond, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Bond, 'thisown', 0)
        _swig_setattr(self, Bond,self.__class__,Bond)
_modbabel.Bond_swigregister(BondPtr)

class Molecule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Molecule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Molecule, name)
    def __repr__(self):
        return "<%s.%s; proxy of C++ Molecule instance at %s>" % (self.__class__.__module__, self.__class__.__name__, self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Molecule, 'this', _modbabel.new_Molecule(*args))
        _swig_setattr(self, Molecule, 'thisown', 1)
    def __del__(self, destroy=_modbabel.delete_Molecule):
        try:
            if self.thisown: destroy(self)
        except: pass

    def getNumber(*args): return _modbabel.Molecule_getNumber(*args)
    def getName(*args): return _modbabel.Molecule_getName(*args)
    def getAtomWithNumber(*args): return _modbabel.Molecule_getAtomWithNumber(*args)
    def numAtoms(*args): return _modbabel.Molecule_numAtoms(*args)
    def numMovableAtoms(*args): return _modbabel.Molecule_numMovableAtoms(*args)
    def numFixedAtoms(*args): return _modbabel.Molecule_numFixedAtoms(*args)
    def numIgnoredAtoms(*args): return _modbabel.Molecule_numIgnoredAtoms(*args)
    def numChains(*args): return _modbabel.Molecule_numChains(*args)
    def getDimension(*args): return _modbabel.Molecule_getDimension(*args)
    def getDegFree(*args): return _modbabel.Molecule_getDegFree(*args)
    def getCharge(*args): return _modbabel.Molecule_getCharge(*args)
    def getOldPotentialEnergy(*args): return _modbabel.Molecule_getOldPotentialEnergy(*args)
    def getKineticEnergy(*args): return _modbabel.Molecule_getKineticEnergy(*args)
    def calcKineticEnergy(*args): return _modbabel.Molecule_calcKineticEnergy(*args)
    def calcOldKineticEnergy(*args): return _modbabel.Molecule_calcOldKineticEnergy(*args)
    def setKineticEnergy(*args): return _modbabel.Molecule_setKineticEnergy(*args)
    def setDegFree(*args): return _modbabel.Molecule_setDegFree(*args)
    def getHessian(*args): return _modbabel.Molecule_getHessian(*args)
    def getPotentialEnergy(*args): return _modbabel.Molecule_getPotentialEnergy(*args)
    def getValenceEnergy(*args): return _modbabel.Molecule_getValenceEnergy(*args)
    def setValenceEnergy(*args): return _modbabel.Molecule_setValenceEnergy(*args)
    def getVDWEnergy(*args): return _modbabel.Molecule_getVDWEnergy(*args)
    def setVDWEnergy(*args): return _modbabel.Molecule_setVDWEnergy(*args)
    def getCoulombEnergy(*args): return _modbabel.Molecule_getCoulombEnergy(*args)
    def setCoulombEnergy(*args): return _modbabel.Molecule_setCoulombEnergy(*args)
    def getSolvationEnergy(*args): return _modbabel.Molecule_getSolvationEnergy(*args)
    def setSolvationEnergy(*args): return _modbabel.Molecule_setSolvationEnergy(*args)
    def newAtom(*args): return _modbabel.Molecule_newAtom(*args)
    def setNumber(*args): return _modbabel.Molecule_setNumber(*args)
    def setName(*args): return _modbabel.Molecule_setName(*args)
    def addBond(*args): return _modbabel.Molecule_addBond(*args)
    def addBonds(*args): return _modbabel.Molecule_addBonds(*args)
    def addBondOrders(*args): return _modbabel.Molecule_addBondOrders(*args)
    def addBondItrans(*args): return _modbabel.Molecule_addBondItrans(*args)
    def newChain(*args): return _modbabel.Molecule_newChain(*args)
    def getChain(*args): return _modbabel.Molecule_getChain(*args)
    def getDefaultResidue(*args): return _modbabel.Molecule_getDefaultResidue(*args)
    def getResidue(*args): return _modbabel.Molecule_getResidue(*args)
    def removeBonds(*args): return _modbabel.Molecule_removeBonds(*args)
    def removeAtomWithNumber(*args): return _modbabel.Molecule_removeAtomWithNumber(*args)
    def setCharge(*args): return _modbabel.Molecule_setCharge(*args)
    def setPotentialEnergy(*args): return _modbabel.Molecule_setPotentialEnergy(*args)
    def setOldPotentialEnergy(*args): return _modbabel.Molecule_setOldPotentialEnergy(*args)
    def initHessian(*args): return _modbabel.Molecule_initHessian(*args)
    def setHessian(*args): return _modbabel.Molecule_setHessian(*args)
    def translateCM(*args): return _modbabel.Molecule_translateCM(*args)
    def removeMomentum(*args): return _modbabel.Molecule_removeMomentum(*args)

class MoleculePtr(Molecule):
    def __init__(self, this):
        _swig_setattr(self, Molecule, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Molecule, 'thisown', 0)
        _swig_setattr(self, Molecule,self.__class__,Molecule)
_modbabel.Molecule_swigregister(MoleculePtr)

class Residue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Residue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Residue, name)
    def __repr__(self):
        return "<%s.%s; proxy of C++ Residue instance at %s>" % (self.__class__.__module__, self.__class__.__name__, self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Residue, 'this', _modbabel.new_Residue(*args))
        _swig_setattr(self, Residue, 'thisown', 1)
    def __del__(self, destroy=_modbabel.delete_Residue):
        try:
            if self.thisown: destroy(self)
        except: pass

    def newAtom(*args): return _modbabel.Residue_newAtom(*args)
    def setName(*args): return _modbabel.Residue_setName(*args)
    def setNumber(*args): return _modbabel.Residue_setNumber(*args)
    def addBonds(*args): return _modbabel.Residue_addBonds(*args)
    def addBondOrders(*args): return _modbabel.Residue_addBondOrders(*args)
    def addBondItrans(*args): return _modbabel.Residue_addBondItrans(*args)
    def removeBonds(*args): return _modbabel.Residue_removeBonds(*args)
    def getName(*args): return _modbabel.Residue_getName(*args)
    def getNumber(*args): return _modbabel.Residue_getNumber(*args)
    def getLabel(*args): return _modbabel.Residue_getLabel(*args)
    def numAtoms(*args): return _modbabel.Residue_numAtoms(*args)
    def getAtomIndex(*args): return _modbabel.Residue_getAtomIndex(*args)
    def getAtom(*args): return _modbabel.Residue_getAtom(*args)
    def getAtomWithNumber(*args): return _modbabel.Residue_getAtomWithNumber(*args)
    def removeAtomWithNumber(*args): return _modbabel.Residue_removeAtomWithNumber(*args)

class ResiduePtr(Residue):
    def __init__(self, this):
        _swig_setattr(self, Residue, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Residue, 'thisown', 0)
        _swig_setattr(self, Residue,self.__class__,Residue)
_modbabel.Residue_swigregister(ResiduePtr)

class Chain(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Chain, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Chain, name)
    def __repr__(self):
        return "<%s.%s; proxy of C++ Chain instance at %s>" % (self.__class__.__module__, self.__class__.__name__, self.this,)
    def __init__(self, *args):
        _swig_setattr(self, Chain, 'this', _modbabel.new_Chain(*args))
        _swig_setattr(self, Chain, 'thisown', 1)
    def __del__(self, destroy=_modbabel.delete_Chain):
        try:
            if self.thisown: destroy(self)
        except: pass

    def getName(*args): return _modbabel.Chain_getName(*args)
    def numResidues(*args): return _modbabel.Chain_numResidues(*args)
    def getResidue(*args): return _modbabel.Chain_getResidue(*args)
    def setName(*args): return _modbabel.Chain_setName(*args)
    def newResidue(*args): return _modbabel.Chain_newResidue(*args)

class ChainPtr(Chain):
    def __init__(self, this):
        _swig_setattr(self, Chain, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, Chain, 'thisown', 0)
        _swig_setattr(self, Chain,self.__class__,Chain)
_modbabel.Chain_swigregister(ChainPtr)

class System(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, System, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, System, name)
    def __repr__(self):
        return "<%s.%s; proxy of C++ System instance at %s>" % (self.__class__.__module__, self.__class__.__name__, self.this,)
    def __init__(self, *args):
        _swig_setattr(self, System, 'this', _modbabel.new_System(*args))
        _swig_setattr(self, System, 'thisown', 1)
    def __del__(self, destroy=_modbabel.delete_System):
        try:
            if self.thisown: destroy(self)
        except: pass

    def getNumber(*args): return _modbabel.System_getNumber(*args)
    def getMolecule(*args): return _modbabel.System_getMolecule(*args)
    def numMolecules(*args): return _modbabel.System_numMolecules(*args)
    def getSgName(*args): return _modbabel.System_getSgName(*args)
    def getSgSymbol(*args): return _modbabel.System_getSgSymbol(*args)
    def getSgNumber(*args): return _modbabel.System_getSgNumber(*args)
    def getSgCaseNumber(*args): return _modbabel.System_getSgCaseNumber(*args)
    def getA(*args): return _modbabel.System_getA(*args)
    def getB(*args): return _modbabel.System_getB(*args)
    def getC(*args): return _modbabel.System_getC(*args)
    def getAlpha(*args): return _modbabel.System_getAlpha(*args)
    def getBeta(*args): return _modbabel.System_getBeta(*args)
    def getGamma(*args): return _modbabel.System_getGamma(*args)
    def setNumber(*args): return _modbabel.System_setNumber(*args)
    def newMolecule(*args): return _modbabel.System_newMolecule(*args)
    def setSgName(*args): return _modbabel.System_setSgName(*args)
    def setSgSymbol(*args): return _modbabel.System_setSgSymbol(*args)
    def setSgNumber(*args): return _modbabel.System_setSgNumber(*args)
    def setSgCaseNumber(*args): return _modbabel.System_setSgCaseNumber(*args)
    def setCellParameters(*args): return _modbabel.System_setCellParameters(*args)
    def setA(*args): return _modbabel.System_setA(*args)
    def setB(*args): return _modbabel.System_setB(*args)
    def setC(*args): return _modbabel.System_setC(*args)
    def setAlpha(*args): return _modbabel.System_setAlpha(*args)
    def setBeta(*args): return _modbabel.System_setBeta(*args)
    def setGamma(*args): return _modbabel.System_setGamma(*args)

class SystemPtr(System):
    def __init__(self, this):
        _swig_setattr(self, System, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, System, 'thisown', 0)
        _swig_setattr(self, System,self.__class__,System)
_modbabel.System_swigregister(SystemPtr)


