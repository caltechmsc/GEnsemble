"""\
 Code for restricted open-shell hartree fock programs in PyQuante.

 This program is part of the PyQuante quantum chemistry program suite.

 Copyright (c) 2004, Richard P. Muller. All Rights Reserved. 

 PyQuante version 1.2 and later is covered by the modified BSD
 license. Please see the file LICENSE that is part of this
 distribution. 
"""

def get_os_dens(evecs,nclosed,nopen):
    Ds = [2.*mkdens(evecs,0,nclosed)]
    for i in range(nopen):
        Ds.append(mkdens(evecs,nclosed+i,nclosed+i+1))
    return Ds

def get_os_hams(Ints,Ds):
    Hs = [get2JmK(Ints,D[0])]
    for D in Ds[1:]:
        Hs.append(getJ(Ints,D))
        Hs.append(getK(Ints,D))
    return Hs

def rotion(evecs,h,Hs,nclosed,nopen):
    nham = (len(Hs)+1)/2
    if nham == 1: return evecs # No effect for closed shell systems
    rot = get_rot(h,Hs)
    erot = expmat(rot)

def get_rot(h,Hs,nclosed,nopen):
    rot = zeros((nclosed+nopen,nclosed+nopen))
    for j in range(nclosed,nclosed+nopen):
        for i in range(nclosed):
            Wij = -0.5*(h[i,j]+Hs[0][i,j])
            Wii = -0.5*(h[i,i]+Hs[0][i,i])
            Wjj = -0.5*(h[j,j]+Hs[0][j,j])
            for k in range(nham):
                Wij = Wij - 0.5*Hs[2*i+1][i,j]
                Wii = Wij - 0.5*Hs[2*i+1][i,i]
                Wjj = Wij - 0.5*Hs[2*i+1][j,j]
            jsh = j-nclosed
            Jij = Hs[2*jsh+1][i,i]
            Kij = Hs[2*jsh+2][i,i]
            gamma = Kij-0.5*(Kij+Jij)
            Xij = -Wij
            Bij = Wii-Wjj+gamma
            if Bij > 0:
                Rij = -Xij/Bij
            else:
                Rij = Xij/Bij
            rot[i,j] = rot[j,i] = Rij
    return rot

def scfos(atomlist,S,h,Ints,multip=0,charge=0,
            ConvCriteria=0.0001,MaxIter=20):
    "Special case of scf for doublets"
    evecs = get_guess(h,S)
    enuke = get_enuke_from_atomlist(atomlist)
    nclosed,nopen = get_nocc_from_atomlist(atomlist,multip,charge)
    nhams = nopen+1
    eold = 0.
    for i in range(MaxIter):
        Ds = get_os_dens(evecs,nclosed,nopen)
        Hs = get_os_hams(Ints,Ds)
        evecs = rotion(evecs,h,Hs,nclosed,nopen)
        evecs = ocbse(evecs,h,Hs)
        energy = get_os_energy(h,Hs,enuke)
        if abs(energy-eold) < ConvCriteria: break
        eold = energy
    return energy,evals,evecs

        
def rohf(atomlist):
    from basis_631ss import basis
    bfs = getbasis(atomlist,basis)
    S,h = get1ints(bfs,atomlist)
    Ints = get2ints(bfs)
    en,orbe,orbs = doublet(atomlist,S,h,Ints)
    return en

