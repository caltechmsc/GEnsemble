#!/usr/bin/env python
"""\
 DFunctionals.py Exchange and Correlation Density Functionals

 This program is part of the PyQuante quantum chemistry program suite.

 Copyright (c) 2004, Richard P. Muller. All Rights Reserved. 

 PyQuante version 1.2 and later is covered by the modified BSD
 license. Please see the file LICENSE that is part of this
 distribution. 
"""

from math import *
from Numeric import *

def S(dens):
    """Slater exchange functional for a vector of densities. Based upon
    the classic Slater exchange (which actually came from Dirac). See
     JC Slater 'The self consistent field for molecules and solids',
     McGraw Hill, New York, 1974."""
    fac=-0.75*pow(3./pi,1./3.)
    # Cut off any small values of the density to prevent underflow:
    dens = choose(dens < 1.e-10,(dens,0))    
    ex = fac*dens**(4./3.)
    vx = (4./3.)*fac*dens**(1./3.)
    return ex,vx

def VWN(dens):
    """Vosko-Wilk-Nusair correlation functional for a vector of
    densities. From 'Accurate spin-dependent electron liquid
    correlation energies for local spin density calculations:
    a critical analysis.' SH Vosko, L Wilk, M Nusair, Can J
    Phys, 58, 1200 (1980)."""
    #I'd like to expand this to be more of a vector function eventually
    npts = len(dens)
    ec = zeros(npts,Float)
    vc = zeros(npts,Float)
    fthirdpi=4.*pi/3.
    sixthm=-1./6.
    ap=.5*0.0621814
    x0p=-0.10498
    bp=3.72744
    cp=12.9352
    tol=1e-12
    for i in range(npts):
        rho = dens[i]
        if rho > tol:
            x=pow(fthirdpi*rho,sixthm)
            eps = vwn_eps(x,ap,x0p,bp,cp)
            ec[i] =eps*rho
            deps = vwn_deps(x,ap,x0p,bp,cp)
            vc[i] = eps - (x/6.)*deps
    return ec,vc


def xx(x,b,c): return x*x+b*x+c

def vwn_eps (x,a,x0,b,c):
    q = sqrt(4*c-b*b)
    eps = a*(log(x*x/xx(x,b,c))
             - b*(x0/xx(x0,b,c))*log(pow(x-x0,2)/xx(x,b,c))
             + (2*b/q)*(1-(x0*(2*x0+b)/xx(x0,b,c))) * atan(q/(2*x+b)))
    return eps

def vwn_deps(x,a,x0,b,c):
    q = sqrt(4*c-b*b)
    deps = a*(2/x - (2*x+b)/xx(x,b,c)
              - 4*b/(pow(2*x+b,2)+q*q) - (b*x0/xx(x0,b,c))
              * (2/(x-x0)-(2*x+b)/xx(x,b,c)-4*(2*x0+b)/(pow(2*x+b,2)+q*q)))
    return deps

# The following two functions were the original forms of the Slater
# exchange and the VWN correlation functional. I'm keeping them around
# in case I screw anything up. In contrast to the vector versions, above,
# these take only a single density.

def S1(rho):
    "Slater exchange potential for density=dens"
    fac=-0.75*pow(3./pi,1./3.)
    ex = fac*pow(rho,4./3.)
    vx = (4./3.)*fac*pow(rho,1./3.)
    return ex,vx

def VWN1(rho):
    fthirdpi=4.*pi/3.
    third=1./3.
    fthird=4.*third
    sixthm=-1./6.
    ap=.5*0.0621814
    x0p=-0.10498
    bp=3.72744
    cp=12.9352
    af=.5*0.0310907
    x0f=-0.32500
    bf=7.06042
    cf=18.0578
    aa=-1./(6.*pi*pi)
    x0a=-4.75840e-3
    ba=1.13107
    ca=13.0045
    tol=1e-12

    name='Vosko-Wilk-Nusair correlation energy'
    hconst=4./(9.*(pow(2.,third)-1.))
    ec = 0.
    vc = 0.
    if rho > tol:
        x=pow(fthirdpi*rho,sixthm)
        epsp = vwn_eps(x,ap,x0p,bp,cp)
        epsf = vwn_eps(x,af,x0f,bf,cf)
        epsa = vwn_eps(x,aa,x0a,ba,ca)
        h=hconst*(epsf-epsp)/epsa-1
        eps = epsp
        ec =eps*rho
        depsp = vwn_deps(x,ap,x0p,bp,cp)
        depsf = vwn_deps(x,af,x0f,bf,cf)
        depsa = vwn_deps(x,aa,x0a,ba,ca)
        dh=hconst*(depsf-depsp-depsa*(epsf-epsp)/epsa)/epsa
        depsx = depsp
        vc = eps - (x/6.)*depsx
    return ec,vc
