/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.24
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif


#ifndef SWIG_TEMPLATE_DISAMBIGUATOR
#  if defined(__SUNPRO_CC) 
#    define SWIG_TEMPLATE_DISAMBIGUATOR template
#  else
#    define SWIG_TEMPLATE_DISAMBIGUATOR 
#  endif
#endif


#include <Python.h>

/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "1"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
#define SWIG_QUOTE_STRING(x) #x
#define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
#define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
#define SWIG_TYPE_TABLE_NAME
#endif

#include <string.h>

#ifndef SWIGINLINE
#if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#  define SWIGINLINE inline
#else
#  define SWIGINLINE
#endif
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/
#ifndef SWIGRUNTIME
#define SWIGRUNTIME static
#endif
#ifndef SWIGRUNTIMEINLINE
#define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return *f1 - *f2;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te) == 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Register a type mapping with the type-checking
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeRegisterTL(swig_type_info **tl, swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = *tl;
  while (tc) {
    /* check simple type equivalence */
    int typeequiv = (strcmp(tc->name, ti->name) == 0);   
    /* check full type equivalence, resolving typedefs */
    if (!typeequiv) {
      /* only if tc is not a typedef (no '|' on it) */
      if (tc->str && ti->str && !strstr(tc->str,"|")) {
	typeequiv = SWIG_TypeEquiv(ti->str,tc->str);
      }
    }
    if (typeequiv) {
      /* Already exists in the table.  Just add additional types to the list */
      if (ti->clientdata) tc->clientdata = ti->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = *tl;
  *tl = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;

  return ret;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
  Search for a swig_type_info structure
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryTL(swig_type_info *tl, const char *name) {
  swig_type_info *ty = tl;
  while (ty) {
    if (ty->str && (SWIG_TypeEquiv(ty->str,name))) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientDataTL(swig_type_info *tl, swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata) return;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = tl;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientDataTL(tl,tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static char hex[17] = "0123456789abcdef";
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  register unsigned char uu;
  for (; u != eu; ++u) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register int d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
  This function will propagate the clientdata field of type to any new
  swig_type_info structures that have been added into the list of
  equivalent types.  It is like calling SWIG_TypeClientData(type,
  clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientDataTL(swig_type_info *tl, swig_type_info *type) {
  swig_type_info *equiv = type->next;
  swig_type_info *tc;
  if (!type->clientdata) return;
  while (equiv) {
    if (!equiv->converter) {
      tc = tl;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0) && !tc->clientdata)
          SWIG_TypeClientDataTL(tl,tc, type->clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/


#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if !defined(STATIC_LINKED)
#    define SWIGEXPORT(a) __declspec(dllexport) a
#  else
#    define SWIGEXPORT(a) a
#  endif
#else
#  define SWIGEXPORT(a) a
#endif

#ifdef __cplusplus
extern "C" {
#endif


/*************************************************************************/


/* The static type info list */

static swig_type_info *swig_type_list = 0;
static swig_type_info **swig_type_list_handle = &swig_type_list;
  

/* Register a type mapping with the type-checking */
static swig_type_info *
SWIG_TypeRegister(swig_type_info *ti) {
  return SWIG_TypeRegisterTL(swig_type_list_handle, ti);
}

/* Search for a swig_type_info structure */
static swig_type_info *
SWIG_TypeQuery(const char *name) {
  return SWIG_TypeQueryTL(*swig_type_list_handle, name);
}

/* Set the clientdata field for a type */
static void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientDataTL(*swig_type_list_handle, ti, clientdata);
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
static void
SWIG_PropagateClientData(swig_type_info *type) {
  SWIG_PropagateClientDataTL(*swig_type_list_handle, type);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * for internal method declarations
 * ----------------------------------------------------------------------------- */

#ifndef SWIGINTERN
#define SWIGINTERN static 
#endif

#ifndef SWIGINTERNSHORT
#ifdef __cplusplus
#define SWIGINTERNSHORT static inline 
#else /* C case */
#define SWIGINTERNSHORT static 
#endif /* __cplusplus */
#endif


/*
  Exception handling in wrappers
*/
#define SWIG_fail                goto fail
#define SWIG_arg_fail(arg)       SWIG_Python_ArgFail(arg)
#define SWIG_append_errmsg(msg)   SWIG_Python_AddErrMesg(msg,0)
#define SWIG_preppend_errmsg(msg) SWIG_Python_AddErrMesg(msg,1)
#define SWIG_type_error(type,obj) SWIG_Python_TypeError(type,obj)
#define SWIG_null_ref(type)       SWIG_Python_NullRef(type)

/*
  Contract support
*/
#define SWIG_contract_assert(expr, msg) \
 if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Alloc. memory flags
 * ----------------------------------------------------------------------------- */
#define SWIG_OLDOBJ  1
#define SWIG_NEWOBJ  SWIG_OLDOBJ + 1
#define SWIG_PYSTR   SWIG_NEWOBJ + 1

#ifdef __cplusplus
}
#endif


/***********************************************************************
 * pyrun.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags)    SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags)       SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)
 

/* Python-specific SWIG API */
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags)   SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)              SWIG_Python_NewPackedObj(ptr, sz, type)


/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */
/*
  Use SWIG_NO_COBJECT_TYPES to force the use of strings to represent
  C/C++ pointers in the python side. Very useful for debugging, but
  not always safe.
*/
#if !defined(SWIG_NO_COBJECT_TYPES) && !defined(SWIG_COBJECT_TYPES)
#  define SWIG_COBJECT_TYPES
#endif

/* Flags for pointer conversion */
#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2


#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Create a new pointer string 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_BUFFER_SIZE
#define SWIG_BUFFER_SIZE 1024
#endif

#if defined(SWIG_COBJECT_TYPES)
#if !defined(SWIG_COBJECT_PYTHON)
/* -----------------------------------------------------------------------------
 * Implements a simple Swig Object type, and use it instead of PyCObject
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *ptr;
  const char *desc;
} PySwigObject;

/* Declarations for objects of type PySwigObject */

SWIGRUNTIME int
PySwigObject_print(PySwigObject *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result))) {
    fputs("<Swig Object at ", fp); fputs(result, fp); fputs(">", fp);
    return 0; 
  } else {
    return 1; 
  }
}
  
SWIGRUNTIME PyObject *
PySwigObject_repr(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromFormat("<Swig Object at %s>", result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_str(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromString(result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_long(PySwigObject *v)
{
  return PyLong_FromUnsignedLong((unsigned long) v->ptr);
}

SWIGRUNTIME PyObject *
PySwigObject_oct(PySwigObject *v)
{
  char buf[100];
  unsigned long x = (unsigned long)v->ptr;
  if (x == 0)
    strcpy(buf, "0");
  else
    PyOS_snprintf(buf, sizeof(buf), "0%lo", x);
  return PyString_FromString(buf);
}

SWIGRUNTIME PyObject *
PySwigObject_hex(PySwigObject *v)
{
  char buf[100];
  PyOS_snprintf(buf, sizeof(buf), "0x%lx", (unsigned long)v->ptr);
  return PyString_FromString(buf);
}

SWIGRUNTIME int
PySwigObject_compare(PySwigObject *v, PySwigObject *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return c;
  } else {
    void *i = v->ptr;
    void *j = w->ptr;
    return (i < j) ? -1 : (i > j) ? 1 : 0;
  }
}

SWIGRUNTIME void
PySwigObject_dealloc(PySwigObject *self)
{
  PyObject_DEL(self);
}

SWIGRUNTIME PyTypeObject*
PySwigObject_GetType() {
  static char PySwigObject_Type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods PySwigObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    (binaryfunc)0, /*nb_divide*/
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
    (coercion)0,   /*nb_coerce*/
    (unaryfunc)PySwigObject_long, /*nb_int*/
    (unaryfunc)PySwigObject_long, /*nb_long*/
    (unaryfunc)0,                 /*nb_float*/
    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
#if PY_VERSION_HEX >= 0x02000000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */ 
#endif
  };

  static int type_init = 0;  
  static PyTypeObject PySwigObject_Type;

  if (!type_init) {
    PyTypeObject tmp = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    "PySwigObject",			/*tp_name*/
    sizeof(PySwigObject),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigObject_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigObject_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigObject_compare,	/*tp_compare*/
    (reprfunc)PySwigObject_repr,	/*tp_repr*/
    &PySwigObject_as_number,	        /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigObject_str,		/*tp_str*/
    /* Space for future expansion */
    0L,0L,0L,0L,
    PySwigObject_Type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };

    PySwigObject_Type = tmp;
    type_init = 1;
  }

  return &PySwigObject_Type;
}

SWIGRUNTIME PyObject *
PySwigObject_FromVoidPtrAndDesc(void *ptr, const char *desc)
{
  PySwigObject *self = PyObject_NEW(PySwigObject, PySwigObject_GetType());
  if (self == NULL) return NULL;
  self->ptr = ptr;
  self->desc = desc;
  return (PyObject *)self;
}

SWIGRUNTIMEINLINE void *
PySwigObject_AsVoidPtr(PyObject *self)
{
  return ((PySwigObject *)self)->ptr;
}

SWIGRUNTIMEINLINE const char *
PySwigObject_GetDesc(PyObject *self)
{
  return ((PySwigObject *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigObject_Check(PyObject *op) {
  return ((op)->ob_type == PySwigObject_GetType()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  const char *desc;
  size_t size;
} PySwigPacked;

SWIGRUNTIME int
PySwigPacked_print(PySwigPacked *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->desc,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
PySwigPacked_repr(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->desc);
  } else {
    return PyString_FromFormat("<Swig Packed %s>", v->desc);
  }  
}

SWIGRUNTIME PyObject *
PySwigPacked_str(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return PyString_FromFormat("%s%s", result, v->desc);
  } else {
    return PyString_FromFormat("%s", v->desc);
  }  
}

SWIGRUNTIME int
PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return c;
  } else {
    size_t i = v->size;
    size_t j = w->size;
    int s = (i < j) ? -1 : (i > j) ? 1 : 0;
    return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
  }
}

SWIGRUNTIME void
PySwigPacked_dealloc(PySwigPacked *self)
{
  free(self->pack);
  PyObject_DEL(self);
}

SWIGRUNTIME PyTypeObject*
PySwigPacked_GetType() {
  static char PySwigPacked_Type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  static int type_init = 0;
  
  static PyTypeObject PySwigPacked_Type;
  if (!type_init) {
    PyTypeObject tmp = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    "PySwigPacked",			/*tp_name*/
    sizeof(PySwigPacked),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigPacked_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigPacked_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigPacked_compare,	/*tp_compare*/
    (reprfunc)PySwigPacked_repr,	/*tp_repr*/
    0,	                                /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigPacked_str,		/*tp_str*/
    /* Space for future expansion */
    0L,0L,0L,0L,
    PySwigPacked_Type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000         
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };

    PySwigPacked_Type = tmp;
    type_init = 1;
  }
  
      

  return &PySwigPacked_Type;
}

SWIGRUNTIME PyObject *
PySwigPacked_FromDataAndDesc(void *ptr, size_t size, const char *desc)
{
  PySwigPacked *self = PyObject_NEW(PySwigPacked, PySwigPacked_GetType());
  if (self == NULL) {
    return NULL;
  } else {
    void *pack = malloc(size);
    memcpy(pack, ptr, size);
    self->pack = pack;
    self->desc = desc;
    self->size = size;
    return (PyObject *) self;
  }
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  PySwigPacked *self = (PySwigPacked *)obj;
  if (self->size != size) return 0;
  memcpy(ptr, self->pack, size);
  return self->desc;
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_GetDesc(PyObject *self)
{
  return ((PySwigPacked *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigPacked_Check(PyObject *op) {
  return ((op)->ob_type == PySwigPacked_GetType()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
}

#else
/* -----------------------------------------------------------------------------
 * Use the old Python PyCObject instead of PySwigObject
 * ----------------------------------------------------------------------------- */

#define PySwigObject_GetDesc(obj)	           PyCObject_GetDesc(obj)
#define PySwigObject_Check(obj)	           PyCObject_Check(obj)
#define PySwigObject_AsVoidPtr(obj)	   PyCObject_AsVoidPtr(obj)
#define PySwigObject_FromVoidPtrAndDesc(p, d)  PyCObject_FromVoidPtrAndDesc(p, d, NULL)

#endif

#endif

/* -----------------------------------------------------------------------------
 * errors manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (PySwigObject_Check(obj)) {
      const char *otype = (const char *) PySwigObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? PyString_AsString(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_DECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}

SWIGRUNTIMEINLINE void
SWIG_Python_NullRef(const char *type)
{
  if (type) {
    PyErr_Format(PyExc_TypeError, "null reference of type '%s' was received",type);
  } else {
    PyErr_Format(PyExc_TypeError, "null reference was received");
  }
}

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
      } else {
	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}

SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    sprintf(mesg, "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}


/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  const char *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;
  void *vptr;
  
  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }

#ifdef SWIG_COBJECT_TYPES
  if (!(PySwigObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PySwigObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  vptr = PySwigObject_AsVoidPtr(obj);
  c = (const char *) PySwigObject_GetDesc(obj);
  if (newref) { Py_DECREF(obj); }
  goto type_check;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackVoidPtr(c, &vptr, ty->name);
  if (newref) { Py_DECREF(obj); }
  if (!c) goto type_error;
#endif

type_check:

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,vptr);
  } else {
    *ptr = vptr;
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject_SetAttrString(pyobj,(char*)"thisown",Py_False);
  }
  return 0;

type_error:
  PyErr_Clear();
  if (pyobj && !obj) {    
    obj = pyobj;
    if (PyCFunction_Check(obj)) {
      /* here we get the method pointer for callbacks */
      char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
      c = doc ? strstr(doc, "swig_ptr: ") : 0;
      if (c) {
	c = SWIG_UnpackVoidPtr(c + 10, &vptr, ty->name);
	if (!c) goto type_error;
	goto type_check;
      }
    }
  }
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ pointer", obj);
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
    if (flags & SWIG_POINTER_EXCEPTION) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
  }
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  const char *c = 0;

#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  c = PySwigPacked_UnpackData(obj, ptr, sz);
#else
  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackDataName(c, ptr, sz, ty->name);
#endif
  if (!c) goto type_error;
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:
  PyErr_Clear();
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ packed data", obj);
    }
  }
  return -1;
}  

/* Create a new array object */
SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj = 0;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PySwigObject_FromVoidPtrAndDesc((void *) ptr, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackVoidPtr(result, ptr, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject_SetAttrString(inst,(char*)"thisown",Py_True);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  PyObject *robj = 0;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  robj = PySwigPacked_FromDataAndDesc((void *) ptr, sz, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackDataName(result, ptr, sz, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  return robj;
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_type_info **
SWIG_Python_GetTypeListHandle() {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
  }
#endif
  return (swig_type_info **) type_pointer;
}

/*
  Search for a swig_type_info structure
 */
SWIGRUNTIMEINLINE swig_type_info *
SWIG_Python_GetTypeList() {
  swig_type_info **tlh = SWIG_Python_GetTypeListHandle();
  return tlh ? *tlh : (swig_type_info*)0;
}

#define SWIG_Runtime_GetTypeList SWIG_Python_GetTypeList 

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_VDW_HB_Exclusion_EE swig_types[0] 
#define  SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t swig_types[1] 
#define  SWIGTYPE_p_RotamerNeighborList swig_types[2] 
#define  SWIGTYPE_p_Protein swig_types[3] 
#define  SWIGTYPE_p_key_type swig_types[4] 
#define  SWIGTYPE_p_std__mapTint_std__string_std__lessTint_t_std__allocatorTstd__pairTint_const_std__string_t_t_t swig_types[5] 
#define  SWIGTYPE_p_ScreamVector swig_types[6] 
#define  SWIGTYPE_p_std__allocatorTMutInfoPair_t swig_types[7] 
#define  SWIGTYPE_std__size_t swig_types[8] 
#define  SWIGTYPE_size_t swig_types[9] 
#define  SWIGTYPE_p_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t swig_types[10] 
#define  SWIGTYPE_p_VDW_EE swig_types[11] 
#define  SWIGTYPE_p_std__mapTstd__string_RotConnInfo_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_RotConnInfo_p_t_t_t swig_types[12] 
#define  SWIGTYPE_p_std__allocatorTMutInfo_t swig_types[13] 
#define  SWIGTYPE_p_difference_type swig_types[14] 
#define  SWIGTYPE_p_value_type swig_types[15] 
#define  SWIGTYPE_p_second_type swig_types[16] 
#define  SWIGTYPE_p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t swig_types[17] 
#define  SWIGTYPE_p_HB_EE swig_types[18] 
#define  SWIGTYPE_p_MutInfoPair swig_types[19] 
#define  SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t swig_types[20] 
#define  SWIGTYPE_p_RotamerCluster swig_types[21] 
#define  SWIGTYPE_p_std__mapTint_std__vectorTint_std__allocatorTint_t_t_std__lessTint_t_std__allocatorTstd__pairTint_const_std__vectorTint_std__allocatorTint_t_t_t_t_t swig_types[22] 
#define  SWIGTYPE_p_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t swig_types[23] 
#define  SWIGTYPE_std__ptrdiff_t swig_types[24] 
#define  SWIGTYPE_ptrdiff_t swig_types[25] 
#define  SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t swig_types[26] 
#define  SWIGTYPE_p_Ligand swig_types[27] 
#define  SWIGTYPE_p_const_reference swig_types[28] 
#define  SWIGTYPE_p_reference swig_types[29] 
#define  SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t swig_types[30] 
#define  SWIGTYPE_p_long_double swig_types[31] 
#define  SWIGTYPE_p_double swig_types[32] 
#define  SWIGTYPE_p_AASideChain swig_types[33] 
#define  SWIGTYPE_p_SideChain swig_types[34] 
#define  SWIGTYPE_p_RotConnInfo swig_types[35] 
#define  SWIGTYPE_p_SCREAM_RTF swig_types[36] 
#define  SWIGTYPE_p_ofstream swig_types[37] 
#define  SWIGTYPE_p_std__vectorTScream_EE_p_std__allocatorTScream_EE_p_t_t swig_types[38] 
#define  SWIGTYPE_p_std__allocatorTRotamer_p_t swig_types[39] 
#define  SWIGTYPE_p_fisrt_type swig_types[40] 
#define  SWIGTYPE_p_ProteinComponent swig_types[41] 
#define  SWIGTYPE_p_mapped_type swig_types[42] 
#define  SWIGTYPE_p_allocator_type swig_types[43] 
#define  SWIGTYPE_p_AABackBone swig_types[44] 
#define  SWIGTYPE_p_BackBone swig_types[45] 
#define  SWIGTYPE_p_AminoAcid_RTF swig_types[46] 
#define  SWIGTYPE_p_bgf_handler swig_types[47] 
#define  SWIGTYPE_p_ClashCollection swig_types[48] 
#define  SWIGTYPE_p_RotlibCollection swig_types[49] 
#define  SWIGTYPE_p_SCREAM_HB_OBJ swig_types[50] 
#define  SWIGTYPE_p_std__vectorTRotlib_p_std__allocatorTRotlib_p_t_t swig_types[51] 
#define  SWIGTYPE_p_multimapTstd__string_std__string_t swig_types[52] 
#define  SWIGTYPE_p_std__pairTdouble_std__string_t swig_types[53] 
#define  SWIGTYPE_p_MutInfo swig_types[54] 
#define  SWIGTYPE_p_std__allocatorTstd__string_t swig_types[55] 
#define  SWIGTYPE_p_std__mapTstd__string_NtrlAARotlib_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_NtrlAARotlib_p_t_t_t swig_types[56] 
#define  SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t swig_types[57] 
#define  SWIGTYPE_p_HIS_NtrlAARotlib swig_types[58] 
#define  SWIGTYPE_p_Multiple_NtrlAARotlib swig_types[59] 
#define  SWIGTYPE_p_NtrlAARotlib swig_types[60] 
#define  SWIGTYPE_p_AARotlib swig_types[61] 
#define  SWIGTYPE_p_Rotlib swig_types[62] 
#define  SWIGTYPE_p_char swig_types[63] 
#define  SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t swig_types[64] 
#define  SWIGTYPE_p_SCREAM_ATOM swig_types[65] 
#define  SWIGTYPE_p_p_SCREAM_ATOM swig_types[66] 
#define  SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t swig_types[67] 
#define  SWIGTYPE_p_Scream_EE swig_types[68] 
#define  SWIGTYPE_p_SCREAM_VDW_OBJ swig_types[69] 
#define  SWIGTYPE_p_ScreamParameters swig_types[70] 
#define  SWIGTYPE_p_std__vectorTMutInfo_p_std__allocatorTMutInfo_p_t_t swig_types[71] 
#define  SWIGTYPE_p_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t swig_types[72] 
#define  SWIGTYPE_p_std__mapTint_int_std__lessTint_t_std__allocatorTstd__pairTint_const_int_t_t_t swig_types[73] 
#define  SWIGTYPE_p_ScreamModel swig_types[74] 
#define  SWIGTYPE_p_SCREAM_Coulomb_OBJ swig_types[75] 
#define  SWIGTYPE_p_ostream swig_types[76] 
#define  SWIGTYPE_p_AAChain swig_types[77] 
#define  SWIGTYPE_p_size_type swig_types[78] 
#define  SWIGTYPE_p_std__string swig_types[79] 
#define  SWIGTYPE_p_std__mapTMutInfo_RotConnInfo_p_std__lessTMutInfo_t_std__allocatorTstd__pairTMutInfo_const_RotConnInfo_p_t_t_t swig_types[80] 
#define  SWIGTYPE_p_std__mapTunsigned_short_Rotamer_p_std__lessTunsigned_short_t_std__allocatorTstd__pairTunsigned_short_const_Rotamer_p_t_t_t swig_types[81] 
#define  SWIGTYPE_p_std__mapTunsigned_short_unsigned_short_std__lessTunsigned_short_t_std__allocatorTstd__pairTunsigned_short_const_unsigned_short_t_t_t swig_types[82] 
#define  SWIGTYPE_p_Coulomb_EE swig_types[83] 
#define  SWIGTYPE_p_AARotamer swig_types[84] 
#define  SWIGTYPE_p_Rotamer swig_types[85] 
#define  SWIGTYPE_p_p_Rotamer swig_types[86] 
#define  SWIGTYPE_p_p_AARotamer swig_types[87] 
#define  SWIGTYPE_p_std__vectorTSCREAM_ATOM_p_std__allocatorTSCREAM_ATOM_p_t_t swig_types[88] 
#define  SWIGTYPE_p_stringV swig_types[89] 
#define  SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t swig_types[90] 
static swig_type_info *swig_types[92];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _Py_Scream_EE.so
  ------------------------------------------------*/
#define SWIG_init    init_Py_Scream_EE

#define SWIG_name    "_Py_Scream_EE"


#include "scream_atom.hpp"

#include "scream_model.hpp"

#include "scream_ctl_reader.hpp"
#include "Rotamer.hpp"
#include "AARotamer.hpp"
#include "sc_Protein.hpp"
#include "Rotlib.hpp"
#include "RotlibCollection.hpp"
#include "ClashCollection.hpp"
#include "RotamerNeighborList.hpp"
#include "RotamerCluster.hpp"
#include "RotConnInfo.hpp"

#include "sc_bgf_handler.hpp"
#include "scream_rtf.hpp"
#include "scream_EE.hpp"
#include "MutInfo.hpp"


  
#if defined(__SUNPRO_CC) 
#define SWIG_STD_NOASSIGN_STL
#define SWIG_STD_NOINSERT_TEMPLATE_STL
#endif



#include <string>
#include <stdexcept>


#include <string>


#include <iostream>  


#if PY_VERSION_HEX < 0x02000000
#define PySequence_Size PySequence_Length
#endif
#include <stdexcept>


#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


static void SWIG_exception_(int code, const char *msg) {
  switch(code) {
  case SWIG_MemoryError:
    PyErr_SetString(PyExc_MemoryError,msg);
    break;
  case SWIG_IOError:
    PyErr_SetString(PyExc_IOError,msg);
    break;
  case SWIG_RuntimeError:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  case SWIG_IndexError:
    PyErr_SetString(PyExc_IndexError,msg);
    break;
  case SWIG_TypeError:
    PyErr_SetString(PyExc_TypeError,msg);
    break;
  case SWIG_DivisionByZero:
    PyErr_SetString(PyExc_ZeroDivisionError,msg);
    break;
  case SWIG_OverflowError:
    PyErr_SetString(PyExc_OverflowError,msg);
    break;
  case SWIG_SyntaxError:
    PyErr_SetString(PyExc_SyntaxError,msg);
    break;
  case SWIG_ValueError:
    PyErr_SetString(PyExc_ValueError,msg);
    break;
  case SWIG_SystemError:
    PyErr_SetString(PyExc_SystemError,msg);
    break;
  default:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  }
}

#define SWIG_exception(a,b) { SWIG_exception_(a,b); SWIG_fail; }


#include <stdexcept>


#include <algorithm>


#include <vector>


#include <utility>


#include <map>
#include <algorithm>
#include <stdexcept>


namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) 
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator 
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin(); 
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator 
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin(); 
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) { 
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    
    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    typename Sequence::iterator sb = self->begin();
    typename InputSeq::const_iterator vmid = v.begin();
    std::advance(sb,ii);
    std::advance(vmid, jj - ii);
    self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
  }
 
  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


/* returns SWIG_OLDOBJ if the input is a raw char*, SWIG_PYSTR if is a PyString */
SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize)
{
  static swig_type_info* pchar_info = 0;
  char* vptr = 0;
  if (!pchar_info) pchar_info = SWIG_TypeQuery("char *");
  if (SWIG_ConvertPtr(obj, (void**)&vptr, pchar_info, 0) != -1) {
    if (cptr) *cptr = vptr;
    if (psize) *psize = vptr ? (strlen(vptr) + 1) : 0;
    return SWIG_OLDOBJ;
  } else {
    PyErr_Clear();
    if (PyString_Check(obj)) {
      if (cptr) {
	*cptr = PyString_AS_STRING(obj);
	if (psize) {
	  *psize = PyString_GET_SIZE(obj) + 1;
	}
      }
      return SWIG_PYSTR;
    }
  }
  if (cptr) {
    SWIG_type_error("char *", obj);
  }
  return 0;
}


  SWIGINTERN int
    SWIG_AsPtr_std_string(PyObject* obj, std::string **val)
    {
      static swig_type_info* string_info = SWIG_TypeQuery("std::string *");
      std::string *vptr;    
      if (SWIG_ConvertPtr(obj, (void**)&vptr, string_info, 0) != -1) {
	if (val) *val = vptr;
	return SWIG_OLDOBJ;
      } else {
	PyErr_Clear();
	char* buf = 0 ; size_t size = 0;
	if (SWIG_AsCharPtrAndSize(obj, &buf, &size)) {
	  if (buf) {
	    if (val) *val = new std::string(buf, size - 1);
	    return SWIG_NEWOBJ;
	  }
	} else {
	  PyErr_Clear();
	}  
	if (val) {
	  PyErr_SetString(PyExc_TypeError,"a string is expected");
	}
	return 0;
      }
    }


SWIGINTERN int
  SWIG_AsVal_double(PyObject *obj, double *val)
{
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AS_DOUBLE(obj);
    return 1;
  }  
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    SWIG_type_error("double", obj);
  }
  return 0;
}


SWIGINTERNSHORT double
SWIG_As_double(PyObject* obj)
{
  double v;
  if (!SWIG_AsVal_double(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(double));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_double(PyObject* obj)
{
  return SWIG_AsVal_double(obj, (double*)0);
}


  /*@/exec/swig/share/swig/1.3.24/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_double PyFloat_FromDouble
/*@@*/


#include <limits.h>


SWIGINTERN int
  SWIG_CheckLongInRange(long value, long min_value, long max_value,
			const char *errmsg)
{
  if (value < min_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %ld is less than '%s' minimum %ld", 
		   value, errmsg, min_value);
    }
    return 0;    
  } else if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %ld is greater than '%s' maximum %ld", 
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
}


SWIGINTERN int
  SWIG_AsVal_long(PyObject * obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    SWIG_type_error("long", obj);
  }
  return 0;
 }


#if INT_MAX != LONG_MAX
SWIGINTERN int
  SWIG_AsVal_int(PyObject *obj, int *val)
{ 
  const char* errmsg = val ? "int" : (char*)0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, INT_MIN,INT_MAX, errmsg)) {
      if (val) *val = (int)(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNSHORT int
  SWIG_AsVal_int(PyObject *obj, int *val)
{
  return SWIG_AsVal_long(obj,(long*)val);
}
#endif


SWIGINTERNSHORT int
SWIG_As_int(PyObject* obj)
{
  int v;
  if (!SWIG_AsVal_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(int));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_int(PyObject* obj)
{
  return SWIG_AsVal_int(obj, (int*)0);
}


  /*@/exec/swig/share/swig/1.3.24/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_int PyInt_FromLong
/*@@*/


SWIGINTERNSHORT PyObject *
SWIG_FromCharArray(const char* carray, size_t size)
{
  if (size > INT_MAX) {
    return Py_None;    
  } else {
    return PyString_FromStringAndSize(carray, (int)(size));
  }
}


SWIGINTERNSHORT PyObject*
  SWIG_From_std_string(const std::string& s)
  {
    return SWIG_FromCharArray(s.data(), s.size());
  }


SWIGINTERNSHORT PyObject*
  SWIG_From_bool(bool value)
{
  PyObject *obj = value ? Py_True : Py_False;
  Py_INCREF(obj);
  return obj;
}


SWIGINTERN int
  SWIG_AsVal_bool(PyObject *obj, bool *val)
{
  if (obj == Py_True) {
    if (val) *val = true;
    return 1;
  }
  if (obj == Py_False) {
    if (val) *val = false;
    return 1;
  }
  int res = 0;
  if (SWIG_AsVal_int(obj, &res)) {    
    if (val) *val = res ? true : false;
    return 1;
  } else {
    PyErr_Clear();
  }  
  if (val) {
    SWIG_type_error("bool", obj);
  }
  return 0;
}


SWIGINTERNSHORT bool
SWIG_As_bool(PyObject* obj)
{
  bool v;
  if (!SWIG_AsVal_bool(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(bool));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_bool(PyObject* obj)
{
  return SWIG_AsVal_bool(obj, (bool*)0);
}


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = (SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0) != -1) 
	? SWIG_OLDOBJ : 0;
      if (res) {
	if (val) {
	  *val = p;
	}
      } else {
	SWIG_type_error(type_name<Type>(), obj);
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static bool asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (res && p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (res == SWIG_NEWOBJ) delete p;
	  return true;
	} else {
	  return false;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static bool asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj, &p);
        if (res) {
          *(const_cast<noconst_type**>(val)) = p;
     	  return true;
	} else {
	  return false;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline bool asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      if (!obj || !asval(obj, &v)) {
	if (!PyErr_Occurred()) {
	  SWIG_type_error(swig::type_name<Type>(), obj);
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : 0) && v;
      if (res) {
	if (res == SWIG_NEWOBJ) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_type_error(swig::type_name<Type>(), obj);
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : 0);
      if (res) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_type_error(swig::type_name<Type>(), obj);
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      return obj && asval(obj, (Type *)(0));
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      return obj && asptr(obj, (Type **)(0));
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


  namespace swig {
    template <>  struct traits<SCREAM_ATOM > {
      typedef pointer_category category;
      static const char* type_name() { return"SCREAM_ATOM"; }
    };
  }


  namespace swig {
    struct PyObject_var {
      PyObject* ptr;
      PyObject_var(PyObject* obj = 0) : ptr(obj) { }      
      ~PyObject_var() { if (ptr) Py_DECREF(ptr); }      
      operator PyObject*() { return ptr; }
      PyObject* operator->() const { return ptr; }
    };
  }


#include <iterator>
namespace swig
{
  template <class T> 
  struct PySequence_Ref
  {
    PySequence_Ref(PyObject* seq, int index) 
      : _seq(seq), _index(index)
    {
    }

    operator T () const 
    {
      swig::PyObject_var item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg,"in sequence element %d", _index);
	if (!PyErr_Occurred()) {
	  SWIG_type_error(swig::type_name<T>(), item);
	}
	SWIG_append_errmsg(msg);
	throw;
      }
    }
    
    PySequence_Ref& operator=(const T& v) 
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }
    
  private:
    PyObject* _seq;
    int _index;
  };

  template <class T> 
  struct PySequence_ArrowProxy 
  {
    PySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };    

  template <class T, class Reference > 
  struct PySequence_Iter
  {
    typedef PySequence_Iter<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    PySequence_Iter()
    {
    }

    PySequence_Iter(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    { 
      return reference(_seq, _index);
    }

    PySequence_ArrowProxy<T>
    operator->() const {
      return PySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const 
    { 
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const 
    {
      return !(operator==(ri));
    }    

    self& operator ++ ()
    {
      ++_index;      
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n) 
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n) 
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }    

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    reference 
    operator[](difference_type n) const 
    { 
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    int _index;
  }; 

  template <class T> 
  struct PySequence_Cont
  {
    typedef PySequence_Ref<T> reference;
    typedef const PySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef PySequence_Iter<T, reference> iterator;
    typedef PySequence_Iter<T, const_reference> const_iterator;

    PySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~PySequence_Cont() 
    {
      if (_seq) Py_DECREF(_seq);
    }

    size_type size() const
    {
      return PySequence_Size(_seq);
    }

    bool empty() const
    {
      return size() == 0;
    }    

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }
    
    iterator end()
    {
      return iterator(_seq, size());
    }
    
    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }    

    reference operator[](difference_type n) 
    { 
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    { 
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::PyObject_var item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg,"in sequence element %d", i);
	    SWIG_type_error(swig::type_name<value_type>(), item);
	    SWIG_append_errmsg(msg);
	  }
	  return 0;
	}
      }
      return 1;  
    }

  private:
    PyObject* _seq;
  };

}


  namespace swig {
    template <class PySeq, class Seq> 
    inline void
    assign(const PySeq& pyseq, Seq* seq) {
#ifdef SWIG_STD_NOASSIGN_STL
      typedef typename PySeq::value_type value_type;
      typename PySeq::const_iterator it = pyseq.begin();
      for (;it != pyseq.end(); ++it) {
	seq->insert(seq->end(),(value_type)(*it));
      }
#else
      seq->assign(pyseq.begin(), pyseq.end());
#endif
    }

    template <class Seq, class T = typename Seq::value_type >
    struct traits_asptr_stdseq {
      typedef Seq sequence;
      typedef T value_type;
		    
      static int asptr(PyObject *obj, sequence **seq) {
	if (PySequence_Check(obj)) {
	  try {
	    PySequence_Cont<value_type> pyseq(obj);
	    if (seq) {
	      sequence *pseq = new sequence();
	      assign(pyseq, pseq);
	      *seq = pseq;
	      return SWIG_NEWOBJ;
	    } else {
	      return pyseq.check();
	    }
	  } catch (std::exception& e) {
	    if (seq) {
	      if (!PyErr_Occurred())
		PyErr_SetString(PyExc_TypeError, e.what());
	    }
	    return 0;
	  }
	} else {
	  sequence *p;
	  if (SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) != -1) {
	    if (seq) *seq = p;
	    return 1;
	  }
	}
	if (seq) {
	  PyErr_Format(PyExc_TypeError, "a %s is expected", 
		       swig::type_name<sequence>());
	}
	return 0;	  
      }
    };

    template <class Seq, class T = typename Seq::value_type >
    struct traits_from_stdseq {
      typedef Seq sequence;
      typedef T value_type;
      typedef typename Seq::size_type size_type;
      typedef typename sequence::const_iterator const_iterator;

      static PyObject *from(const sequence& seq) {
	size_type size = seq.size();
	if (size <= (size_type)INT_MAX) {
	  PyObject *obj = PyTuple_New((int)size);
	  int i = 0;
	  for (const_iterator it = seq.begin();
	       it != seq.end(); ++it, ++i) {
	    PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	  }
	  return obj;
	} else {
	  PyErr_SetString(PyExc_OverflowError,
			  "sequence size not valid in python");
	  Py_INCREF(Py_None);
	  return Py_None;
	}
      }
    };
  }


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<SCREAM_ATOM*, std::allocator<SCREAM_ATOM * > > > {
	  typedef value_category category;
	  static const char* type_name() {
	    return "std::vector<" "SCREAM_ATOM" " *," "std::allocator<SCREAM_ATOM * >" " >";
	  }
	};
      }
    

namespace swig {
  template <> struct traits<int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };  
  template <>  struct traits_asval<int > {   
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_int(obj, val);
    }
  };
  template <>  struct traits_from<int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int(val);
    }
  };
}


  namespace swig {
    template <class T, class U >
    struct traits_asptr<std::pair<T,U> >  {
      static int asptr(PyObject *obj, std::pair<T,U> **val) {
	typedef std::pair<T,U> value_type;
	if (PySequence_Check(obj) && (PySequence_Size(obj) == 2)) {
	  swig::PyObject_var first = PySequence_GetItem(obj,0);
	  swig::PyObject_var second = PySequence_GetItem(obj,1);
	  T *pfirst = 0;
	  U *psecond = 0;
	  if (val) {
	    *val = new std::pair<T,U>;
	    pfirst = &((*val)->first);
	    psecond = &((*val)->second);
	  }	  
	  if (swig::asval(first,pfirst) && swig::asval(second,psecond)) {
	    return SWIG_NEWOBJ;
	  } else {
	    delete *val;
	  }
	} else {
	  value_type *p;
	  if (SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<value_type>(),0) != -1) {
	    if (val) *val = p;
	    return SWIG_OLDOBJ;
	  }
	}
	if (val) {
	  PyErr_Format(PyExc_TypeError, "a %s is expected", 
		       swig::type_name<value_type>());
	}
	return 0;
      }
    };

    template <class T, class U >
    struct traits_from<std::pair<T,U> >   {
      static PyObject *from(const std::pair<T,U>& val) {
	PyObject* obj = PyTuple_New(2);
	PyTuple_SetItem(obj,0,swig::from(val.first));
	PyTuple_SetItem(obj,1,swig::from(val.second));
	return obj;
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::pair<SCREAM_ATOM*,int > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "SCREAM_ATOM" " *," "int" " >";
	  }
	};
      }
    

  namespace swig {
    template <class PySeq, class K, class T >
    inline void
    assign(const PySeq& pyseq, std::map<K,T > *map) {
      typedef typename std::map<K,T>::value_type value_type;
      typename PySeq::const_iterator it = pyseq.begin();
      for (;it != pyseq.end(); ++it) {
	map->insert(value_type(it->first, it->second));
      }
    }

    template <class K, class T>
    struct traits_asptr<std::map<K,T> >  {
      typedef std::map<K,T> map_type;
      static int asptr(PyObject *obj, map_type **val) {
	if (PyDict_Check(obj)) {
	  PyObject_var items = PyMapping_Items(obj);
	  return traits_asptr_stdseq<std::map<K,T>, std::pair<K, T> >
	    ::asptr(items, val);
	}
	if (val) {
	  PyErr_SetString(PyExc_TypeError, "a dictionary is expected");
	}
	return 0;
      }      
    };
      
    template <class K, class T >
    struct traits_from<std::map<K,T> >  {
      typedef std::map<K,T> map_type;
      typedef typename map_type::const_iterator const_iterator;
      typedef typename map_type::size_type size_type;
            
      static PyObject *from(const map_type& map) {
	size_type size = map.size();
	int pysize = size <= INT_MAX ? (int) size : 0;
	if (!pysize) {
	  PyErr_SetString(PyExc_OverflowError,
			  "map size not valid in python");
	  Py_INCREF(Py_None);
	  return Py_None;
	}
	PyObject *obj = PyDict_New();
	for (const_iterator i= map.begin(); i!= map.end(); ++i) {
	  PyDict_SetItem(obj,
			 swig::from(i->first),
			 swig::from(i->second));
	}
	return obj;
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::map<SCREAM_ATOM *, int, std::less<SCREAM_ATOM * >, std::allocator<std::pair<SCREAM_ATOM *const,int > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::map<" "SCREAM_ATOM *" "," "int" "," "std::less<SCREAM_ATOM * >" "," "std::allocator<std::pair<SCREAM_ATOM *const,int > >" " >";
	  }
	};
      }
    

SWIGINTERNSHORT PyObject* 
  SWIG_From_unsigned_SS_long(unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) 
    : PyInt_FromLong((long)(value)); 
}

static bool std_map_Sl_SCREAM_ATOM_Sm__Sc_int_Sg____nonzero__(std::map<SCREAM_ATOM *,int > const *self){
      return !(self->empty());
    }
static std::map<SCREAM_ATOM *,int >::size_type std_map_Sl_SCREAM_ATOM_Sm__Sc_int_Sg____len__(std::map<SCREAM_ATOM *,int > const *self){
      return self->size();
    }
static std::map<SCREAM_ATOM *,int >::mapped_type std_map_Sl_SCREAM_ATOM_Sm__Sc_int_Sg____getitem__(std::map<SCREAM_ATOM *,int > const *self,std::map<SCREAM_ATOM *,int >::key_type const &key){
      std::map<SCREAM_ATOM *,int,std::less<SCREAM_ATOM * >,std::allocator<std::pair<SCREAM_ATOM *const,int > > >::const_iterator i = self->find(key);
      if (i != self->end())
	return i->second;
      else
	throw std::out_of_range("key not found");
    }
static void std_map_Sl_SCREAM_ATOM_Sm__Sc_int_Sg____setitem__(std::map<SCREAM_ATOM *,int > *self,std::map<SCREAM_ATOM *,int >::key_type const &key,std::map<SCREAM_ATOM *,int >::mapped_type const &x){
      self->insert(std::map<SCREAM_ATOM *,int,std::less<SCREAM_ATOM * >,std::allocator<std::pair<SCREAM_ATOM *const,int > > >::value_type(key,x));
    }
static void std_map_Sl_SCREAM_ATOM_Sm__Sc_int_Sg____delitem__(std::map<SCREAM_ATOM *,int > *self,std::map<SCREAM_ATOM *,int >::key_type const &key){
      std::map<SCREAM_ATOM *,int,std::less<SCREAM_ATOM * >,std::allocator<std::pair<SCREAM_ATOM *const,int > > >::iterator i = self->find(key);
      if (i != self->end())
	self->erase(i);
      else
	throw std::out_of_range("key not found");
    }
static bool std_map_Sl_SCREAM_ATOM_Sm__Sc_int_Sg__has_key(std::map<SCREAM_ATOM *,int > const *self,std::map<SCREAM_ATOM *,int >::key_type const &key){
      std::map<SCREAM_ATOM *,int,std::less<SCREAM_ATOM * >,std::allocator<std::pair<SCREAM_ATOM *const,int > > >::const_iterator i = self->find(key);
      return i != self->end();
    }
static PyObject *std_map_Sl_SCREAM_ATOM_Sm__Sc_int_Sg__keys(std::map<SCREAM_ATOM *,int > *self){
      std::map<SCREAM_ATOM *,int,std::less<SCREAM_ATOM * >,std::allocator<std::pair<SCREAM_ATOM *const,int > > >::size_type size = self->size();
      int pysize = size <= INT_MAX ? (int) size : 0;
      if (!pysize) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	Py_INCREF(Py_None);
	return Py_None;
      }
      PyObject* keyList = PyList_New(pysize);
      std::map<SCREAM_ATOM *,int,std::less<SCREAM_ATOM * >,std::allocator<std::pair<SCREAM_ATOM *const,int > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SetItem(keyList, j, swig::from(i->first));
      }
      return keyList;
    }
static PyObject *std_map_Sl_SCREAM_ATOM_Sm__Sc_int_Sg__values(std::map<SCREAM_ATOM *,int > *self){
      std::map<SCREAM_ATOM *,int,std::less<SCREAM_ATOM * >,std::allocator<std::pair<SCREAM_ATOM *const,int > > >::size_type size = self->size();
      int pysize = size <= INT_MAX ? (int) size : 0;
      if (!pysize) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	Py_INCREF(Py_None);
	return Py_None;
      }
      PyObject* valList = PyTuple_New(pysize);
      std::map<SCREAM_ATOM *,int,std::less<SCREAM_ATOM * >,std::allocator<std::pair<SCREAM_ATOM *const,int > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyTuple_SetItem(valList, j, swig::from(i->second));
      }
      return valList;
    }
static PyObject *std_map_Sl_SCREAM_ATOM_Sm__Sc_int_Sg__items(std::map<SCREAM_ATOM *,int > *self){
      std::map<SCREAM_ATOM *,int,std::less<SCREAM_ATOM * >,std::allocator<std::pair<SCREAM_ATOM *const,int > > >::size_type size = self->size();
      int pysize = size <= INT_MAX ? (int) size : 0;
      if (!pysize) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	Py_INCREF(Py_None);
	return Py_None;
      }    
      PyObject* itemList = PyTuple_New(pysize);
      std::map<SCREAM_ATOM *,int,std::less<SCREAM_ATOM * >,std::allocator<std::pair<SCREAM_ATOM *const,int > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyTuple_SetItem(itemList, j, swig::from(*i));
      }
      return itemList;
    }
static bool std_map_Sl_SCREAM_ATOM_Sm__Sc_int_Sg____contains__(std::map<SCREAM_ATOM *,int > *self,std::map<SCREAM_ATOM *,int >::key_type const &key){
      return self->find(key) != self->end();
    }
static PyObject *std_map_Sl_SCREAM_ATOM_Sm__Sc_int_Sg____iter__(std::map<SCREAM_ATOM *,int > *self){
      std::map<SCREAM_ATOM *,int,std::less<SCREAM_ATOM * >,std::allocator<std::pair<SCREAM_ATOM *const,int > > >::size_type size = self->size();
      int pysize = size <= INT_MAX ? (int) size : 0;
      if (!pysize) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	Py_INCREF(Py_None);
	return Py_None;
      }
      PyObject* keyTuple = PyTuple_New(pysize);
      std::map<SCREAM_ATOM *,int,std::less<SCREAM_ATOM * >,std::allocator<std::pair<SCREAM_ATOM *const,int > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyTuple_SetItem(keyTuple, j, swig::from(i->first));
      }
#if PY_VERSION_HEX >= 0x02020000
      PyObject* iter = PyObject_GetIter(keyTuple);
      Py_DECREF(keyTuple);
      return iter;
#else
      return keyTuple;
#endif
    }

SWIGINTERN int
  SWIG_AsVal_std_string(PyObject* obj, std::string *val)
  {
    std::string* s;
    int res = SWIG_AsPtr_std_string(obj, &s);
    if (res && s) {
      if (val) *val = *s;
      if (res == SWIG_NEWOBJ) delete s;
      return res;
    }
    if (val) {
      PyErr_SetString(PyExc_TypeError,"a string is expected");
    }
    return 0;
  }


namespace swig {
  template <> struct traits<std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };  
  template <>  struct traits_asval<std::string > {   
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_std_string(obj, val);
    }
  };
  template <>  struct traits_from<std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string(val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<std::string, std::allocator<std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator<std::string >" " >";
	  }
	};
      }
    

SWIGINTERN int
  SWIG_AsVal_unsigned_SS_long(PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AS_LONG(obj);
    if (v >= 0) {
      if (val) *val = v;
      return 1;
    }   
  }
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  } 
  if (val) {
    SWIG_type_error("unsigned long", obj);
  }
  return 0;
}


SWIGINTERNSHORT unsigned long
SWIG_As_unsigned_SS_long(PyObject* obj)
{
  unsigned long v;
  if (!SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned long));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_unsigned_SS_long(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_long(obj, (unsigned long*)0);
}

static bool std_vector_Sl_std_string_Sg____nonzero__(std::vector<std::string > const *self){
      return !(self->empty());
    }
static std::vector<std::string >::size_type std_vector_Sl_std_string_Sg____len__(std::vector<std::string > const *self){
      return self->size();
    }
static std::vector<std::string >::value_type std_vector_Sl_std_string_Sg__pop(std::vector<std::string > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::string,std::allocator<std::string > >::value_type x = self->back();
      self->pop_back();
      return x;
    }

SWIGINTERNSHORT long
SWIG_As_long(PyObject* obj)
{
  long v;
  if (!SWIG_AsVal_long(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(long));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_long(PyObject* obj)
{
  return SWIG_AsVal_long(obj, (long*)0);
}

static std::vector<std::string,std::allocator<std::string > > *std_vector_Sl_std_string_Sg____getslice__(std::vector<std::string > *self,std::vector<std::string >::difference_type i,std::vector<std::string >::difference_type j){
      return swig::getslice(self, i, j);
    }
static void std_vector_Sl_std_string_Sg____setslice__(std::vector<std::string > *self,std::vector<std::string >::difference_type i,std::vector<std::string >::difference_type j,std::vector<std::string,std::allocator<std::string > > const &v){
      swig::setslice(self, i, j, v);
    }
static void std_vector_Sl_std_string_Sg____delslice__(std::vector<std::string > *self,std::vector<std::string >::difference_type i,std::vector<std::string >::difference_type j){
      swig::delslice(self, i, j);
    }
static void std_vector_Sl_std_string_Sg____delitem__(std::vector<std::string > *self,std::vector<std::string >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
static std::vector<std::string >::value_type const &std_vector_Sl_std_string_Sg____getitem__(std::vector<std::string > const *self,std::vector<std::string >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
static void std_vector_Sl_std_string_Sg____setitem__(std::vector<std::string > *self,std::vector<std::string >::difference_type i,std::vector<std::string >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
static void std_vector_Sl_std_string_Sg__append(std::vector<std::string > *self,std::vector<std::string >::value_type const &x){
      self->push_back(x);
    }

SWIGINTERNSHORT int
  SWIG_CheckUnsignedLongInRange(unsigned long value,
				unsigned long max_value,
				const char *errmsg) 
{
  if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %lu is greater than '%s' minimum %lu",
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
 }


SWIGINTERN int
  SWIG_AsVal_unsigned_SS_short(PyObject *obj, unsigned short *val)
{ 
  const char* errmsg = val ? "unsigned short" : (char*)0;
  unsigned long v;
  if (SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    if (SWIG_CheckUnsignedLongInRange(v, USHRT_MAX, errmsg)) {
      if (val) *val = (unsigned short)(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;
}


  /*@/exec/swig/share/swig/1.3.24/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_unsigned_SS_short PyInt_FromLong
/*@@*/


namespace swig {
  template <> struct traits<unsigned short > {
    typedef value_category category;
    static const char* type_name() { return"unsigned short"; }
  };  
  template <>  struct traits_asval<unsigned short > {   
    typedef unsigned short value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_unsigned_SS_short(obj, val);
    }
  };
  template <>  struct traits_from<unsigned short > {
    typedef unsigned short value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_unsigned_SS_short(val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::pair<std::string,unsigned short > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "std::string" "," "unsigned short" " >";
	  }
	};
      }
    

      namespace swig {
	template <>  struct traits<std::map<std::string, unsigned short, std::less<std::string >, std::allocator<std::pair<std::string const,unsigned short > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::map<" "std::string" "," "unsigned short" "," "std::less<std::string >" "," "std::allocator<std::pair<std::string const,unsigned short > >" " >";
	  }
	};
      }
    
static bool std_map_Sl_std_string_Sc_unsigned_SS_short_Sg____nonzero__(std::map<std::string,unsigned short > const *self){
      return !(self->empty());
    }
static std::map<std::string,unsigned short >::size_type std_map_Sl_std_string_Sc_unsigned_SS_short_Sg____len__(std::map<std::string,unsigned short > const *self){
      return self->size();
    }
static std::map<std::string,unsigned short >::mapped_type std_map_Sl_std_string_Sc_unsigned_SS_short_Sg____getitem__(std::map<std::string,unsigned short > const *self,std::map<std::string,unsigned short >::key_type const &key){
      std::map<std::string,unsigned short,std::less<std::string >,std::allocator<std::pair<std::string const,unsigned short > > >::const_iterator i = self->find(key);
      if (i != self->end())
	return i->second;
      else
	throw std::out_of_range("key not found");
    }

SWIGINTERNSHORT unsigned short
SWIG_As_unsigned_SS_short(PyObject* obj)
{
  unsigned short v;
  if (!SWIG_AsVal_unsigned_SS_short(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned short));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_unsigned_SS_short(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_short(obj, (unsigned short*)0);
}

static void std_map_Sl_std_string_Sc_unsigned_SS_short_Sg____setitem__(std::map<std::string,unsigned short > *self,std::map<std::string,unsigned short >::key_type const &key,std::map<std::string,unsigned short >::mapped_type const &x){
      self->insert(std::map<std::string,unsigned short,std::less<std::string >,std::allocator<std::pair<std::string const,unsigned short > > >::value_type(key,x));
    }
static void std_map_Sl_std_string_Sc_unsigned_SS_short_Sg____delitem__(std::map<std::string,unsigned short > *self,std::map<std::string,unsigned short >::key_type const &key){
      std::map<std::string,unsigned short,std::less<std::string >,std::allocator<std::pair<std::string const,unsigned short > > >::iterator i = self->find(key);
      if (i != self->end())
	self->erase(i);
      else
	throw std::out_of_range("key not found");
    }
static bool std_map_Sl_std_string_Sc_unsigned_SS_short_Sg__has_key(std::map<std::string,unsigned short > const *self,std::map<std::string,unsigned short >::key_type const &key){
      std::map<std::string,unsigned short,std::less<std::string >,std::allocator<std::pair<std::string const,unsigned short > > >::const_iterator i = self->find(key);
      return i != self->end();
    }
static PyObject *std_map_Sl_std_string_Sc_unsigned_SS_short_Sg__keys(std::map<std::string,unsigned short > *self){
      std::map<std::string,unsigned short,std::less<std::string >,std::allocator<std::pair<std::string const,unsigned short > > >::size_type size = self->size();
      int pysize = size <= INT_MAX ? (int) size : 0;
      if (!pysize) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	Py_INCREF(Py_None);
	return Py_None;
      }
      PyObject* keyList = PyList_New(pysize);
      std::map<std::string,unsigned short,std::less<std::string >,std::allocator<std::pair<std::string const,unsigned short > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SetItem(keyList, j, swig::from(i->first));
      }
      return keyList;
    }
static PyObject *std_map_Sl_std_string_Sc_unsigned_SS_short_Sg__values(std::map<std::string,unsigned short > *self){
      std::map<std::string,unsigned short,std::less<std::string >,std::allocator<std::pair<std::string const,unsigned short > > >::size_type size = self->size();
      int pysize = size <= INT_MAX ? (int) size : 0;
      if (!pysize) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	Py_INCREF(Py_None);
	return Py_None;
      }
      PyObject* valList = PyTuple_New(pysize);
      std::map<std::string,unsigned short,std::less<std::string >,std::allocator<std::pair<std::string const,unsigned short > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyTuple_SetItem(valList, j, swig::from(i->second));
      }
      return valList;
    }
static PyObject *std_map_Sl_std_string_Sc_unsigned_SS_short_Sg__items(std::map<std::string,unsigned short > *self){
      std::map<std::string,unsigned short,std::less<std::string >,std::allocator<std::pair<std::string const,unsigned short > > >::size_type size = self->size();
      int pysize = size <= INT_MAX ? (int) size : 0;
      if (!pysize) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	Py_INCREF(Py_None);
	return Py_None;
      }    
      PyObject* itemList = PyTuple_New(pysize);
      std::map<std::string,unsigned short,std::less<std::string >,std::allocator<std::pair<std::string const,unsigned short > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyTuple_SetItem(itemList, j, swig::from(*i));
      }
      return itemList;
    }
static bool std_map_Sl_std_string_Sc_unsigned_SS_short_Sg____contains__(std::map<std::string,unsigned short > *self,std::map<std::string,unsigned short >::key_type const &key){
      return self->find(key) != self->end();
    }
static PyObject *std_map_Sl_std_string_Sc_unsigned_SS_short_Sg____iter__(std::map<std::string,unsigned short > *self){
      std::map<std::string,unsigned short,std::less<std::string >,std::allocator<std::pair<std::string const,unsigned short > > >::size_type size = self->size();
      int pysize = size <= INT_MAX ? (int) size : 0;
      if (!pysize) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	Py_INCREF(Py_None);
	return Py_None;
      }
      PyObject* keyTuple = PyTuple_New(pysize);
      std::map<std::string,unsigned short,std::less<std::string >,std::allocator<std::pair<std::string const,unsigned short > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyTuple_SetItem(keyTuple, j, swig::from(i->first));
      }
#if PY_VERSION_HEX >= 0x02020000
      PyObject* iter = PyObject_GetIter(keyTuple);
      Py_DECREF(keyTuple);
      return iter;
#else
      return keyTuple;
#endif
    }

  namespace swig {
    template <>  struct traits<Rotamer > {
      typedef pointer_category category;
      static const char* type_name() { return"Rotamer"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::pair<std::string,Rotamer* > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "std::string" "," "Rotamer" " * >";
	  }
	};
      }
    

      namespace swig {
	template <>  struct traits<std::map<std::string, Rotamer *, std::less<std::string >, std::allocator<std::pair<std::string const,Rotamer * > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::map<" "std::string" "," "Rotamer *" "," "std::less<std::string >" "," "std::allocator<std::pair<std::string const,Rotamer * > >" " >";
	  }
	};
      }
    
static bool std_map_Sl_std_string_Sc_Rotamer_Sm__Sg____nonzero__(std::map<std::string,Rotamer * > const *self){
      return !(self->empty());
    }
static std::map<std::string,Rotamer * >::size_type std_map_Sl_std_string_Sc_Rotamer_Sm__Sg____len__(std::map<std::string,Rotamer * > const *self){
      return self->size();
    }
static std::map<std::string,Rotamer * >::mapped_type std_map_Sl_std_string_Sc_Rotamer_Sm__Sg____getitem__(std::map<std::string,Rotamer * > const *self,std::map<std::string,Rotamer * >::key_type const &key){
      std::map<std::string,Rotamer *,std::less<std::string >,std::allocator<std::pair<std::string const,Rotamer * > > >::const_iterator i = self->find(key);
      if (i != self->end())
	return i->second;
      else
	throw std::out_of_range("key not found");
    }
static void std_map_Sl_std_string_Sc_Rotamer_Sm__Sg____setitem__(std::map<std::string,Rotamer * > *self,std::map<std::string,Rotamer * >::key_type const &key,std::map<std::string,Rotamer * >::mapped_type const &x){
      self->insert(std::map<std::string,Rotamer *,std::less<std::string >,std::allocator<std::pair<std::string const,Rotamer * > > >::value_type(key,x));
    }
static void std_map_Sl_std_string_Sc_Rotamer_Sm__Sg____delitem__(std::map<std::string,Rotamer * > *self,std::map<std::string,Rotamer * >::key_type const &key){
      std::map<std::string,Rotamer *,std::less<std::string >,std::allocator<std::pair<std::string const,Rotamer * > > >::iterator i = self->find(key);
      if (i != self->end())
	self->erase(i);
      else
	throw std::out_of_range("key not found");
    }
static bool std_map_Sl_std_string_Sc_Rotamer_Sm__Sg__has_key(std::map<std::string,Rotamer * > const *self,std::map<std::string,Rotamer * >::key_type const &key){
      std::map<std::string,Rotamer *,std::less<std::string >,std::allocator<std::pair<std::string const,Rotamer * > > >::const_iterator i = self->find(key);
      return i != self->end();
    }
static PyObject *std_map_Sl_std_string_Sc_Rotamer_Sm__Sg__keys(std::map<std::string,Rotamer * > *self){
      std::map<std::string,Rotamer *,std::less<std::string >,std::allocator<std::pair<std::string const,Rotamer * > > >::size_type size = self->size();
      int pysize = size <= INT_MAX ? (int) size : 0;
      if (!pysize) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	Py_INCREF(Py_None);
	return Py_None;
      }
      PyObject* keyList = PyList_New(pysize);
      std::map<std::string,Rotamer *,std::less<std::string >,std::allocator<std::pair<std::string const,Rotamer * > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SetItem(keyList, j, swig::from(i->first));
      }
      return keyList;
    }
static PyObject *std_map_Sl_std_string_Sc_Rotamer_Sm__Sg__values(std::map<std::string,Rotamer * > *self){
      std::map<std::string,Rotamer *,std::less<std::string >,std::allocator<std::pair<std::string const,Rotamer * > > >::size_type size = self->size();
      int pysize = size <= INT_MAX ? (int) size : 0;
      if (!pysize) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	Py_INCREF(Py_None);
	return Py_None;
      }
      PyObject* valList = PyTuple_New(pysize);
      std::map<std::string,Rotamer *,std::less<std::string >,std::allocator<std::pair<std::string const,Rotamer * > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyTuple_SetItem(valList, j, swig::from(i->second));
      }
      return valList;
    }
static PyObject *std_map_Sl_std_string_Sc_Rotamer_Sm__Sg__items(std::map<std::string,Rotamer * > *self){
      std::map<std::string,Rotamer *,std::less<std::string >,std::allocator<std::pair<std::string const,Rotamer * > > >::size_type size = self->size();
      int pysize = size <= INT_MAX ? (int) size : 0;
      if (!pysize) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	Py_INCREF(Py_None);
	return Py_None;
      }    
      PyObject* itemList = PyTuple_New(pysize);
      std::map<std::string,Rotamer *,std::less<std::string >,std::allocator<std::pair<std::string const,Rotamer * > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyTuple_SetItem(itemList, j, swig::from(*i));
      }
      return itemList;
    }
static bool std_map_Sl_std_string_Sc_Rotamer_Sm__Sg____contains__(std::map<std::string,Rotamer * > *self,std::map<std::string,Rotamer * >::key_type const &key){
      return self->find(key) != self->end();
    }
static PyObject *std_map_Sl_std_string_Sc_Rotamer_Sm__Sg____iter__(std::map<std::string,Rotamer * > *self){
      std::map<std::string,Rotamer *,std::less<std::string >,std::allocator<std::pair<std::string const,Rotamer * > > >::size_type size = self->size();
      int pysize = size <= INT_MAX ? (int) size : 0;
      if (!pysize) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	Py_INCREF(Py_None);
	return Py_None;
      }
      PyObject* keyTuple = PyTuple_New(pysize);
      std::map<std::string,Rotamer *,std::less<std::string >,std::allocator<std::pair<std::string const,Rotamer * > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyTuple_SetItem(keyTuple, j, swig::from(i->first));
      }
#if PY_VERSION_HEX >= 0x02020000
      PyObject* iter = PyObject_GetIter(keyTuple);
      Py_DECREF(keyTuple);
      return iter;
#else
      return keyTuple;
#endif
    }

      namespace swig {
	template <>  struct traits<std::vector<Rotamer*, std::allocator<Rotamer * > > > {
	  typedef value_category category;
	  static const char* type_name() {
	    return "std::vector<" "Rotamer" " *," "std::allocator<Rotamer * >" " >";
	  }
	};
      }
    
static bool std_vector_Sl_Rotamer_Sm__Sg____nonzero__(std::vector<Rotamer * > const *self){
      return !(self->empty());
    }
static std::vector<Rotamer * >::size_type std_vector_Sl_Rotamer_Sm__Sg____len__(std::vector<Rotamer * > const *self){
      return self->size();
    }
static std::vector<Rotamer * >::value_type std_vector_Sl_Rotamer_Sm__Sg__pop(std::vector<Rotamer * > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<Rotamer*,std::allocator<Rotamer * > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
static std::vector<Rotamer *,std::allocator<Rotamer * > > *std_vector_Sl_Rotamer_Sm__Sg____getslice__(std::vector<Rotamer * > *self,std::vector<Rotamer * >::difference_type i,std::vector<Rotamer * >::difference_type j){
      return swig::getslice(self, i, j);
    }
static void std_vector_Sl_Rotamer_Sm__Sg____setslice__(std::vector<Rotamer * > *self,std::vector<Rotamer * >::difference_type i,std::vector<Rotamer * >::difference_type j,std::vector<Rotamer *,std::allocator<Rotamer * > > const &v){
      swig::setslice(self, i, j, v);
    }
static void std_vector_Sl_Rotamer_Sm__Sg____delslice__(std::vector<Rotamer * > *self,std::vector<Rotamer * >::difference_type i,std::vector<Rotamer * >::difference_type j){
      swig::delslice(self, i, j);
    }
static void std_vector_Sl_Rotamer_Sm__Sg____delitem__(std::vector<Rotamer * > *self,std::vector<Rotamer * >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
static std::vector<Rotamer * >::value_type std_vector_Sl_Rotamer_Sm__Sg____getitem__(std::vector<Rotamer * > *self,std::vector<Rotamer * >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
static void std_vector_Sl_Rotamer_Sm__Sg____setitem__(std::vector<Rotamer * > *self,std::vector<Rotamer * >::difference_type i,std::vector<Rotamer * >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
static void std_vector_Sl_Rotamer_Sm__Sg__append(std::vector<Rotamer * > *self,std::vector<Rotamer * >::value_type x){
      self->push_back(x);
    }

namespace swig {
  template <> struct traits<double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };  
  template <>  struct traits_asval<double > {   
    typedef double value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_double(obj, val);
    }
  };
  template <>  struct traits_from<double > {
    typedef double value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_double(val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::pair<double,std::string > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "double" "," "std::string" " >";
	  }
	};
      }
    

  namespace swig {
    template <>  struct traits<MutInfo > {
      typedef pointer_category category;
      static const char* type_name() { return"MutInfo"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<MutInfo, std::allocator<MutInfo > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "MutInfo" "," "std::allocator<MutInfo >" " >";
	  }
	};
      }
    
static bool std_vector_Sl_MutInfo_Sg____nonzero__(std::vector<MutInfo > const *self){
      return !(self->empty());
    }
static std::vector<MutInfo >::size_type std_vector_Sl_MutInfo_Sg____len__(std::vector<MutInfo > const *self){
      return self->size();
    }
static std::vector<MutInfo >::value_type std_vector_Sl_MutInfo_Sg__pop(std::vector<MutInfo > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<MutInfo,std::allocator<MutInfo > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
static std::vector<MutInfo,std::allocator<MutInfo > > *std_vector_Sl_MutInfo_Sg____getslice__(std::vector<MutInfo > *self,std::vector<MutInfo >::difference_type i,std::vector<MutInfo >::difference_type j){
      return swig::getslice(self, i, j);
    }
static void std_vector_Sl_MutInfo_Sg____setslice__(std::vector<MutInfo > *self,std::vector<MutInfo >::difference_type i,std::vector<MutInfo >::difference_type j,std::vector<MutInfo,std::allocator<MutInfo > > const &v){
      swig::setslice(self, i, j, v);
    }
static void std_vector_Sl_MutInfo_Sg____delslice__(std::vector<MutInfo > *self,std::vector<MutInfo >::difference_type i,std::vector<MutInfo >::difference_type j){
      swig::delslice(self, i, j);
    }
static void std_vector_Sl_MutInfo_Sg____delitem__(std::vector<MutInfo > *self,std::vector<MutInfo >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
static std::vector<MutInfo >::value_type const &std_vector_Sl_MutInfo_Sg____getitem__(std::vector<MutInfo > const *self,std::vector<MutInfo >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
static void std_vector_Sl_MutInfo_Sg____setitem__(std::vector<MutInfo > *self,std::vector<MutInfo >::difference_type i,std::vector<MutInfo >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
static void std_vector_Sl_MutInfo_Sg__append(std::vector<MutInfo > *self,std::vector<MutInfo >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<MutInfoPair > {
      typedef pointer_category category;
      static const char* type_name() { return"MutInfoPair"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<MutInfoPair, std::allocator<MutInfoPair > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "MutInfoPair" "," "std::allocator<MutInfoPair >" " >";
	  }
	};
      }
    
static bool std_vector_Sl_MutInfoPair_Sg____nonzero__(std::vector<MutInfoPair > const *self){
      return !(self->empty());
    }
static std::vector<MutInfoPair >::size_type std_vector_Sl_MutInfoPair_Sg____len__(std::vector<MutInfoPair > const *self){
      return self->size();
    }
static std::vector<MutInfoPair >::value_type std_vector_Sl_MutInfoPair_Sg__pop(std::vector<MutInfoPair > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<MutInfoPair,std::allocator<MutInfoPair > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
static std::vector<MutInfoPair,std::allocator<MutInfoPair > > *std_vector_Sl_MutInfoPair_Sg____getslice__(std::vector<MutInfoPair > *self,std::vector<MutInfoPair >::difference_type i,std::vector<MutInfoPair >::difference_type j){
      return swig::getslice(self, i, j);
    }
static void std_vector_Sl_MutInfoPair_Sg____setslice__(std::vector<MutInfoPair > *self,std::vector<MutInfoPair >::difference_type i,std::vector<MutInfoPair >::difference_type j,std::vector<MutInfoPair,std::allocator<MutInfoPair > > const &v){
      swig::setslice(self, i, j, v);
    }
static void std_vector_Sl_MutInfoPair_Sg____delslice__(std::vector<MutInfoPair > *self,std::vector<MutInfoPair >::difference_type i,std::vector<MutInfoPair >::difference_type j){
      swig::delslice(self, i, j);
    }
static void std_vector_Sl_MutInfoPair_Sg____delitem__(std::vector<MutInfoPair > *self,std::vector<MutInfoPair >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
static std::vector<MutInfoPair >::value_type const &std_vector_Sl_MutInfoPair_Sg____getitem__(std::vector<MutInfoPair > const *self,std::vector<MutInfoPair >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
static void std_vector_Sl_MutInfoPair_Sg____setitem__(std::vector<MutInfoPair > *self,std::vector<MutInfoPair >::difference_type i,std::vector<MutInfoPair >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
static void std_vector_Sl_MutInfoPair_Sg__append(std::vector<MutInfoPair > *self,std::vector<MutInfoPair >::value_type const &x){
      self->push_back(x);
    }

    string derefString(string* str) {
	return *str;	
    }


    Rotamer* derefRotamer(Rotamer** x) {
       return *x;
    }


    AARotamer* derefAARotamer(AARotamer** x) {
	return *x;
    }



    AARotamer *castRotamerToAARotamer(Rotamer* x) {
	return (AARotamer*)x;
    }


#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_new_ScreamModel__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamModel *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ScreamModel")) goto fail;
    result = (ScreamModel *)new ScreamModel();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_ScreamModel, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ScreamModel__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::string arg1 ;
    ScreamModel *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ScreamModel",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (ScreamModel *)new ScreamModel(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_ScreamModel, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ScreamModel(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_ScreamModel__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_ScreamModel__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_ScreamModel'");
    return NULL;
}


static PyObject *_wrap_delete_ScreamModel(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamModel *arg1 = (ScreamModel *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ScreamModel",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamModel_scream_parameters_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamModel *arg1 = (ScreamModel *) 0 ;
    ScreamParameters *arg2 = (ScreamParameters *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamModel_scream_parameters_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->scream_parameters = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamModel_scream_parameters_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamModel *arg1 = (ScreamModel *) 0 ;
    ScreamParameters *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamModel_scream_parameters_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (ScreamParameters *)& ((arg1)->scream_parameters);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_ScreamParameters, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamModel_HANDLER_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamModel *arg1 = (ScreamModel *) 0 ;
    bgf_handler *arg2 = (bgf_handler *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamModel_HANDLER_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->HANDLER = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamModel_HANDLER_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamModel *arg1 = (ScreamModel *) 0 ;
    bgf_handler *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamModel_HANDLER_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bgf_handler *)& ((arg1)->HANDLER);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_bgf_handler, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamModel_ptn_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamModel *arg1 = (ScreamModel *) 0 ;
    Protein *arg2 = (Protein *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamModel_ptn_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->ptn = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamModel_ptn_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamModel *arg1 = (ScreamModel *) 0 ;
    Protein *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamModel_ptn_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (Protein *)& ((arg1)->ptn);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Protein, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamModel_scream_EE_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamModel *arg1 = (ScreamModel *) 0 ;
    Scream_EE *arg2 = (Scream_EE *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamModel_scream_EE_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->scream_EE = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamModel_scream_EE_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamModel *arg1 = (ScreamModel *) 0 ;
    Scream_EE *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamModel_scream_EE_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (Scream_EE *)& ((arg1)->scream_EE);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Scream_EE, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamModel_new_ScreamEE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamModel *arg1 = (ScreamModel *) 0 ;
    Scream_EE *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamModel_new_ScreamEE",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (Scream_EE *)(arg1)->new_ScreamEE();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Scream_EE, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamModel_new_Rotlib(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamModel *arg1 = (ScreamModel *) 0 ;
    Rotlib *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamModel_new_Rotlib",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (Rotlib *)(arg1)->new_Rotlib();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Rotlib, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamModel_scream_EE_list_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamModel *arg1 = (ScreamModel *) 0 ;
    std::vector<Scream_EE * > *arg2 = (std::vector<Scream_EE * > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamModel_scream_EE_list_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTScream_EE_p_std__allocatorTScream_EE_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->scream_EE_list = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamModel_scream_EE_list_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamModel *arg1 = (ScreamModel *) 0 ;
    std::vector<Scream_EE * > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamModel_scream_EE_list_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<Scream_EE * > *)& ((arg1)->scream_EE_list);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTScream_EE_p_std__allocatorTScream_EE_p_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamModel_rotlib_list_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamModel *arg1 = (ScreamModel *) 0 ;
    std::vector<Rotlib * > *arg2 = (std::vector<Rotlib * > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamModel_rotlib_list_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTRotlib_p_std__allocatorTRotlib_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->rotlib_list = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamModel_rotlib_list_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamModel *arg1 = (ScreamModel *) 0 ;
    std::vector<Rotlib * > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamModel_rotlib_list_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<Rotlib * > *)& ((arg1)->rotlib_list);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTRotlib_p_std__allocatorTRotlib_p_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ScreamModel_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ScreamModel, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ScreamParameters__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ScreamParameters")) goto fail;
    result = (ScreamParameters *)new ScreamParameters();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_ScreamParameters, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ScreamParameters__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::string arg1 ;
    ScreamParameters *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ScreamParameters",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (ScreamParameters *)new ScreamParameters(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_ScreamParameters, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ScreamParameters(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_ScreamParameters__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_ScreamParameters__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_ScreamParameters'");
    return NULL;
}


static PyObject *_wrap_delete_ScreamParameters(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ScreamParameters",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_InputFileName_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_InputFileName_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->InputFileName = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_InputFileName_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_InputFileName_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->InputFileName);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_MutateResidueInfo_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::vector<std::string > *arg2 = (std::vector<std::string > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_MutateResidueInfo_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->MutateResidueInfo = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_MutateResidueInfo_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::vector<std::string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_MutateResidueInfo_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<std::string > *)& ((arg1)->MutateResidueInfo);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_AdditionalLibraryInfo_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::vector<std::string > *arg2 = (std::vector<std::string > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_AdditionalLibraryInfo_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->AdditionalLibraryInfo = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_AdditionalLibraryInfo_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::vector<std::string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_AdditionalLibraryInfo_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<std::string > *)& ((arg1)->AdditionalLibraryInfo);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_Library_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_Library_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->Library = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_Library_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_Library_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->Library);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_PlacementMethod_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_PlacementMethod_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->PlacementMethod = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_PlacementMethod_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_PlacementMethod_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->PlacementMethod);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_CreateCBParameters_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::vector<double > *arg2 = (std::vector<double > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_CreateCBParameters_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->CreateCBParameters = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_CreateCBParameters_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::vector<double > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_CreateCBParameters_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<double > *)& ((arg1)->CreateCBParameters);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_KeepOriginalRotamer_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_KeepOriginalRotamer_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->KeepOriginalRotamer = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_KeepOriginalRotamer_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_KeepOriginalRotamer_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->KeepOriginalRotamer);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_UseScreamEnergyFunction_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_UseScreamEnergyFunction_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->UseScreamEnergyFunction = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_UseScreamEnergyFunction_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_UseScreamEnergyFunction_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->UseScreamEnergyFunction);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_UseDeltaMethod_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_UseDeltaMethod_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->UseDeltaMethod = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_UseDeltaMethod_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_UseDeltaMethod_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->UseDeltaMethod);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_UseRotamerNeighborList_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_UseRotamerNeighborList_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->UseRotamerNeighborList = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_UseRotamerNeighborList_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_UseRotamerNeighborList_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->UseRotamerNeighborList);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_UseAsymmetricDelta_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_UseAsymmetricDelta_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->UseAsymmetricDelta = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_UseAsymmetricDelta_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_UseAsymmetricDelta_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->UseAsymmetricDelta);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_UseDeltaForInterResiE_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_UseDeltaForInterResiE_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->UseDeltaForInterResiE = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_UseDeltaForInterResiE_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_UseDeltaForInterResiE_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->UseDeltaForInterResiE);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_FlatDeltaValue_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_FlatDeltaValue_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->FlatDeltaValue = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_FlatDeltaValue_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_FlatDeltaValue_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->FlatDeltaValue);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_DeltaStandardDevs_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_DeltaStandardDevs_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->DeltaStandardDevs = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_DeltaStandardDevs_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_DeltaStandardDevs_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->DeltaStandardDevs);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_InnerWallScalingFactor_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_InnerWallScalingFactor_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->InnerWallScalingFactor = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_InnerWallScalingFactor_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_InnerWallScalingFactor_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->InnerWallScalingFactor);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_NonPolarHCalc_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_NonPolarHCalc_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->NonPolarHCalc = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_NonPolarHCalc_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_NonPolarHCalc_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->NonPolarHCalc);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_ScoringFunction_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_ScoringFunction_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->ScoringFunction = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_ScoringFunction_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_ScoringFunction_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->ScoringFunction);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_MultiplePlacementMethod_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_MultiplePlacementMethod_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->MultiplePlacementMethod = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_MultiplePlacementMethod_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_MultiplePlacementMethod_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->MultiplePlacementMethod);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_CBGroundSpectrumCalc_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_CBGroundSpectrumCalc_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->CBGroundSpectrumCalc = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_CBGroundSpectrumCalc_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_CBGroundSpectrumCalc_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->CBGroundSpectrumCalc);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_OneEnergyFFParFile_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_OneEnergyFFParFile_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->OneEnergyFFParFile = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_OneEnergyFFParFile_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_OneEnergyFFParFile_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->OneEnergyFFParFile);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_DeltaParFile_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_DeltaParFile_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->DeltaParFile = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_DeltaParFile_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_DeltaParFile_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->DeltaParFile);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_EachAtomDeltaFile_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_EachAtomDeltaFile_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->EachAtomDeltaFile = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_EachAtomDeltaFile_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_EachAtomDeltaFile_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->EachAtomDeltaFile);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_PolarOptimizationExclusions_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_PolarOptimizationExclusions_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->PolarOptimizationExclusions = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_PolarOptimizationExclusions_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_PolarOptimizationExclusions_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->PolarOptimizationExclusions);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_LJOption_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_LJOption_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->LJOption = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_LJOption_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_LJOption_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->LJOption);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_CoulombMode_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_CoulombMode_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->CoulombMode = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_CoulombMode_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_CoulombMode_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->CoulombMode);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_Dielectric_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_Dielectric_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->Dielectric = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_Dielectric_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_Dielectric_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->Dielectric);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_Selections_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_Selections_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->Selections = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_Selections_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_Selections_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->Selections);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_MaxSearchNumber_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_MaxSearchNumber_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->MaxSearchNumber = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_MaxSearchNumber_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_MaxSearchNumber_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->MaxSearchNumber);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_AbsStericClashCutoffEL_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_AbsStericClashCutoffEL_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->AbsStericClashCutoffEL = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_AbsStericClashCutoffEL_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_AbsStericClashCutoffEL_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->AbsStericClashCutoffEL);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_StericClashCutoffEnergy_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_StericClashCutoffEnergy_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->StericClashCutoffEnergy = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_StericClashCutoffEnergy_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_StericClashCutoffEnergy_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->StericClashCutoffEnergy);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_StericClashCutoffDist_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_StericClashCutoffDist_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->StericClashCutoffDist = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_StericClashCutoffDist_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_StericClashCutoffDist_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->StericClashCutoffDist);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_MaxFinalStepRunTime_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_MaxFinalStepRunTime_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->MaxFinalStepRunTime = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_MaxFinalStepRunTime_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_MaxFinalStepRunTime_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->MaxFinalStepRunTime);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_LibPath_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_LibPath_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->LibPath = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_LibPath_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_LibPath_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->LibPath);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_Verbosity_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_Verbosity_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->Verbosity = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_Verbosity_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_Verbosity_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->Verbosity);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_DesignPositionAndClass_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::vector<std::string > *arg2 = (std::vector<std::string > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_DesignPositionAndClass_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->DesignPositionAndClass = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_DesignPositionAndClass_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::vector<std::string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_DesignPositionAndClass_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<std::string > *)& ((arg1)->DesignPositionAndClass);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_DesignAAClassDefns_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::vector<std::string > *arg2 = (std::vector<std::string > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_DesignAAClassDefns_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->DesignAAClassDefns = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_DesignAAClassDefns_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::vector<std::string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_DesignAAClassDefns_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<std::string > *)& ((arg1)->DesignAAClassDefns);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_JustOutputSequence_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_JustOutputSequence_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->JustOutputSequence = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_JustOutputSequence_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_JustOutputSequence_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->JustOutputSequence);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_StructuresPerSequence_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_StructuresPerSequence_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->StructuresPerSequence = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_StructuresPerSequence_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_StructuresPerSequence_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->StructuresPerSequence);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_BindingSiteMode_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_BindingSiteMode_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->BindingSiteMode = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_BindingSiteMode_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_BindingSiteMode_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->BindingSiteMode);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_FixedResidues_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::vector<std::string > *arg2 = (std::vector<std::string > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_FixedResidues_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->FixedResidues = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_FixedResidues_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::vector<std::string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_FixedResidues_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<std::string > *)& ((arg1)->FixedResidues);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_AroundAtom_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::vector<int > *arg2 = (std::vector<int > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_AroundAtom_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->AroundAtom = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_AroundAtom_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::vector<int > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_AroundAtom_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<int > *)& ((arg1)->AroundAtom);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_AroundResidue_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::vector<MutInfo > *arg2 = (std::vector<MutInfo > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_AroundResidue_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->AroundResidue = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_AroundResidue_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::vector<MutInfo > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_AroundResidue_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<MutInfo > *)& ((arg1)->AroundResidue);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_AroundChain_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::vector<std::string > *arg2 = (std::vector<std::string > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_AroundChain_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->AroundChain = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_AroundChain_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::vector<std::string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_AroundChain_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<std::string > *)& ((arg1)->AroundChain);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_AroundDistance_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_AroundDistance_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->AroundDistance = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_AroundDistance_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_AroundDistance_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->AroundDistance);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_AroundDistanceDefn_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_AroundDistanceDefn_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->AroundDistanceDefn = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_AroundDistanceDefn_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_AroundDistanceDefn_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->AroundDistanceDefn);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getMutateResidueInfoList(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::vector<std::string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getMutateResidueInfoList",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getMutateResidueInfoList();
    
    {
        std::vector<std::string > * resultptr;
        resultptr = new std::vector<std::string >((std::vector<std::string > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getAdditionalLibraryInfo(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::vector<std::string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getAdditionalLibraryInfo",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getAdditionalLibraryInfo();
    
    {
        std::vector<std::string > * resultptr;
        resultptr = new std::vector<std::string >((std::vector<std::string > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getKeepOriginalRotamer(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getKeepOriginalRotamer",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getKeepOriginalRotamer();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getUseScreamEnergyFunction(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getUseScreamEnergyFunction",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getUseScreamEnergyFunction();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getPlacementMethod(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getPlacementMethod",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getPlacementMethod();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getCreateCBParameters(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    SwigValueWrapper<std::vector<double > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getCreateCBParameters",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getCreateCBParameters();
    
    {
        std::vector<double > * resultptr;
        resultptr = new std::vector<double >((std::vector<double > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getUseDeltaMethod(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getUseDeltaMethod",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getUseDeltaMethod();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getUseRotamerNeighborList(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getUseRotamerNeighborList",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getUseRotamerNeighborList();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getUseAsymmetricDelta(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getUseAsymmetricDelta",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getUseAsymmetricDelta();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getUseDeltaForInterResiE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getUseDeltaForInterResiE",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getUseDeltaForInterResiE();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getFlatDeltaValue(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getFlatDeltaValue",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->getFlatDeltaValue();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getDeltaStandardDevs(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getDeltaStandardDevs",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->getDeltaStandardDevs();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getInnerWallScalingFactor(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getInnerWallScalingFactor",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->getInnerWallScalingFactor();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getNonPolarHCalc(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getNonPolarHCalc",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getNonPolarHCalc();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getOneEnergyFFParFile(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getOneEnergyFFParFile",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getOneEnergyFFParFile();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getDeltaParFile(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getDeltaParFile",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getDeltaParFile();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getEachAtomDeltaFile(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getEachAtomDeltaFile",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getEachAtomDeltaFile();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getPolarOptimizationExclusions(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getPolarOptimizationExclusions",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getPolarOptimizationExclusions();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getSelections(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getSelections",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)(arg1)->getSelections();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getMaxSearchNumber(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getMaxSearchNumber",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)(arg1)->getMaxSearchNumber();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getAbsStericClashCutoffEL(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getAbsStericClashCutoffEL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->getAbsStericClashCutoffEL();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getStericClashCutoffEnergy(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getStericClashCutoffEnergy",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->getStericClashCutoffEnergy();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getStericClashCutoffDist(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getStericClashCutoffDist",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->getStericClashCutoffDist();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getMaxFinalStepRunTime(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getMaxFinalStepRunTime",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->getMaxFinalStepRunTime();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getDesignPositionAndClass(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::vector<std::string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getDesignPositionAndClass",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getDesignPositionAndClass();
    
    {
        std::vector<std::string > * resultptr;
        resultptr = new std::vector<std::string >((std::vector<std::string > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getDesignAAClassDefns(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::vector<std::string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getDesignAAClassDefns",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getDesignAAClassDefns();
    
    {
        std::vector<std::string > * resultptr;
        resultptr = new std::vector<std::string >((std::vector<std::string > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getJustOutputSequence(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getJustOutputSequence",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getJustOutputSequence();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getLJOption(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getLJOption",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getLJOption();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getCoulombMode(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getCoulombMode",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getCoulombMode();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getDielectric(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getDielectric",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->getDielectric();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getBindingSiteMode(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getBindingSiteMode",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getBindingSiteMode();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getFixedResidues(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::vector<std::string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getFixedResidues",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getFixedResidues();
    
    {
        std::vector<std::string > * resultptr;
        resultptr = new std::vector<std::string >((std::vector<std::string > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getAroundAtom(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::vector<int > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getAroundAtom",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getAroundAtom();
    
    {
        std::vector<int > * resultptr;
        resultptr = new std::vector<int >((std::vector<int > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getAroundResidue(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::vector<MutInfo > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getAroundResidue",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getAroundResidue();
    
    {
        std::vector<MutInfo > * resultptr;
        resultptr = new std::vector<MutInfo >((std::vector<MutInfo > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getAroundChain(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::vector<std::string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getAroundChain",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getAroundChain();
    
    {
        std::vector<std::string > * resultptr;
        resultptr = new std::vector<std::string >((std::vector<std::string > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getAroundDistance(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getAroundDistance",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->getAroundDistance();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getAroundDistanceDefn(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getAroundDistanceDefn",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getAroundDistanceDefn();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getDesignPositions(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::vector<std::string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getDesignPositions",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getDesignPositions();
    
    {
        std::vector<std::string > * resultptr;
        resultptr = new std::vector<std::string >((std::vector<std::string > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getDesignClassFromPosition(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string arg2 ;
    std::string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_getDesignClassFromPosition",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (arg1)->getDesignClassFromPosition(arg2);
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getDesignClassAAs(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string arg2 ;
    std::vector<std::string > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_getDesignClassAAs",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (arg1)->getDesignClassAAs(arg2);
    
    {
        std::vector<std::string > * resultptr;
        resultptr = new std::vector<std::string >((std::vector<std::string > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_multiplePlacementMethod(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_multiplePlacementMethod",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->multiplePlacementMethod();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getCBGroundSpectrumCalc(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getCBGroundSpectrumCalc",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getCBGroundSpectrumCalc();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_read_scream_par_file(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_read_scream_par_file",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    (arg1)->read_scream_par_file(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_print_to_output(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    ostream *arg2 = (ostream *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_print_to_output",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ostream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    ((ScreamParameters const *)arg1)->print_to_output(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_minimizationMethod(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_minimizationMethod",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((ScreamParameters const *)arg1)->minimizationMethod();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_minimizationSteps(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_minimizationSteps",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((ScreamParameters const *)arg1)->minimizationSteps();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_oneEMethod(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_oneEMethod",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((ScreamParameters const *)arg1)->oneEMethod();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_residueToScreamName(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string arg2 ;
    std::string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_residueToScreamName",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = ((ScreamParameters const *)arg1)->residueToScreamName(arg2);
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_residueToScreamPstn(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_residueToScreamPstn",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (int)((ScreamParameters const *)arg1)->residueToScreamPstn(arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_residueToScreamChn(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string arg2 ;
    std::string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ScreamParameters_residueToScreamChn",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = ((ScreamParameters const *)arg1)->residueToScreamChn(arg2);
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_determineLibDirPath(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_determineLibDirPath",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((ScreamParameters const *)arg1)->determineLibDirPath();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_determineLibDirFileNameSuffix(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_determineLibDirFileNameSuffix",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((ScreamParameters const *)arg1)->determineLibDirFileNameSuffix();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_determineCnnDirPath(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_determineCnnDirPath",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((ScreamParameters const *)arg1)->determineCnnDirPath();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getLibResolution(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getLibResolution",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((ScreamParameters const *)arg1)->getLibResolution();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_returnEnergyMethod(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_returnEnergyMethod",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((ScreamParameters const *)arg1)->returnEnergyMethod();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_returnEnergyMethodTValue(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_returnEnergyMethodTValue",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((ScreamParameters const *)arg1)->returnEnergyMethodTValue();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters_getVerbosity(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters_getVerbosity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((ScreamParameters const *)arg1)->getVerbosity();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ScreamParameters__init_default_params(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamParameters *arg1 = (ScreamParameters *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ScreamParameters__init_default_params",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->_init_default_params();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ScreamParameters_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ScreamParameters, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_SCREAM_ATOM__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_SCREAM_ATOM")) goto fail;
    result = (SCREAM_ATOM *)new SCREAM_ATOM();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_SCREAM_ATOM, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SCREAM_ATOM__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::string arg1 ;
    SCREAM_ATOM *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_SCREAM_ATOM",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (SCREAM_ATOM *)new SCREAM_ATOM(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_SCREAM_ATOM, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SCREAM_ATOM__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    SCREAM_ATOM *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_SCREAM_ATOM",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (SCREAM_ATOM *)new SCREAM_ATOM(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_SCREAM_ATOM, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SCREAM_ATOM(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_SCREAM_ATOM__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_SCREAM_ATOM, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_SCREAM_ATOM__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_SCREAM_ATOM__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_SCREAM_ATOM'");
    return NULL;
}


static PyObject *_wrap_delete_SCREAM_ATOM(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SCREAM_ATOM",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_pdb_init(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_pdb_init",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    (arg1)->pdb_init(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_set_x(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_set_x",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->set_x(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_set_y(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_set_y",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->set_y(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_set_z(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_set_z",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->set_z(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_getAtomLabel(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_getAtomLabel",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getAtomLabel();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_setAtomLabel(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_setAtomLabel",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    (arg1)->setAtomLabel(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_getAtomType(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_getAtomType",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getAtomType();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_setAtomType(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_setAtomType",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    (arg1)->setAtomType(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_getX(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_getX",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->getX();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_setX(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_setX",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setX(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_getY(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_getY",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->getY();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_setY(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_setY",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setY(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_getZ(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_getZ",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->getZ();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_setZ(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_setZ",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setZ(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_getCharge(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_getCharge",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->getCharge();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_setCharge(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_setCharge",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setCharge(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_getResName(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_getResName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getResName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_setResName(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_setResName",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    (arg1)->setResName(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_getChain(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_getChain",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getChain();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_setChain(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_setChain",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    (arg1)->setChain(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_getResNum(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_getResNum",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)(arg1)->getResNum();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_setResNum(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_setResNum",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setResNum(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_GLOBAL_ATOM_N_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_GLOBAL_ATOM_N_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->GLOBAL_ATOM_N = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_GLOBAL_ATOM_N_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_GLOBAL_ATOM_N_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->GLOBAL_ATOM_N);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_keyw_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_keyw_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->keyw = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_keyw_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_keyw_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->keyw);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_atomLabel_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_atomLabel_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->atomLabel = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_atomLabel_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_atomLabel_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->atomLabel);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_stripped_atomLabel_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_stripped_atomLabel_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->stripped_atomLabel = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_stripped_atomLabel_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_stripped_atomLabel_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->stripped_atomLabel);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_isSC_Flag_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_isSC_Flag_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->isSC_Flag = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_isSC_Flag_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_isSC_Flag_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->isSC_Flag);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_isAAResAtom_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_isAAResAtom_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->isAAResAtom = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_isAAResAtom_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_isAAResAtom_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->isAAResAtom);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_atomType_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_atomType_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->atomType = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_atomType_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_atomType_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->atomType);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_stripped_atomType_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_stripped_atomType_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->stripped_atomType = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_stripped_atomType_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_stripped_atomType_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->stripped_atomType);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_occupancy_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_occupancy_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->occupancy = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_occupancy_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_occupancy_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->occupancy);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_BFactor_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_BFactor_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->BFactor = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_BFactor_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_BFactor_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->BFactor);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_resName_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_resName_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->resName = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_resName_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_resName_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->resName);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_oneLetterResName_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_oneLetterResName_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->oneLetterResName = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_oneLetterResName_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_oneLetterResName_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->oneLetterResName);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_chain_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_chain_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->chain = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_chain_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_chain_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->chain);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_resNum_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_resNum_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->resNum = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_resNum_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_resNum_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->resNum);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_atoms_connected_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_atoms_connected_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->atoms_connected = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_atoms_connected_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_atoms_connected_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->atoms_connected);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_lone_pair_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_lone_pair_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->lone_pair = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_lone_pair_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_lone_pair_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->lone_pair);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_x_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_x_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        double *inp = (double *)(arg2);
        if (inp) {
            double *dest = (double *)(arg1->x);
            size_t ii = 0;
            for (; ii < 3; ++ii) dest[ii] = inp[ii];
        } else {
            SWIG_null_ref("double");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_x_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_x_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double *)(double *) ((arg1)->x);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_double, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_q_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_q_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        double *inp = (double *)(arg2);
        if (inp) {
            double *dest = (double *)(arg1->q);
            size_t ii = 0;
            for (; ii < 2; ++ii) dest[ii] = inp[ii];
        } else {
            SWIG_null_ref("double");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_q_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_q_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double *)(double *) ((arg1)->q);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_double, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_n_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_n_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->n = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_n_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_n_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->n);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_type_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_type_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->type = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_type_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_type_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->type);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_flags_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_flags_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->flags = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_flags_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_flags_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->flags);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_m_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_m_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->m = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_m_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_m_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->m);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_vchg2_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_vchg2_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->vchg2 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_vchg2_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_vchg2_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->vchg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_library_name_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_library_name_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->library_name = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_library_name_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_library_name_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->library_name);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_vdw_r_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_vdw_r_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->vdw_r = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_vdw_r_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_vdw_r_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->vdw_r);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_vdw_d_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_vdw_d_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->vdw_d = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_vdw_d_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_vdw_d_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->vdw_d);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_vdw_s_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_vdw_s_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->vdw_s = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_vdw_s_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_vdw_s_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->vdw_s);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_vachg_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_vachg_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->vachg = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_vachg_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_vachg_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->vachg);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_vrchg_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_vrchg_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->vrchg = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_vrchg_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_vrchg_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->vrchg);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_hb_da_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_hb_da_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->hb_da = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_hb_da_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_hb_da_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->hb_da);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_a_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_a_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->a = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_a_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_a_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->a);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_delta_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_delta_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->delta = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_delta_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_delta_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->delta);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_connectivity_m_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::map<SCREAM_ATOM *,int > *arg2 = (std::map<SCREAM_ATOM *,int > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_connectivity_m_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->connectivity_m = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_connectivity_m_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::map<SCREAM_ATOM *,int > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_connectivity_m_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::map<SCREAM_ATOM *,int > *)& ((arg1)->connectivity_m);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_initFlag(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_initFlag",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->initFlag();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_resetFlag(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_resetFlag",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->resetFlag();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_make_atom_moveable(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_make_atom_moveable",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->make_atom_moveable();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_make_atom_fixed(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_make_atom_fixed",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->make_atom_fixed();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_make_atom_invisible(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_make_atom_invisible",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->make_atom_invisible();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_make_atom_visible(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_make_atom_visible",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->make_atom_visible();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_make_atom_EL_invisible(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_make_atom_EL_invisible",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->make_atom_EL_invisible();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_make_atom_EL_visible(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_make_atom_EL_visible",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->make_atom_EL_visible();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_is_part_of_EE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_is_part_of_EE",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->is_part_of_EE();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_fix_atom(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_fix_atom",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->fix_atom(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_distance(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    SCREAM_ATOM *arg2 = (SCREAM_ATOM *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_distance",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (double)(arg1)->distance(arg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_distance_squared(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    SCREAM_ATOM *arg2 = (SCREAM_ATOM *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_distance_squared",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (double)(arg1)->distance_squared(arg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_worst_clash_dist__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::vector<SCREAM_ATOM * > *arg2 = 0 ;
    SCREAM_ATOM **arg3 = (SCREAM_ATOM **) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:SCREAM_ATOM_worst_clash_dist",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTSCREAM_ATOM_p_std__allocatorTSCREAM_ATOM_p_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<SCREAM_ATOM * >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    result = (double)(arg1)->worst_clash_dist(*arg2,arg3);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_worst_clash_dist__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::vector<SCREAM_ATOM * > *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_worst_clash_dist",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTSCREAM_ATOM_p_std__allocatorTSCREAM_ATOM_p_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<SCREAM_ATOM * >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)(arg1)->worst_clash_dist(*arg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_worst_clash_dist(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_SCREAM_ATOM, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__vectorTSCREAM_ATOM_p_std__allocatorTSCREAM_ATOM_p_t_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_SCREAM_ATOM_worst_clash_dist__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_SCREAM_ATOM, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__vectorTSCREAM_ATOM_p_std__allocatorTSCREAM_ATOM_p_t_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_p_SCREAM_ATOM, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_SCREAM_ATOM_worst_clash_dist__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'SCREAM_ATOM_worst_clash_dist'");
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_feed_me(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_feed_me",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    (arg1)->feed_me(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_feed_me_pdb(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_feed_me_pdb",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    (arg1)->feed_me_pdb(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_make_bond__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    SCREAM_ATOM *arg2 = (SCREAM_ATOM *) 0 ;
    int arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:SCREAM_ATOM_make_bond",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (bool)(arg1)->make_bond(arg2,arg3);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_make_bond__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    SCREAM_ATOM *arg2 = (SCREAM_ATOM *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_make_bond",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (bool)(arg1)->make_bond(arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_make_bond(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_SCREAM_ATOM, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_SCREAM_ATOM, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_SCREAM_ATOM_make_bond__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_SCREAM_ATOM, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_SCREAM_ATOM, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_SCREAM_ATOM_make_bond__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'SCREAM_ATOM_make_bond'");
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_delete_bond(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    SCREAM_ATOM *arg2 = (SCREAM_ATOM *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_delete_bond",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (bool)(arg1)->delete_bond(arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_copy(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    SCREAM_ATOM *arg2 = 0 ;
    SCREAM_ATOM *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_copy",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("SCREAM_ATOM");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SCREAM_ATOM &_result_ref = (arg1)->copy((SCREAM_ATOM const &)*arg2);
        result = (SCREAM_ATOM *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_SCREAM_ATOM, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_copyJustCoords(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    SCREAM_ATOM *arg2 = 0 ;
    SCREAM_ATOM *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_copyJustCoords",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("SCREAM_ATOM");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SCREAM_ATOM &_result_ref = (arg1)->copyJustCoords((SCREAM_ATOM const &)*arg2);
        result = (SCREAM_ATOM *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_SCREAM_ATOM, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_dump(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_dump",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((SCREAM_ATOM const *)arg1)->dump();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_pdb_dump(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_pdb_dump",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((SCREAM_ATOM const *)arg1)->pdb_dump();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_return_bgf_line(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_return_bgf_line",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((SCREAM_ATOM const *)arg1)->return_bgf_line();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_return_pdb_line(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCREAM_ATOM_return_pdb_line",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((SCREAM_ATOM const *)arg1)->return_pdb_line();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_append_to_filehandle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    ostream *arg2 = (ostream *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_append_to_filehandle",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ostream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    ((SCREAM_ATOM const *)arg1)->append_to_filehandle(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_pdb_append_to_filehandle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    ostream *arg2 = (ostream *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_pdb_append_to_filehandle",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ostream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    ((SCREAM_ATOM const *)arg1)->pdb_append_to_filehandle(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_pdb_append_to_ostream_connect_info(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    ostream *arg2 = (ostream *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_pdb_append_to_ostream_connect_info",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ostream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    ((SCREAM_ATOM const *)arg1)->pdb_append_to_ostream_connect_info(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_ATOM_append_to_ostream_connect_info(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_ATOM *arg1 = (SCREAM_ATOM *) 0 ;
    ostream *arg2 = (ostream *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_ATOM_append_to_ostream_connect_info",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ostream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    ((SCREAM_ATOM const *)arg1)->append_to_ostream_connect_info(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * SCREAM_ATOM_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_SCREAM_ATOM, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Rotamer__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Rotamer")) goto fail;
    result = (Rotamer *)new Rotamer();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Rotamer, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Rotamer__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamAtomV *arg1 = 0 ;
    RotConnInfo *arg2 = (RotConnInfo *) 0 ;
    bool arg3 ;
    Rotamer *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_Rotamer",&obj0,&obj1,&obj2)) goto fail;
    {
        std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > > *ptr = (std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("ScreamAtomV", obj0);
        } else if (!ptr) {
            SWIG_null_ref("ScreamAtomV");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (bool)(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (Rotamer *)new Rotamer((std::vector<SCREAM_ATOM * > const &)*arg1,(RotConnInfo const *)arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Rotamer, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_Rotamer__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamAtomV *arg1 = 0 ;
    RotConnInfo *arg2 = (RotConnInfo *) 0 ;
    Rotamer *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_Rotamer",&obj0,&obj1)) goto fail;
    {
        std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > > *ptr = (std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("ScreamAtomV", obj0);
        } else if (!ptr) {
            SWIG_null_ref("ScreamAtomV");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (Rotamer *)new Rotamer((std::vector<SCREAM_ATOM * > const &)*arg1,(RotConnInfo const *)arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Rotamer, 0);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_Rotamer__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    stringV *arg1 = 0 ;
    RotConnInfo *arg2 = (RotConnInfo *) 0 ;
    Rotamer *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_Rotamer",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_stringV, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("stringV");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (Rotamer *)new Rotamer((stringV const &)*arg1,(RotConnInfo const *)arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Rotamer, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Rotamer__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj;
    stringV *arg1 = 0 ;
    Rotamer *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Rotamer",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_stringV, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("stringV");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (Rotamer *)new Rotamer((stringV const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Rotamer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Rotamer(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Rotamer__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_stringV, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_Rotamer__SWIG_4(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_stringV, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RotConnInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_new_Rotamer__SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = swig::asptr(argv[0], (std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > >**)(0));
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RotConnInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_new_Rotamer__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = swig::asptr(argv[0], (std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > >**)(0));
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RotConnInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    return _wrap_new_Rotamer__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_Rotamer'");
    return NULL;
}


static PyObject *_wrap_delete_Rotamer(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Rotamer",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_deepcopy(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    Rotamer *arg2 = 0 ;
    Rotamer *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_deepcopy",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("Rotamer");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        Rotamer &_result_ref = (arg1)->deepcopy((Rotamer const &)*arg2);
        result = (Rotamer *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Rotamer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_read_cnn_lines(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    stringV arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_read_cnn_lines",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        stringV * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_stringV, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("stringV");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    result = (bool)(arg1)->read_cnn_lines(arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_print_Me(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_print_Me",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((Rotamer const *)arg1)->print_Me();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_print_ordered_by_n(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_print_ordered_by_n",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((Rotamer const *)arg1)->print_ordered_by_n();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_append_to_filehandle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    ostream *arg2 = (ostream *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_append_to_filehandle",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ostream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    ((Rotamer const *)arg1)->append_to_filehandle(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_pdb_append_to_filehandle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    ostream *arg2 = (ostream *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_pdb_append_to_filehandle",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ostream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    ((Rotamer const *)arg1)->pdb_append_to_filehandle(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_append_to_ostream_connect_info(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    ostream *arg2 = (ostream *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_append_to_ostream_connect_info",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ostream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    ((Rotamer const *)arg1)->append_to_ostream_connect_info(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_printEnergies(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_printEnergies",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((Rotamer const *)arg1)->printEnergies();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_self_E_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_self_E_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->self_E = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_self_E_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_self_E_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->self_E);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_is_Original_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_is_Original_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->is_Original = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_is_Original_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_is_Original_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->is_Original);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_is_Original_flag(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_is_Original_flag",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((Rotamer const *)arg1)->get_is_Original_flag();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_set_is_Original_flag(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_set_is_Original_flag",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->set_is_Original_flag(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_same_backbone_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_same_backbone_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->same_backbone = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_same_backbone_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_same_backbone_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool) ((arg1)->same_backbone);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_library_name_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_library_name_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->library_name = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_library_name_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_library_name_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->library_name);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_bb(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    BackBone *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_bb",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (BackBone *)((Rotamer const *)arg1)->get_bb();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_BackBone, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_sc(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    SideChain *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_sc",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (SideChain *)((Rotamer const *)arg1)->get_sc();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_SideChain, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_sc_atoms(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    ScreamAtomV result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_sc_atoms",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((Rotamer const *)arg1)->get_sc_atoms();
    
    {
        resultobj = swig::from((std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_bb_atoms(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    ScreamAtomV result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_bb_atoms",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((Rotamer const *)arg1)->get_bb_atoms();
    
    {
        resultobj = swig::from((std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_getAtom(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    int arg2 ;
    SCREAM_ATOM *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_getAtom",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (SCREAM_ATOM *)(arg1)->getAtom(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_SCREAM_ATOM, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_getTheseAtoms(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    std::vector<int > arg2 ;
    ScreamAtomV result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_getTheseAtoms",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<int > * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::vector<int >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    result = (arg1)->getTheseAtoms(arg2);
    
    {
        resultobj = swig::from((std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_getAllRotamers(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    std::vector<Rotamer * > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_getAllRotamers",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getAllRotamers();
    
    {
        std::vector<Rotamer * > * resultptr;
        resultptr = new std::vector<Rotamer * >((std::vector<Rotamer * > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_fix_toggle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_fix_toggle",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->fix_toggle(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_fix_sc_toggle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_fix_sc_toggle",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->fix_sc_toggle(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_fix_bb_toggle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_fix_bb_toggle",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->fix_bb_toggle(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_number_of_atoms(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_number_of_atoms",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((Rotamer const *)arg1)->number_of_atoms();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_total_charge(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_total_charge",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((Rotamer const *)arg1)->total_charge();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_rotamer_n(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_rotamer_n",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((Rotamer const *)arg1)->get_rotamer_n();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_mult_H_n(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_mult_H_n",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((Rotamer const *)arg1)->get_mult_H_n();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_library_name(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_library_name",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->get_library_name();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_empty_lattice_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_empty_lattice_E",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((Rotamer const *)arg1)->get_empty_lattice_E();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_set_empty_lattice_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_set_empty_lattice_E",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->set_empty_lattice_E(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_empty_lattice_E_abs(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_empty_lattice_E_abs",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((Rotamer const *)arg1)->get_empty_lattice_E_abs();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_set_empty_lattice_E_abs(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_set_empty_lattice_E_abs",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->set_empty_lattice_E_abs(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_empty_lattice_energy_rank(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_empty_lattice_energy_rank",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)(arg1)->get_empty_lattice_energy_rank();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_set_empty_lattice_energy_rank(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_set_empty_lattice_energy_rank",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->set_empty_lattice_energy_rank(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_setFailedDistanceCutoff(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_setFailedDistanceCutoff",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->setFailedDistanceCutoff();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_setPassedDistanceCutoff(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_setPassedDistanceCutoff",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->setPassedDistanceCutoff();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_failedDistanceCutoff(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_failedDistanceCutoff",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)(arg1)->failedDistanceCutoff();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_sameResidueTypeAs(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    Rotamer *arg2 = (Rotamer *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_sameResidueTypeAs",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (int)(arg1)->sameResidueTypeAs(arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_preCalc_Energy_Line(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_preCalc_Energy_Line",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((Rotamer const *)arg1)->get_preCalc_Energy_Line();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_populate_preCalc_Terms(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_populate_preCalc_Terms",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    (arg1)->populate_preCalc_Terms(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_preCalc_TotE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_preCalc_TotE",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((Rotamer const *)arg1)->get_preCalc_TotE();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_preCalc_BondsE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_preCalc_BondsE",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((Rotamer const *)arg1)->get_preCalc_BondsE();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_preCalc_AnglesE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_preCalc_AnglesE",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((Rotamer const *)arg1)->get_preCalc_AnglesE();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_preCalc_TorsionsE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_preCalc_TorsionsE",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((Rotamer const *)arg1)->get_preCalc_TorsionsE();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_preCalc_InversionsE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_preCalc_InversionsE",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((Rotamer const *)arg1)->get_preCalc_InversionsE();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_preCalc_CoulombE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_preCalc_CoulombE",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((Rotamer const *)arg1)->get_preCalc_CoulombE();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_preCalc_vdwE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_preCalc_vdwE",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((Rotamer const *)arg1)->get_preCalc_vdwE();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_preCalc_HBondE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_preCalc_HBondE",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((Rotamer const *)arg1)->get_preCalc_HBondE();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_preCalc_SolvE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_preCalc_SolvE",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((Rotamer const *)arg1)->get_preCalc_SolvE();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_set_preCalc_TotE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_set_preCalc_TotE",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->set_preCalc_TotE(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_set_preCalc_BondsE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_set_preCalc_BondsE",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->set_preCalc_BondsE(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_set_preCalc_AnglesE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_set_preCalc_AnglesE",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->set_preCalc_AnglesE(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_set_preCalc_TorsionsE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_set_preCalc_TorsionsE",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->set_preCalc_TorsionsE(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_set_preCalc_InversionsE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_set_preCalc_InversionsE",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->set_preCalc_InversionsE(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_set_preCalc_CoulombE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_set_preCalc_CoulombE",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->set_preCalc_CoulombE(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_set_preCalc_vdwE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_set_preCalc_vdwE",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->set_preCalc_vdwE(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_set_preCalc_HBondE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_set_preCalc_HBondE",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->set_preCalc_HBondE(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_set_preCalc_SolvE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_set_preCalc_SolvE",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->set_preCalc_SolvE(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_rotlib_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_rotlib_E",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((Rotamer const *)arg1)->get_rotlib_E();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_sc_valence_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_sc_valence_E",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((Rotamer const *)arg1)->get_sc_valence_E();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_sc_coulomb_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_sc_coulomb_E",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((Rotamer const *)arg1)->get_sc_coulomb_E();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_sc_vdw_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_sc_vdw_E",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((Rotamer const *)arg1)->get_sc_vdw_E();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_sc_hb_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_sc_hb_E",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((Rotamer const *)arg1)->get_sc_hb_E();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_sc_total_nb_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_sc_total_nb_E",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((Rotamer const *)arg1)->get_sc_total_nb_E();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_sc_solvation_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_sc_solvation_E",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((Rotamer const *)arg1)->get_sc_solvation_E();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_get_sc_total_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_get_sc_total_E",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((Rotamer const *)arg1)->get_sc_total_E();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_set_rotamer_n(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_set_rotamer_n",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->set_rotamer_n(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_set_rotlib_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_set_rotlib_E",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->set_rotlib_E(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_set_sc_valence_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_set_sc_valence_E",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->set_sc_valence_E(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_set_sc_coulomb_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_set_sc_coulomb_E",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->set_sc_coulomb_E(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_set_sc_vdw_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_set_sc_vdw_E",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->set_sc_vdw_E(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_set_sc_hb_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_set_sc_hb_E",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->set_sc_hb_E(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_set_sc_total_nb_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_set_sc_total_nb_E",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->set_sc_total_nb_E(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_set_sc_solvation_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_set_sc_solvation_E",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->set_sc_solvation_E(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_set_sc_total_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_set_sc_total_E",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->set_sc_total_E(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_match_bb(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    Rotamer *arg2 = (Rotamer *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_match_bb",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->match_bb((Rotamer const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_match_CB(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    Rotamer *arg2 = (Rotamer *) 0 ;
    SCREAM_ATOM *arg3 = (SCREAM_ATOM *) (SCREAM_ATOM *)0 ;
    double arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Rotamer_match_CB",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    (arg1)->match_CB((Rotamer const *)arg2,(SCREAM_ATOM const *)arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_assign_atom_fftype(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_assign_atom_fftype",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->assign_atom_fftype();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_assign_charges(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_assign_charges",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    (arg1)->assign_charges(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_assign_lone_pair(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_assign_lone_pair",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->assign_lone_pair();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_declaredInRotlibScope(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotamer_declaredInRotlibScope",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->declaredInRotlibScope();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotamer_setDeclaredInRotlibScope(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotamer_setDeclaredInRotlibScope",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setDeclaredInRotlibScope(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Rotamer_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_Rotamer, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_AARotamer__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_AARotamer")) goto fail;
    result = (AARotamer *)new AARotamer();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_AARotamer, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_AARotamer__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamAtomV *arg1 = 0 ;
    AARotamer *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_AARotamer",&obj0)) goto fail;
    {
        std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > > *ptr = (std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("ScreamAtomV", obj0);
        } else if (!ptr) {
            SWIG_null_ref("ScreamAtomV");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (AARotamer *)new AARotamer((std::vector<SCREAM_ATOM * > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_AARotamer, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_AARotamer__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    stringV *arg1 = 0 ;
    AARotamer *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_AARotamer",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_stringV, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("stringV");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (AARotamer *)new AARotamer((stringV const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_AARotamer, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_AARotamer__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AABackBone *arg1 = (AABackBone *) (AABackBone *)0 ;
    AASideChain *arg2 = (AASideChain *) (AASideChain *)0 ;
    AARotamer *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_AARotamer",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AABackBone, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_AASideChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (AARotamer *)new AARotamer(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_AARotamer, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_AARotamer(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_AARotamer__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_stringV, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_AARotamer__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > >**)(0));
        if (_v) {
            return _wrap_new_AARotamer__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_AABackBone, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_AASideChain, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_new_AARotamer__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_AARotamer'");
    return NULL;
}


static PyObject *_wrap_delete_AARotamer(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_AARotamer",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_deepcopy(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    AARotamer *arg2 = 0 ;
    AARotamer *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AARotamer_deepcopy",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("AARotamer");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        AARotamer &_result_ref = (arg1)->deepcopy((AARotamer const &)*arg2);
        result = (AARotamer *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_AARotamer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_get_resName(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AARotamer_get_resName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((AARotamer const *)arg1)->get_resName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_set_resName(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AARotamer_set_resName",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    (arg1)->set_resName(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_initRotamerAtomList(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    std::vector<std::string > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AARotamer_initRotamerAtomList",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<std::string >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->initRotamerAtomList((std::vector<std::string > const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_calc_PHI(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AARotamer_calc_PHI",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->calc_PHI();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_calc_PSI(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AARotamer_calc_PSI",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->calc_PSI();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_get_PHI(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AARotamer_get_PHI",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->get_PHI();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_get_PSI(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AARotamer_get_PSI",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->get_PSI();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_chi1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AARotamer_chi1",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->chi1();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_chi2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AARotamer_chi2",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->chi2();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_chi3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AARotamer_chi3",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->chi3();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_chi4(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AARotamer_chi4",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->chi4();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_chi5(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AARotamer_chi5",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->chi5();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_match_bb(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    Rotamer *arg2 = (Rotamer *) (Rotamer *)0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AARotamer_match_bb",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->match_bb((Rotamer const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_match_CB(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    Rotamer *arg2 = (Rotamer *) 0 ;
    SCREAM_ATOM *arg3 = (SCREAM_ATOM *) (SCREAM_ATOM *)0 ;
    double arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:AARotamer_match_CB",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    (arg1)->match_CB((Rotamer const *)arg2,(SCREAM_ATOM const *)arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_create_CB(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    std::vector<double > *arg2 = 0 ;
    SCREAM_ATOM *arg3 = (SCREAM_ATOM *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:AARotamer_create_CB",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<double >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    (arg1)->create_CB(*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_assign_atom_fftype(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AARotamer_assign_atom_fftype",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->assign_atom_fftype();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_assign_charges__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    std::string arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:AARotamer_assign_charges",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->assign_charges(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_assign_charges__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AARotamer_assign_charges",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    (arg1)->assign_charges(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_assign_charges(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_AARotamer, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                return _wrap_AARotamer_assign_charges__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_AARotamer, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_AARotamer_assign_charges__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'AARotamer_assign_charges'");
    return NULL;
}


static PyObject *_wrap_AARotamer_assign_lone_pair(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AARotamer_assign_lone_pair",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->assign_lone_pair();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_calc_C_i_minus_one(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    ScreamVector result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AARotamer_calc_C_i_minus_one",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->calc_C_i_minus_one();
    
    {
        ScreamVector * resultptr;
        resultptr = new ScreamVector((ScreamVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_ScreamVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_center_CA(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AARotamer_center_CA",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->center_CA();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_append_to_filehandle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    ostream *arg2 = (ostream *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AARotamer_append_to_filehandle",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ostream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    ((AARotamer const *)arg1)->append_to_filehandle(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_pdb_append_to_filehandle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    ostream *arg2 = (ostream *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AARotamer_pdb_append_to_filehandle",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ostream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    ((AARotamer const *)arg1)->pdb_append_to_filehandle(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_append_to_ostream_connect_info(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    ostream *arg2 = (ostream *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AARotamer_append_to_ostream_connect_info",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ostream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    ((AARotamer const *)arg1)->append_to_ostream_connect_info(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_print_Me(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AARotamer_print_Me",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((AARotamer const *)arg1)->print_Me();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_print_ordered_by_n(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AARotamer_print_ordered_by_n",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((AARotamer const *)arg1)->print_ordered_by_n();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_get_bb(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    AABackBone *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AARotamer_get_bb",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (AABackBone *)((AARotamer const *)arg1)->get_bb();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_AABackBone, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_get_sc(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    AASideChain *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AARotamer_get_sc",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (AASideChain *)((AARotamer const *)arg1)->get_sc();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_AASideChain, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_PHI_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AARotamer_PHI_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->PHI = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_PHI_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AARotamer_PHI_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->PHI);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_PSI_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AARotamer_PSI_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->PSI = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_PSI_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AARotamer_PSI_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->PSI);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_resName_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AARotamer_resName_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->resName = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_resName_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AARotamer_resName_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->resName);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer_private_chi(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    int arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AARotamer_private_chi",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)(arg1)->private_chi(arg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotamer__determine_and_fix_GLY_sidechain_HCA_issue(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer *arg1 = (AARotamer *) 0 ;
    ScreamAtomV *arg2 = 0 ;
    ScreamAtomV result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AARotamer__determine_and_fix_GLY_sidechain_HCA_issue",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTSCREAM_ATOM_p_std__allocatorTSCREAM_ATOM_p_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("ScreamAtomV");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (arg1)->_determine_and_fix_GLY_sidechain_HCA_issue(*arg2);
    
    {
        resultobj = swig::from((std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * AARotamer_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_AARotamer, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Protein__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Protein")) goto fail;
    result = (Protein *)new Protein();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Protein, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Protein__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamAtomV *arg1 = (ScreamAtomV *) 0 ;
    Protein *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Protein",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTSCREAM_ATOM_p_std__allocatorTSCREAM_ATOM_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (Protein *)new Protein(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Protein, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Protein(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Protein__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTSCREAM_ATOM_p_std__allocatorTSCREAM_ATOM_p_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_Protein__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_Protein'");
    return NULL;
}


static PyObject *_wrap_delete_Protein(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Protein",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_get_AAChain(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    std::string arg2 ;
    AAChain *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Protein_get_AAChain",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (AAChain *)((Protein const *)arg1)->get_AAChain(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_AAChain, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_get_Ligand(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    Ligand *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Protein_get_Ligand",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (Ligand *)((Protein const *)arg1)->get_Ligand();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Ligand, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_get_Component_with_ChainName(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    std::string arg2 ;
    ProteinComponent *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Protein_get_Component_with_ChainName",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (ProteinComponent *)((Protein const *)arg1)->get_Component_with_ChainName(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_ProteinComponent, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_get_res_type(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    std::string arg2 ;
    int arg3 ;
    std::string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Protein_get_res_type",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = ((Protein const *)arg1)->get_res_type(arg2,arg3);
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_get_sc_atoms__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    std::string arg2 ;
    int arg3 ;
    ScreamAtomV result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Protein_get_sc_atoms",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = ((Protein const *)arg1)->get_sc_atoms(arg2,arg3);
    
    {
        resultobj = swig::from((std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_get_sc_atoms__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    MutInfo arg2 ;
    ScreamAtomV result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Protein_get_sc_atoms",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        MutInfo * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    result = ((Protein const *)arg1)->get_sc_atoms(arg2);
    
    {
        resultobj = swig::from((std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_get_sc_atoms(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Protein, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Protein_get_sc_atoms__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Protein, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_Protein_get_sc_atoms__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Protein_get_sc_atoms'");
    return NULL;
}


static PyObject *_wrap_Protein_get_variable_atoms(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    RotConnInfo *arg2 = (RotConnInfo *) 0 ;
    ScreamAtomV result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Protein_get_variable_atoms",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = ((Protein const *)arg1)->get_variable_atoms(arg2);
    
    {
        resultobj = swig::from((std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_get_visible_in_EL_mutInfo_atoms(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    MutInfo *arg2 = 0 ;
    RotConnInfo *arg3 = (RotConnInfo *) 0 ;
    ScreamAtomV result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Protein_get_visible_in_EL_mutInfo_atoms",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    result = ((Protein const *)arg1)->get_visible_in_EL_mutInfo_atoms(*arg2,arg3);
    
    {
        resultobj = swig::from((std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_getAtomList__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    ScreamAtomV *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Protein_getAtomList",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        ScreamAtomV &_result_ref = (arg1)->getAtomList();
        result = (ScreamAtomV *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTSCREAM_ATOM_p_std__allocatorTSCREAM_ATOM_p_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_getAtomList__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    ScreamAtomV *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Protein_getAtomList",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        ScreamAtomV const &_result_ref = ((Protein const *)arg1)->getAtomList();
        result = (ScreamAtomV *) &_result_ref;
    }
    
    {
        resultobj = swig::from((std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > >)(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_getAtomList(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Protein, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Protein_getAtomList__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Protein, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Protein_getAtomList__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Protein_getAtomList'");
    return NULL;
}


static PyObject *_wrap_Protein_getNewAtomList(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    ScreamAtomV result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Protein_getNewAtomList",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getNewAtomList();
    
    {
        resultobj = swig::from((std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_getAtom__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    int arg2 ;
    SCREAM_ATOM *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Protein_getAtom",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (SCREAM_ATOM *)((Protein const *)arg1)->getAtom(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_SCREAM_ATOM, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_getAtom__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    MutInfo arg2 ;
    std::string arg3 ;
    SCREAM_ATOM *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Protein_getAtom",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        MutInfo * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (SCREAM_ATOM *)((Protein const *)arg1)->getAtom(arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_SCREAM_ATOM, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_getAtom(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Protein, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_Protein_getAtom__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Protein, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
                if (_v) {
                    return _wrap_Protein_getAtom__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Protein_getAtom'");
    return NULL;
}


static PyObject *_wrap_Protein_getTheseAtoms(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    std::vector<int > *arg2 = 0 ;
    ScreamAtomV result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Protein_getTheseAtoms",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<int >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((Protein const *)arg1)->getTheseAtoms(*arg2);
    
    {
        resultobj = swig::from((std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_addHydrogens(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Protein_addHydrogens",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->addHydrogens();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_addConnectivity(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Protein_addConnectivity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->addConnectivity();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_assignFFType__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Protein_assignFFType",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->assignFFType();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_assignFFType__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    SCREAM_RTF *arg2 = (SCREAM_RTF *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Protein_assignFFType",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_SCREAM_RTF, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->assignFFType(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_assignFFType(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Protein, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Protein_assignFFType__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Protein, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_SCREAM_RTF, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_Protein_assignFFType__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Protein_assignFFType'");
    return NULL;
}


static PyObject *_wrap_Protein_residuesAroundAtomN(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    std::vector<int > arg2 ;
    double arg3 ;
    std::string arg4 ;
    std::vector<MutInfo > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Protein_residuesAroundAtomN",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<int > * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::vector<int >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj3, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = ((Protein const *)arg1)->residuesAroundAtomN(arg2,arg3,arg4);
    
    {
        std::vector<MutInfo > * resultptr;
        resultptr = new std::vector<MutInfo >((std::vector<MutInfo > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_residuesAroundResidue(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    std::vector<MutInfo > arg2 ;
    double arg3 ;
    std::string arg4 ;
    std::vector<MutInfo > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Protein_residuesAroundResidue",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<MutInfo > * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::vector<MutInfo >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj3, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = ((Protein const *)arg1)->residuesAroundResidue(arg2,arg3,arg4);
    
    {
        std::vector<MutInfo > * resultptr;
        resultptr = new std::vector<MutInfo >((std::vector<MutInfo > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_residuesAroundChain(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    std::vector<std::string > arg2 ;
    double arg3 ;
    std::string arg4 ;
    std::vector<MutInfo > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Protein_residuesAroundChain",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<std::string > * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::vector<std::string >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj3, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = ((Protein const *)arg1)->residuesAroundChain(arg2,arg3,arg4);
    
    {
        std::vector<MutInfo > * resultptr;
        resultptr = new std::vector<MutInfo >((std::vector<MutInfo > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_residuesAroundAtom(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    ScreamAtomV *arg2 = 0 ;
    double arg3 ;
    std::string arg4 ;
    std::vector<MutInfo > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Protein_residuesAroundAtom",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTSCREAM_ATOM_p_std__allocatorTSCREAM_ATOM_p_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("ScreamAtomV");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj3, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = ((Protein const *)arg1)->residuesAroundAtom(*arg2,arg3,arg4);
    
    {
        std::vector<MutInfo > * resultptr;
        resultptr = new std::vector<MutInfo >((std::vector<MutInfo > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_totalComponents(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Protein_totalComponents",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((Protein const *)arg1)->totalComponents();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_mutationDone(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Protein_mutationDone",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((Protein const *)arg1)->mutationDone();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_setMutInfoStrainEnergy(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    MutInfo arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Protein_setMutInfoStrainEnergy",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        MutInfo * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->setMutInfoStrainEnergy(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_getMutInfoStrainEnergy(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    MutInfo arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Protein_getMutInfoStrainEnergy",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        MutInfo * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    result = (double)(arg1)->getMutInfoStrainEnergy(arg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_printAtomFlagStates(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Protein_printAtomFlagStates",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->printAtomFlagStates();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_getPlacementMethod(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Protein_getPlacementMethod",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getPlacementMethod();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_setPlacementMethod(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Protein_setPlacementMethod",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    (arg1)->setPlacementMethod(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_getOffBisectorAngle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Protein_getOffBisectorAngle",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->getOffBisectorAngle();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_getOffPlaneAngle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Protein_getOffPlaneAngle",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->getOffPlaneAngle();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_getBondLength(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Protein_getBondLength",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->getBondLength();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_getRotamerMatchVectorLamdba(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Protein_getRotamerMatchVectorLamdba",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->getRotamerMatchVectorLamdba();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_setOffBisectorAngle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Protein_setOffBisectorAngle",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setOffBisectorAngle(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_setOffPlaneAngle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Protein_setOffPlaneAngle",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setOffPlaneAngle(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_setBondLength(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Protein_setBondLength",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setBondLength(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_setRotamerMatchVectorLamdba(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Protein_setRotamerMatchVectorLamdba",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setRotamerMatchVectorLamdba(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_ntrlRotamerPlacement(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    std::string arg2 ;
    int arg3 ;
    AARotamer *arg4 = (AARotamer *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Protein_ntrlRotamerPlacement",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    result = (int)(arg1)->ntrlRotamerPlacement(arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_getAARotamer(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    std::string arg2 ;
    int arg3 ;
    AARotamer *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Protein_getAARotamer",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (AARotamer *)(arg1)->getAARotamer(arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_AARotamer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_conformerPlacement(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    Rotamer *arg2 = (Rotamer *) 0 ;
    RotConnInfo *arg3 = (RotConnInfo *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Protein_conformerPlacement",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    result = (int)(arg1)->conformerPlacement(arg2,arg3);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_conformerExtraction(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    RotConnInfo *arg2 = (RotConnInfo *) 0 ;
    Rotamer *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Protein_conformerExtraction",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (Rotamer *)(arg1)->conformerExtraction(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Rotamer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_rotamerClusterPlacement(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    Rotamer *arg2 = (Rotamer *) 0 ;
    MutInfo *arg3 = (MutInfo *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Protein_rotamerClusterPlacement",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    result = (int)(arg1)->rotamerClusterPlacement(arg2,arg3);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_setRotamerClusterEmptyLatticeEnergy(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    Rotamer *arg2 = (Rotamer *) 0 ;
    MutInfo *arg3 = (MutInfo *) 0 ;
    double arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Protein_setRotamerClusterEmptyLatticeEnergy",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    (arg1)->setRotamerClusterEmptyLatticeEnergy(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_getRotamerClusterEmptyLatticeEnergy(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    Rotamer *arg2 = (Rotamer *) 0 ;
    MutInfo *arg3 = (MutInfo *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Protein_getRotamerClusterEmptyLatticeEnergy",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    result = (double)(arg1)->getRotamerClusterEmptyLatticeEnergy(arg2,arg3);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_mutation(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    std::string arg2 ;
    int arg3 ;
    std::string arg4 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Protein_mutation",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj3, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (int)(arg1)->mutation(arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_setPreCalcEnergy(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    std::string arg2 ;
    int arg3 ;
    double arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Protein_setPreCalcEnergy",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    (arg1)->setPreCalcEnergy(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_getPreCalcEnergy(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    std::string arg2 ;
    int arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Protein_getPreCalcEnergy",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (double)((Protein const *)arg1)->getPreCalcEnergy(arg2,arg3);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_setEmptyLatticeEnergy(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    std::string arg2 ;
    int arg3 ;
    double arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Protein_setEmptyLatticeEnergy",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    (arg1)->setEmptyLatticeEnergy(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_getEmptyLatticeEnergy(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    std::string arg2 ;
    int arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Protein_getEmptyLatticeEnergy",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (double)((Protein const *)arg1)->getEmptyLatticeEnergy(arg2,arg3);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_setSideChainLibraryName(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    std::string arg2 ;
    int arg3 ;
    std::string arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Protein_setSideChainLibraryName",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj3, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    (arg1)->setSideChainLibraryName(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_setProteinLibraryName(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Protein_setProteinLibraryName",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    (arg1)->setProteinLibraryName(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_resetFlags(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Protein_resetFlags",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->resetFlags();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_getNewMapping(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    std::vector<int > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Protein_getNewMapping",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((Protein const *)arg1)->getNewMapping();
    
    {
        std::vector<int > * resultptr;
        resultptr = new std::vector<int >((std::vector<int > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_sc_clash__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    std::string arg2 ;
    int arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Protein_sc_clash",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (double)((Protein const *)arg1)->sc_clash(arg2,arg3);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_sc_clash__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    std::string arg2 ;
    int arg3 ;
    ScreamAtomV *arg4 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Protein_sc_clash",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_std__vectorTSCREAM_ATOM_p_std__allocatorTSCREAM_ATOM_p_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("ScreamAtomV");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (double)((Protein const *)arg1)->sc_clash(arg2,arg3,*arg4);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_sc_clash(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Protein, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_Protein_sc_clash__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Protein, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_std__vectorTSCREAM_ATOM_p_std__allocatorTSCREAM_ATOM_p_t_t, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_Protein_sc_clash__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Protein_sc_clash'");
    return NULL;
}


static PyObject *_wrap_Protein_conformer_clash__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    RotConnInfo *arg2 = (RotConnInfo *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Protein_conformer_clash",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (double)((Protein const *)arg1)->conformer_clash(arg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_conformer_clash__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    RotConnInfo *arg2 = (RotConnInfo *) 0 ;
    ScreamAtomV *arg3 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Protein_conformer_clash",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTSCREAM_ATOM_p_std__allocatorTSCREAM_ATOM_p_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("ScreamAtomV");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (double)((Protein const *)arg1)->conformer_clash(arg2,*arg3);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_conformer_clash(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Protein, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RotConnInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_Protein_conformer_clash__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Protein, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_RotConnInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_std__vectorTSCREAM_ATOM_p_std__allocatorTSCREAM_ATOM_p_t_t, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_Protein_conformer_clash__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Protein_conformer_clash'");
    return NULL;
}


static PyObject *_wrap_Protein_sc_CRMS(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    std::string arg2 ;
    int arg3 ;
    Protein *arg4 = (Protein *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Protein_sc_CRMS",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    result = (double)((Protein const *)arg1)->sc_CRMS(arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_conformer_CRMS(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    Protein *arg2 = (Protein *) 0 ;
    RotConnInfo *arg3 = (RotConnInfo *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Protein_conformer_CRMS",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    result = (double)((Protein const *)arg1)->conformer_CRMS(arg2,arg3);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_max_atom_dist_on_SC(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    std::string arg2 ;
    int arg3 ;
    Protein *arg4 = (Protein *) 0 ;
    std::pair<double,std::string > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Protein_max_atom_dist_on_SC",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    result = ((Protein const *)arg1)->max_atom_dist_on_SC(arg2,arg3,arg4);
    
    {
        std::pair<double,std::string > * resultptr;
        resultptr = new std::pair<double,std::string >((std::pair<double,std::string > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__pairTdouble_std__string_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_sc_atom_CRMS(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    int arg2 ;
    Protein *arg3 = (Protein *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Protein_sc_atom_CRMS",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    result = (double)((Protein const *)arg1)->sc_atom_CRMS(arg2,arg3);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_fix_entire_atom_list_ordering(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Protein_fix_entire_atom_list_ordering",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->fix_entire_atom_list_ordering();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_fix_toggle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Protein_fix_toggle",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->fix_toggle(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_fix_sc_toggle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    bool arg2 ;
    int arg3 ;
    std::string arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Protein_fix_sc_toggle",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj3, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    (arg1)->fix_sc_toggle(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_append_to_filehandle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    ostream *arg2 = (ostream *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Protein_append_to_filehandle",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ostream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    ((Protein const *)arg1)->append_to_filehandle(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_pdb_append_to_filehandle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    ostream *arg2 = (ostream *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Protein_pdb_append_to_filehandle",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ostream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    ((Protein const *)arg1)->pdb_append_to_filehandle(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_print_bgf_file(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    ostream *arg2 = (ostream *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Protein_print_bgf_file",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ostream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    ((Protein const *)arg1)->print_bgf_file(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_print_Me(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Protein_print_Me",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((Protein const *)arg1)->print_Me();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Protein_print_ordered_by_n(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Protein_print_ordered_by_n",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((Protein const *)arg1)->print_ordered_by_n();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Protein_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_Protein, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Rotlib__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotlib *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Rotlib")) goto fail;
    result = (Rotlib *)new Rotlib();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Rotlib, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Rotlib__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::string arg1 ;
    Rotlib *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Rotlib",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (Rotlib *)new Rotlib(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Rotlib, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Rotlib__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::string arg1 ;
    std::string arg2 ;
    Rotlib *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_Rotlib",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (Rotlib *)new Rotlib(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Rotlib, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Rotlib(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Rotlib__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_Rotlib__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                return _wrap_new_Rotlib__SWIG_2(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_Rotlib'");
    return NULL;
}


static PyObject *_wrap_delete_Rotlib(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotlib *arg1 = (Rotlib *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Rotlib",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotlib_readConnectivityFile(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotlib *arg1 = (Rotlib *) 0 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotlib_readConnectivityFile",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    (arg1)->readConnectivityFile(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotlib_readRotamerLibrary(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotlib *arg1 = (Rotlib *) 0 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotlib_readRotamerLibrary",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    (arg1)->readRotamerLibrary(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotlib_get_library_name(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotlib *arg1 = (Rotlib *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotlib_get_library_name",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->get_library_name();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotlib_getRotConnInfo(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotlib *arg1 = (Rotlib *) 0 ;
    RotConnInfo *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotlib_getRotConnInfo",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RotConnInfo *)(arg1)->getRotConnInfo();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RotConnInfo, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotlib_get_next_rot(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotlib *arg1 = (Rotlib *) 0 ;
    Rotamer *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotlib_get_next_rot",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (Rotamer *)(arg1)->get_next_rot();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Rotamer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotlib_get_current_rot(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotlib *arg1 = (Rotlib *) 0 ;
    Rotamer *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotlib_get_current_rot",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (Rotamer *)(arg1)->get_current_rot();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Rotamer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotlib_get_next_rot_with_empty_lattice_E_below(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotlib *arg1 = (Rotlib *) 0 ;
    double arg2 ;
    Rotamer *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotlib_get_next_rot_with_empty_lattice_E_below",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (Rotamer *)(arg1)->get_next_rot_with_empty_lattice_E_below(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Rotamer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotlib_get_empty_lattice_E_rot(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotlib *arg1 = (Rotlib *) 0 ;
    int arg2 ;
    Rotamer *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotlib_get_empty_lattice_E_rot",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (Rotamer *)(arg1)->get_empty_lattice_E_rot(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Rotamer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotlib_get_empty_lattice_E_rot_after_sorted_by_empty_lattice_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotlib *arg1 = (Rotlib *) 0 ;
    int arg2 ;
    Rotamer *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotlib_get_empty_lattice_E_rot_after_sorted_by_empty_lattice_E",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (Rotamer *)(arg1)->get_empty_lattice_E_rot_after_sorted_by_empty_lattice_E(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Rotamer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotlib_reset_pstn(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotlib *arg1 = (Rotlib *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotlib_reset_pstn",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->reset_pstn();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotlib_size(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotlib *arg1 = (Rotlib *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotlib_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)(arg1)->size();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotlib_n_rotamers_below_empty_lattice_energy(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotlib *arg1 = (Rotlib *) 0 ;
    double arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotlib_n_rotamers_below_empty_lattice_energy",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (int)(arg1)->n_rotamers_below_empty_lattice_energy(arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotlib_add_rotamer(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotlib *arg1 = (Rotlib *) 0 ;
    Rotamer *arg2 = (Rotamer *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotlib_add_rotamer",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->add_rotamer(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotlib_new_rotamer(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotlib *arg1 = (Rotlib *) 0 ;
    Rotamer *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotlib_new_rotamer",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (Rotamer *)(arg1)->new_rotamer();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Rotamer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotlib_new_rotamer_cluster(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotlib *arg1 = (Rotlib *) 0 ;
    RotamerCluster *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotlib_new_rotamer_cluster",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RotamerCluster *)(arg1)->new_rotamer_cluster();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RotamerCluster, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotlib_print_Me(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotlib *arg1 = (Rotlib *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotlib_print_Me",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->print_Me();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotlib_print_to_file(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotlib *arg1 = (Rotlib *) 0 ;
    ofstream *arg2 = (ofstream *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Rotlib_print_to_file",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ofstream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->print_to_file(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotlib_sort_by_rotlib_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotlib *arg1 = (Rotlib *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotlib_sort_by_rotlib_E",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->sort_by_rotlib_E();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotlib_sort_by_self_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotlib *arg1 = (Rotlib *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotlib_sort_by_self_E",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->sort_by_self_E();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotlib_sort_by_empty_lattice_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotlib *arg1 = (Rotlib *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotlib_sort_by_empty_lattice_E",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->sort_by_empty_lattice_E();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Rotlib_get_best_preCalc_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotlib *arg1 = (Rotlib *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Rotlib_get_best_preCalc_E",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->get_best_preCalc_E();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Rotlib_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_Rotlib, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_AARotlib(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotlib *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_AARotlib")) goto fail;
    result = (AARotlib *)new AARotlib();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_AARotlib, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_AARotlib(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotlib *arg1 = (AARotlib *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_AARotlib",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotlib_get_next_rot(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotlib *arg1 = (AARotlib *) 0 ;
    AARotamer *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AARotlib_get_next_rot",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (AARotamer *)(arg1)->get_next_rot();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_AARotamer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotlib_get_current_rot(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotlib *arg1 = (AARotlib *) 0 ;
    AARotamer *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AARotlib_get_current_rot",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (AARotamer *)(arg1)->get_current_rot();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_AARotamer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotlib_get_rot(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotlib *arg1 = (AARotlib *) 0 ;
    int arg2 ;
    AARotamer *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AARotlib_get_rot",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (AARotamer *)(arg1)->get_rot(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_AARotamer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotlib_reset_rot_pstn(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotlib *arg1 = (AARotlib *) 0 ;
    AARotamer *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AARotlib_reset_rot_pstn",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (AARotamer *)(arg1)->reset_rot_pstn();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_AARotamer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotlib_set_rot_pstn(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotlib *arg1 = (AARotlib *) 0 ;
    int arg2 ;
    AARotamer *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AARotlib_set_rot_pstn",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (AARotamer *)(arg1)->set_rot_pstn(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_AARotamer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotlib_get_next_rot_with_empty_lattice_E_below(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotlib *arg1 = (AARotlib *) 0 ;
    double arg2 ;
    AARotamer *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AARotlib_get_next_rot_with_empty_lattice_E_below",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (AARotamer *)(arg1)->get_next_rot_with_empty_lattice_E_below(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_AARotamer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotlib_get_empty_lattice_E_rot(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotlib *arg1 = (AARotlib *) 0 ;
    int arg2 ;
    AARotamer *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AARotlib_get_empty_lattice_E_rot",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (AARotamer *)(arg1)->get_empty_lattice_E_rot(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_AARotamer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotlib_center_CA(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotlib *arg1 = (AARotlib *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AARotlib_center_CA",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->center_CA();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotlib_calc_all_PHI(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotlib *arg1 = (AARotlib *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AARotlib_calc_all_PHI",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->calc_all_PHI();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotlib_calc_all_PSI(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotlib *arg1 = (AARotlib *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AARotlib_calc_all_PSI",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->calc_all_PSI();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotlib_resName_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotlib *arg1 = (AARotlib *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AARotlib_resName_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->resName = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AARotlib_resName_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotlib *arg1 = (AARotlib *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AARotlib_resName_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AARotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->resName);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * AARotlib_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_AARotlib, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_NtrlAARotlib__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    NtrlAARotlib *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_NtrlAARotlib")) goto fail;
    result = (NtrlAARotlib *)new NtrlAARotlib();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_NtrlAARotlib, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_NtrlAARotlib__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::string arg1 ;
    NtrlAARotlib *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_NtrlAARotlib",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (NtrlAARotlib *)new NtrlAARotlib(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_NtrlAARotlib, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_NtrlAARotlib__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::string arg1 ;
    std::string arg2 ;
    NtrlAARotlib *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_NtrlAARotlib",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (NtrlAARotlib *)new NtrlAARotlib(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_NtrlAARotlib, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_NtrlAARotlib(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_NtrlAARotlib__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_NtrlAARotlib__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                return _wrap_new_NtrlAARotlib__SWIG_2(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_NtrlAARotlib'");
    return NULL;
}


static PyObject *_wrap_NtrlAARotlib_setup_library(PyObject *, PyObject *args) {
    PyObject *resultobj;
    NtrlAARotlib *arg1 = (NtrlAARotlib *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:NtrlAARotlib_setup_library",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_NtrlAARotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->setup_library();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_NtrlAARotlib(PyObject *, PyObject *args) {
    PyObject *resultobj;
    NtrlAARotlib *arg1 = (NtrlAARotlib *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_NtrlAARotlib",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_NtrlAARotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NtrlAARotlib_assign_atom_fftype(PyObject *, PyObject *args) {
    PyObject *resultobj;
    NtrlAARotlib *arg1 = (NtrlAARotlib *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:NtrlAARotlib_assign_atom_fftype",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_NtrlAARotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->assign_atom_fftype();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NtrlAARotlib_assign_charges(PyObject *, PyObject *args) {
    PyObject *resultobj;
    NtrlAARotlib *arg1 = (NtrlAARotlib *) 0 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:NtrlAARotlib_assign_charges",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_NtrlAARotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    (arg1)->assign_charges(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NtrlAARotlib_assign_lone_pair(PyObject *, PyObject *args) {
    PyObject *resultobj;
    NtrlAARotlib *arg1 = (NtrlAARotlib *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:NtrlAARotlib_assign_lone_pair",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_NtrlAARotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->assign_lone_pair();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NtrlAARotlib_append_to_filehandle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    NtrlAARotlib *arg1 = (NtrlAARotlib *) 0 ;
    ofstream *arg2 = (ofstream *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:NtrlAARotlib_append_to_filehandle",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_NtrlAARotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ofstream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->append_to_filehandle(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * NtrlAARotlib_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_NtrlAARotlib, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Multiple_NtrlAARotlib__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Multiple_NtrlAARotlib *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Multiple_NtrlAARotlib")) goto fail;
    result = (Multiple_NtrlAARotlib *)new Multiple_NtrlAARotlib();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Multiple_NtrlAARotlib, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Multiple_NtrlAARotlib__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::string arg1 ;
    int arg2 ;
    Multiple_NtrlAARotlib *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_Multiple_NtrlAARotlib",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (Multiple_NtrlAARotlib *)new Multiple_NtrlAARotlib(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Multiple_NtrlAARotlib, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Multiple_NtrlAARotlib__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::string arg1 ;
    int arg2 ;
    std::vector<std::string > arg3 ;
    Multiple_NtrlAARotlib *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_Multiple_NtrlAARotlib",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::vector<std::string > * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::vector<std::string >");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    result = (Multiple_NtrlAARotlib *)new Multiple_NtrlAARotlib(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Multiple_NtrlAARotlib, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Multiple_NtrlAARotlib(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Multiple_NtrlAARotlib__SWIG_0(self,args);
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_new_Multiple_NtrlAARotlib__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_new_Multiple_NtrlAARotlib__SWIG_2(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_Multiple_NtrlAARotlib'");
    return NULL;
}


static PyObject *_wrap_delete_Multiple_NtrlAARotlib(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Multiple_NtrlAARotlib *arg1 = (Multiple_NtrlAARotlib *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Multiple_NtrlAARotlib",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Multiple_NtrlAARotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Multiple_NtrlAARotlib_getRotConnInfo(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Multiple_NtrlAARotlib *arg1 = (Multiple_NtrlAARotlib *) 0 ;
    RotConnInfo *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Multiple_NtrlAARotlib_getRotConnInfo",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Multiple_NtrlAARotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RotConnInfo *)(arg1)->getRotConnInfo();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RotConnInfo, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Multiple_NtrlAARotlib_add_library__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Multiple_NtrlAARotlib *arg1 = (Multiple_NtrlAARotlib *) 0 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Multiple_NtrlAARotlib_add_library",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Multiple_NtrlAARotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    (arg1)->add_library(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Multiple_NtrlAARotlib_add_library__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Multiple_NtrlAARotlib *arg1 = (Multiple_NtrlAARotlib *) 0 ;
    NtrlAARotlib *arg2 = (NtrlAARotlib *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Multiple_NtrlAARotlib_add_library",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Multiple_NtrlAARotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_NtrlAARotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->add_library(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Multiple_NtrlAARotlib_add_library(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Multiple_NtrlAARotlib, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_NtrlAARotlib, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_Multiple_NtrlAARotlib_add_library__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Multiple_NtrlAARotlib, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                return _wrap_Multiple_NtrlAARotlib_add_library__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Multiple_NtrlAARotlib_add_library'");
    return NULL;
}


static PyObject * Multiple_NtrlAARotlib_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_Multiple_NtrlAARotlib, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_HIS_NtrlAARotlib__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    HIS_NtrlAARotlib *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_HIS_NtrlAARotlib")) goto fail;
    result = (HIS_NtrlAARotlib *)new HIS_NtrlAARotlib();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_HIS_NtrlAARotlib, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_HIS_NtrlAARotlib__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::string arg1 ;
    std::string arg2 ;
    std::string arg3 ;
    std::string arg4 ;
    HIS_NtrlAARotlib *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_HIS_NtrlAARotlib",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj3, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (HIS_NtrlAARotlib *)new HIS_NtrlAARotlib(arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_HIS_NtrlAARotlib, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_HIS_NtrlAARotlib(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_HIS_NtrlAARotlib__SWIG_0(self,args);
    }
    if (argc == 4) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                _v = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
                if (_v) {
                    _v = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
                    if (_v) {
                        return _wrap_new_HIS_NtrlAARotlib__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_HIS_NtrlAARotlib'");
    return NULL;
}


static PyObject *_wrap_delete_HIS_NtrlAARotlib(PyObject *, PyObject *args) {
    PyObject *resultobj;
    HIS_NtrlAARotlib *arg1 = (HIS_NtrlAARotlib *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_HIS_NtrlAARotlib",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_HIS_NtrlAARotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HIS_NtrlAARotlib_add_rotamer(PyObject *, PyObject *args) {
    PyObject *resultobj;
    HIS_NtrlAARotlib *arg1 = (HIS_NtrlAARotlib *) 0 ;
    Rotamer *arg2 = (Rotamer *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HIS_NtrlAARotlib_add_rotamer",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_HIS_NtrlAARotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->add_rotamer(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * HIS_NtrlAARotlib_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_HIS_NtrlAARotlib, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RotlibCollection(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_RotlibCollection")) goto fail;
    result = (RotlibCollection *)new RotlibCollection();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RotlibCollection, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_RotlibCollection(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RotlibCollection",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_addRotlib(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    std::string arg2 ;
    Rotlib *arg3 = (Rotlib *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:RotlibCollection_addRotlib",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_Rotlib, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    (arg1)->addRotlib(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_addClashCollection(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    ClashCollection *arg2 = (ClashCollection *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotlibCollection_addClashCollection",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ClashCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->addClashCollection(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_initEmptyLatticeDataStructures(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotlibCollection_initEmptyLatticeDataStructures",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->initEmptyLatticeDataStructures();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_initDynamicMemoryDataStructures(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotlibCollection_initDynamicMemoryDataStructures",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->initDynamicMemoryDataStructures();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_initAllocationUnderEnergyThreshold(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotlibCollection_initAllocationUnderEnergyThreshold",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->initAllocationUnderEnergyThreshold(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_getNextRotamersByELEnergy(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    ExcitedRotamers result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotlibCollection_getNextRotamersByELEnergy",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getNextRotamersByELEnergy();
    
    {
        ExcitedRotamers * resultptr;
        resultptr = new ExcitedRotamers((ExcitedRotamers &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_resetEmptyLatticeCrntPstn(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotlibCollection_resetEmptyLatticeCrntPstn",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->resetEmptyLatticeCrntPstn();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_resetTotalEnergyCrntPstn(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotlibCollection_resetTotalEnergyCrntPstn",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->resetTotalEnergyCrntPstn();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_getNextEmptyLatticeExcitationRotamers(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    ExcitedRotamers result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotlibCollection_getNextEmptyLatticeExcitationRotamers",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getNextEmptyLatticeExcitationRotamers();
    
    {
        ExcitedRotamers * resultptr;
        resultptr = new ExcitedRotamers((ExcitedRotamers &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_getNextTotalEnergyExcitationRotamers(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    ExcitedRotamers result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotlibCollection_getNextTotalEnergyExcitationRotamers",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getNextTotalEnergyExcitationRotamers();
    
    {
        ExcitedRotamers * resultptr;
        resultptr = new ExcitedRotamers((ExcitedRotamers &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_getNthEmptyLatticeExcitationRotamers(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    ExcitedRotamers result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotlibCollection_getNthEmptyLatticeExcitationRotamers",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getNthEmptyLatticeExcitationRotamers();
    
    {
        ExcitedRotamers * resultptr;
        resultptr = new ExcitedRotamers((ExcitedRotamers &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_getELExcitedRotamerFromEnumeration(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    ExcitationEnumeration_n *arg2 = 0 ;
    ExcitedRotamers result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotlibCollection_getELExcitedRotamerFromEnumeration",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTunsigned_short_unsigned_short_std__lessTunsigned_short_t_std__allocatorTstd__pairTunsigned_short_const_unsigned_short_t_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("ExcitationEnumeration_n");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (arg1)->getELExcitedRotamerFromEnumeration(*arg2);
    
    {
        ExcitedRotamers * resultptr;
        resultptr = new ExcitedRotamers((ExcitedRotamers &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_getELExcitedRotamer_nFromEnumeration_n(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    ExcitationEnumeration_n *arg2 = 0 ;
    SwigValueWrapper<std::map<unsigned short,Rotamer * > > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotlibCollection_getELExcitedRotamer_nFromEnumeration_n",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTunsigned_short_unsigned_short_std__lessTunsigned_short_t_std__allocatorTstd__pairTunsigned_short_const_unsigned_short_t_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("ExcitationEnumeration_n");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (arg1)->getELExcitedRotamer_nFromEnumeration_n(*arg2);
    
    {
        ExcitedRotamers_n * resultptr;
        resultptr = new ExcitedRotamers_n((ExcitedRotamers_n &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTunsigned_short_Rotamer_p_std__lessTunsigned_short_t_std__allocatorTstd__pairTunsigned_short_const_Rotamer_p_t_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_getELEnumerationFromExcitedRotamer(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    ExcitedRotamers *arg2 = 0 ;
    ExcitationEnumeration result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotlibCollection_getELEnumerationFromExcitedRotamer",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("ExcitedRotamers");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (arg1)->getELEnumerationFromExcitedRotamer(*arg2);
    
    {
        ExcitationEnumeration * resultptr;
        resultptr = new ExcitationEnumeration((ExcitationEnumeration &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_getELEnumeration_nFromExcitedRotamer_n(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    ExcitedRotamers_n *arg2 = 0 ;
    SwigValueWrapper<std::map<unsigned short,unsigned short > > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotlibCollection_getELEnumeration_nFromExcitedRotamer_n",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTunsigned_short_Rotamer_p_std__lessTunsigned_short_t_std__allocatorTstd__pairTunsigned_short_const_Rotamer_p_t_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("ExcitedRotamers_n");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (arg1)->getELEnumeration_nFromExcitedRotamer_n(*arg2);
    
    {
        ExcitationEnumeration_n * resultptr;
        resultptr = new ExcitationEnumeration_n((ExcitationEnumeration_n &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTunsigned_short_unsigned_short_std__lessTunsigned_short_t_std__allocatorTstd__pairTunsigned_short_const_unsigned_short_t_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection__ExcitationEnumerationToExcitationEnumeration_n(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    ExcitationEnumeration *arg2 = 0 ;
    SwigValueWrapper<std::map<unsigned short,unsigned short > > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotlibCollection__ExcitationEnumerationToExcitationEnumeration_n",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("ExcitationEnumeration");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (arg1)->_ExcitationEnumerationToExcitationEnumeration_n(*arg2);
    
    {
        ExcitationEnumeration_n * resultptr;
        resultptr = new ExcitationEnumeration_n((ExcitationEnumeration_n &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTunsigned_short_unsigned_short_std__lessTunsigned_short_t_std__allocatorTstd__pairTunsigned_short_const_unsigned_short_t_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection__ExcitedRotamers_nToExcitedRotamers(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    ExcitedRotamers_n *arg2 = 0 ;
    ExcitedRotamers result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotlibCollection__ExcitedRotamers_nToExcitedRotamers",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTunsigned_short_Rotamer_p_std__lessTunsigned_short_t_std__allocatorTstd__pairTunsigned_short_const_Rotamer_p_t_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("ExcitedRotamers_n");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (arg1)->_ExcitedRotamers_nToExcitedRotamers(*arg2);
    
    {
        ExcitedRotamers * resultptr;
        resultptr = new ExcitedRotamers((ExcitedRotamers &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_getClashCollection(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    ClashCollection *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotlibCollection_getClashCollection",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (ClashCollection *)(arg1)->getClashCollection();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_ClashCollection, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_cleanClashCollection(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotlibCollection_cleanClashCollection",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->cleanClashCollection();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_getMutInfoRotlibMap(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    SwigValueWrapper<std::map<std::string,NtrlAARotlib * > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotlibCollection_getMutInfoRotlibMap",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getMutInfoRotlibMap();
    
    {
        std::map<std::string,NtrlAARotlib * > * resultptr;
        resultptr = new std::map<std::string,NtrlAARotlib * >((std::map<std::string,NtrlAARotlib * > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTstd__string_NtrlAARotlib_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_NtrlAARotlib_p_t_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_getMutInfoRotlibDict(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    SwigValueWrapper<std::map<std::string,NtrlAARotlib * > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotlibCollection_getMutInfoRotlibDict",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getMutInfoRotlibDict();
    
    {
        std::map<std::string,NtrlAARotlib * > * resultptr;
        resultptr = new std::map<std::string,NtrlAARotlib * >((std::map<std::string,NtrlAARotlib * > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTstd__string_NtrlAARotlib_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_NtrlAARotlib_p_t_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_getNextDynamicMemoryRotamers_And_Expand(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    ExcitedRotamers result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotlibCollection_getNextDynamicMemoryRotamers_And_Expand",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getNextDynamicMemoryRotamers_And_Expand();
    
    {
        ExcitedRotamers * resultptr;
        resultptr = new ExcitedRotamers((ExcitedRotamers &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_getNextDynamicClashEliminatedRotamers_And_Expand(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    ExcitedRotamers result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotlibCollection_getNextDynamicClashEliminatedRotamers_And_Expand",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getNextDynamicClashEliminatedRotamers_And_Expand();
    
    {
        ExcitedRotamers * resultptr;
        resultptr = new ExcitedRotamers((ExcitedRotamers &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_increaseConfigurationsUnderEnergyThreshold(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotlibCollection_increaseConfigurationsUnderEnergyThreshold",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->increaseConfigurationsUnderEnergyThreshold(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_getNextUnderEnergyThresholdRotamers(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    ExcitedRotamers result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotlibCollection_getNextUnderEnergyThresholdRotamers",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getNextUnderEnergyThresholdRotamers();
    
    {
        ExcitedRotamers * resultptr;
        resultptr = new ExcitedRotamers((ExcitedRotamers &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_setExcitationEnergy(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    ExcitationEnumeration arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:RotlibCollection_setExcitationEnergy",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        ExcitationEnumeration * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("ExcitationEnumeration");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->setExcitationEnergy(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_getExcitationEnergy(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    ExcitationEnumeration arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotlibCollection_getExcitationEnergy",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        ExcitationEnumeration * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("ExcitationEnumeration");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    result = (double)(arg1)->getExcitationEnergy(arg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_printExcitationEnergyTable__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotlibCollection_printExcitationEnergyTable",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((RotlibCollection const *)arg1)->printExcitationEnergyTable();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_printEmptyLatticeLinearEnergyTable(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotlibCollection_printEmptyLatticeLinearEnergyTable",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((RotlibCollection const *)arg1)->printEmptyLatticeLinearEnergyTable();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_printExcitationEnergyTable__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotlibCollection_printExcitationEnergyTable",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    ((RotlibCollection const *)arg1)->printExcitationEnergyTable(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_printExcitationEnergyTable(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RotlibCollection, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_RotlibCollection_printExcitationEnergyTable__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RotlibCollection, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                return _wrap_RotlibCollection_printExcitationEnergyTable__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'RotlibCollection_printExcitationEnergyTable'");
    return NULL;
}


static PyObject *_wrap_RotlibCollection_printEmptyLatticeTable(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotlibCollection_printEmptyLatticeTable",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((RotlibCollection const *)arg1)->printEmptyLatticeTable();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_getInitMethod(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotlibCollection_getInitMethod",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((RotlibCollection const *)arg1)->getInitMethod();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_sizeOfSystem(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotlibCollection_sizeOfSystem",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)(arg1)->sizeOfSystem();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_getHighestAllowedRotamerE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotlibCollection_getHighestAllowedRotamerE",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->getHighestAllowedRotamerE();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_setHighestAllowedRotamerE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotlibCollection_setHighestAllowedRotamerE",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setHighestAllowedRotamerE(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_maxRotamerConfigurations_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    long double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotlibCollection_maxRotamerConfigurations_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        long double * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_long_double, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("long double");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    if (arg1) (arg1)->maxRotamerConfigurations = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_maxRotamerConfigurations_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    long double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotlibCollection_maxRotamerConfigurations_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (long double) ((arg1)->maxRotamerConfigurations);
    
    {
        long double * resultptr;
        resultptr = new long double((long double &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_long_double, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotlibCollection_cmpMaxRotamerConfigurations(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotlibCollection *arg1 = (RotlibCollection *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotlibCollection_cmpMaxRotamerConfigurations",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotlibCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (int)(arg1)->cmpMaxRotamerConfigurations(arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RotlibCollection_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RotlibCollection, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ClashCollection__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ClashCollection *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ClashCollection")) goto fail;
    result = (ClashCollection *)new ClashCollection();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_ClashCollection, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ClashCollection__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    ClashCollection *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ClashCollection",&obj0)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (ClashCollection *)new ClashCollection(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_ClashCollection, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ClashCollection(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_ClashCollection__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            return _wrap_new_ClashCollection__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_ClashCollection'");
    return NULL;
}


static PyObject *_wrap_delete_ClashCollection(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ClashCollection *arg1 = (ClashCollection *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ClashCollection",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ClashCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ClashCollection_setThresholdE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ClashCollection *arg1 = (ClashCollection *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ClashCollection_setThresholdE",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ClashCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setThresholdE(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ClashCollection_addClashPair__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ClashCollection *arg1 = (ClashCollection *) 0 ;
    MutInfoPair arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ClashCollection_addClashPair",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ClashCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        MutInfoPair * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_MutInfoPair, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("MutInfoPair");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->addClashPair(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ClashCollection_addClashPair__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ClashCollection *arg1 = (ClashCollection *) 0 ;
    MutInfo *arg2 = 0 ;
    MutInfo *arg3 = 0 ;
    double arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:ClashCollection_addClashPair",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ClashCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    (arg1)->addClashPair((MutInfo const &)*arg2,(MutInfo const &)*arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ClashCollection_addClashPair(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_ClashCollection, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfoPair, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    return _wrap_ClashCollection_addClashPair__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_ClashCollection, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_ClashCollection_addClashPair__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ClashCollection_addClashPair'");
    return NULL;
}


static PyObject *_wrap_ClashCollection_checkClash(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ClashCollection *arg1 = (ClashCollection *) 0 ;
    ExcitationEnumeration *arg2 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ClashCollection_checkClash",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ClashCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("ExcitationEnumeration");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (int)(arg1)->checkClash(*arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ClashCollection_getThresholdE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ClashCollection *arg1 = (ClashCollection *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ClashCollection_getThresholdE",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ClashCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->getThresholdE();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ClashCollection_getNumberOfClashes(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ClashCollection *arg1 = (ClashCollection *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ClashCollection_getNumberOfClashes",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ClashCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)(arg1)->getNumberOfClashes();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ClashCollection_storeCurrentRotamerConfiguration(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ClashCollection *arg1 = (ClashCollection *) 0 ;
    ExcitationEnumeration *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ClashCollection_storeCurrentRotamerConfiguration",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ClashCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("ExcitationEnumeration");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->storeCurrentRotamerConfiguration(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ClashCollection_increment_total_clashing_rotamers_eliminated(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ClashCollection *arg1 = (ClashCollection *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ClashCollection_increment_total_clashing_rotamers_eliminated",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ClashCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->increment_total_clashing_rotamers_eliminated();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ClashCollection_set_total_clashing_rotamers_eliminated(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ClashCollection *arg1 = (ClashCollection *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ClashCollection_set_total_clashing_rotamers_eliminated",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ClashCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->set_total_clashing_rotamers_eliminated(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ClashCollection_get_total_clashing_rotamers_eliminated(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ClashCollection *arg1 = (ClashCollection *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ClashCollection_get_total_clashing_rotamers_eliminated",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ClashCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)(arg1)->get_total_clashing_rotamers_eliminated();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ClashCollection_getClashList(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ClashCollection *arg1 = (ClashCollection *) 0 ;
    std::vector<MutInfoPair > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ClashCollection_getClashList",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ClashCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getClashList();
    
    {
        std::vector<MutInfoPair > * resultptr;
        resultptr = new std::vector<MutInfoPair >((std::vector<MutInfoPair > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ClashCollection_getDiscreteClashPairList(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ClashCollection *arg1 = (ClashCollection *) 0 ;
    std::vector<MutInfoPair > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ClashCollection_getDiscreteClashPairList",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ClashCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getDiscreteClashPairList();
    
    {
        std::vector<MutInfoPair > * resultptr;
        resultptr = new std::vector<MutInfoPair >((std::vector<MutInfoPair > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ClashCollection_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ClashCollection, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RotamerNeighborList__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotamerNeighborList *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_RotamerNeighborList")) goto fail;
    result = (RotamerNeighborList *)new RotamerNeighborList();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RotamerNeighborList, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RotamerNeighborList__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Protein *arg1 = (Protein *) 0 ;
    SwigValueWrapper<std::map<MutInfo,RotConnInfo * > > arg2 ;
    double arg3 ;
    RotamerNeighborList *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_RotamerNeighborList",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::map<MutInfo,RotConnInfo * > * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__mapTMutInfo_RotConnInfo_p_std__lessTMutInfo_t_std__allocatorTstd__pairTMutInfo_const_RotConnInfo_p_t_t_t, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::map<MutInfo,RotConnInfo * >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (RotamerNeighborList *)new RotamerNeighborList(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RotamerNeighborList, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RotamerNeighborList(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_RotamerNeighborList__SWIG_0(self,args);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Protein, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__mapTMutInfo_RotConnInfo_p_std__lessTMutInfo_t_std__allocatorTstd__pairTMutInfo_const_RotConnInfo_p_t_t_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    return _wrap_new_RotamerNeighborList__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_RotamerNeighborList'");
    return NULL;
}


static PyObject *_wrap_RotamerNeighborList_setCutoff(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotamerNeighborList *arg1 = (RotamerNeighborList *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotamerNeighborList_setCutoff",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotamerNeighborList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setCutoff(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerNeighborList_getCutoff(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotamerNeighborList *arg1 = (RotamerNeighborList *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotamerNeighborList_getCutoff",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotamerNeighborList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->getCutoff();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerNeighborList_setProtein(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotamerNeighborList *arg1 = (RotamerNeighborList *) 0 ;
    Protein *arg2 = (Protein *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotamerNeighborList_setProtein",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotamerNeighborList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->setProtein(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerNeighborList_getProtein(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotamerNeighborList *arg1 = (RotamerNeighborList *) 0 ;
    Protein *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotamerNeighborList_getProtein",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotamerNeighborList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (Protein *)(arg1)->getProtein();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Protein, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerNeighborList_addMutInfoRotConnInfo__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotamerNeighborList *arg1 = (RotamerNeighborList *) 0 ;
    MutInfo arg2 ;
    RotConnInfo *arg3 = (RotConnInfo *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:RotamerNeighborList_addMutInfoRotConnInfo",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotamerNeighborList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        MutInfo * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    (arg1)->addMutInfoRotConnInfo(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerNeighborList_addMutInfoRotConnInfo__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotamerNeighborList *arg1 = (RotamerNeighborList *) 0 ;
    MutInfo arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotamerNeighborList_addMutInfoRotConnInfo",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotamerNeighborList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        MutInfo * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    (arg1)->addMutInfoRotConnInfo(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerNeighborList_addMutInfoRotConnInfo(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RotamerNeighborList, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_RotamerNeighborList_addMutInfoRotConnInfo__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_RotamerNeighborList, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_RotConnInfo, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_RotamerNeighborList_addMutInfoRotConnInfo__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'RotamerNeighborList_addMutInfoRotConnInfo'");
    return NULL;
}


static PyObject *_wrap_RotamerNeighborList_initRotamerNeighborList(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotamerNeighborList *arg1 = (RotamerNeighborList *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotamerNeighborList_initRotamerNeighborList",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotamerNeighborList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->initRotamerNeighborList();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerNeighborList_returnEmptyLatticeNeighborList(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotamerNeighborList *arg1 = (RotamerNeighborList *) 0 ;
    MutInfo arg2 ;
    ScreamAtomV *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotamerNeighborList_returnEmptyLatticeNeighborList",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotamerNeighborList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        MutInfo * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        ScreamAtomV &_result_ref = (arg1)->returnEmptyLatticeNeighborList(arg2);
        result = (ScreamAtomV *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTSCREAM_ATOM_p_std__allocatorTSCREAM_ATOM_p_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_RotamerNeighborList(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotamerNeighborList *arg1 = (RotamerNeighborList *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RotamerNeighborList",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotamerNeighborList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RotamerNeighborList_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RotamerNeighborList, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RotamerCluster__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotamerCluster *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_RotamerCluster")) goto fail;
    result = (RotamerCluster *)new RotamerCluster();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RotamerCluster, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RotamerCluster__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    Rotamer *arg2 = (Rotamer *) 0 ;
    RotamerCluster *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_RotamerCluster",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (RotamerCluster *)new RotamerCluster(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RotamerCluster, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RotamerCluster(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_RotamerCluster__SWIG_0(self,args);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Rotamer, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_Rotamer, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_new_RotamerCluster__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_RotamerCluster'");
    return NULL;
}


static PyObject *_wrap_delete_RotamerCluster(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotamerCluster *arg1 = (RotamerCluster *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RotamerCluster",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotamerCluster, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerCluster_addRotamerCluster(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotamerCluster *arg1 = (RotamerCluster *) 0 ;
    Rotamer *arg2 = (Rotamer *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotamerCluster_addRotamerCluster",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotamerCluster, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->addRotamerCluster(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerCluster_getAllRotamers(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotamerCluster *arg1 = (RotamerCluster *) 0 ;
    std::vector<Rotamer * > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotamerCluster_getAllRotamers",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotamerCluster, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getAllRotamers();
    
    {
        std::vector<Rotamer * > * resultptr;
        resultptr = new std::vector<Rotamer * >((std::vector<Rotamer * > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerCluster_print_Me(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotamerCluster *arg1 = (RotamerCluster *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotamerCluster_print_Me",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotamerCluster, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((RotamerCluster const *)arg1)->print_Me();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerCluster_append_to_filehandle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotamerCluster *arg1 = (RotamerCluster *) 0 ;
    ostream *arg2 = (ostream *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotamerCluster_append_to_filehandle",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotamerCluster, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ostream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    ((RotamerCluster const *)arg1)->append_to_filehandle(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerCluster_pdb_append_to_filehandle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotamerCluster *arg1 = (RotamerCluster *) 0 ;
    ostream *arg2 = (ostream *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotamerCluster_pdb_append_to_filehandle",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotamerCluster, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ostream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    ((RotamerCluster const *)arg1)->pdb_append_to_filehandle(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerCluster_append_to_ostream_connect_info(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotamerCluster *arg1 = (RotamerCluster *) 0 ;
    ostream *arg2 = (ostream *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotamerCluster_append_to_ostream_connect_info",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotamerCluster, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ostream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    ((RotamerCluster const *)arg1)->append_to_ostream_connect_info(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerCluster_get_sc_atoms(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotamerCluster *arg1 = (RotamerCluster *) 0 ;
    ScreamAtomV result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotamerCluster_get_sc_atoms",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotamerCluster, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->get_sc_atoms();
    
    {
        resultobj = swig::from((std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerCluster_get_bb_atoms(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotamerCluster *arg1 = (RotamerCluster *) 0 ;
    ScreamAtomV result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotamerCluster_get_bb_atoms",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotamerCluster, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->get_bb_atoms();
    
    {
        resultobj = swig::from((std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RotamerCluster_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RotamerCluster, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_RotConnInfo_targetRotamerLibFile_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotConnInfo *arg1 = (RotConnInfo *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotConnInfo_targetRotamerLibFile_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->targetRotamerLibFile = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotConnInfo_targetRotamerLibFile_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotConnInfo *arg1 = (RotConnInfo *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotConnInfo_targetRotamerLibFile_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->targetRotamerLibFile);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotConnInfo_anchor_pts_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotConnInfo *arg1 = (RotConnInfo *) 0 ;
    std::vector<int > *arg2 = (std::vector<int > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotConnInfo_anchor_pts_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->anchor_pts = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotConnInfo_anchor_pts_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotConnInfo *arg1 = (RotConnInfo *) 0 ;
    std::vector<int > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotConnInfo_anchor_pts_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<int > *)& ((arg1)->anchor_pts);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotConnInfo_atoms_of_exact_match_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotConnInfo *arg1 = (RotConnInfo *) 0 ;
    std::vector<int > *arg2 = (std::vector<int > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotConnInfo_atoms_of_exact_match_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->atoms_of_exact_match = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotConnInfo_atoms_of_exact_match_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotConnInfo *arg1 = (RotConnInfo *) 0 ;
    std::vector<int > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotConnInfo_atoms_of_exact_match_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<int > *)& ((arg1)->atoms_of_exact_match);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotConnInfo_atom_n_map_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotConnInfo *arg1 = (RotConnInfo *) 0 ;
    std::map<int,int > *arg2 = (std::map<int,int > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotConnInfo_atom_n_map_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTint_int_std__lessTint_t_std__allocatorTstd__pairTint_const_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->atom_n_map = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotConnInfo_atom_n_map_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotConnInfo *arg1 = (RotConnInfo *) 0 ;
    std::map<int,int > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotConnInfo_atom_n_map_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::map<int,int > *)& ((arg1)->atom_n_map);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTint_int_std__lessTint_t_std__allocatorTstd__pairTint_const_int_t_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotConnInfo_atom_n_label_map_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotConnInfo *arg1 = (RotConnInfo *) 0 ;
    std::map<int,std::string > *arg2 = (std::map<int,std::string > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotConnInfo_atom_n_label_map_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTint_std__string_std__lessTint_t_std__allocatorTstd__pairTint_const_std__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->atom_n_label_map = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotConnInfo_atom_n_label_map_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotConnInfo *arg1 = (RotConnInfo *) 0 ;
    std::map<int,std::string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotConnInfo_atom_n_label_map_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::map<int,std::string > *)& ((arg1)->atom_n_label_map);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTint_std__string_std__lessTint_t_std__allocatorTstd__pairTint_const_std__string_t_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotConnInfo_side_chain_atoms_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotConnInfo *arg1 = (RotConnInfo *) 0 ;
    std::vector<int > *arg2 = (std::vector<int > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotConnInfo_side_chain_atoms_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->side_chain_atoms = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotConnInfo_side_chain_atoms_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotConnInfo *arg1 = (RotConnInfo *) 0 ;
    std::vector<int > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotConnInfo_side_chain_atoms_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<int > *)& ((arg1)->side_chain_atoms);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotConnInfo_atom_connectivity_info_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotConnInfo *arg1 = (RotConnInfo *) 0 ;
    std::map<int,std::vector<int > > *arg2 = (std::map<int,std::vector<int > > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotConnInfo_atom_connectivity_info_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTint_std__vectorTint_std__allocatorTint_t_t_std__lessTint_t_std__allocatorTstd__pairTint_const_std__vectorTint_std__allocatorTint_t_t_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->atom_connectivity_info = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotConnInfo_atom_connectivity_info_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotConnInfo *arg1 = (RotConnInfo *) 0 ;
    std::map<int,std::vector<int > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotConnInfo_atom_connectivity_info_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::map<int,std::vector<int > > *)& ((arg1)->atom_connectivity_info);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTint_std__vectorTint_std__allocatorTint_t_t_std__lessTint_t_std__allocatorTstd__pairTint_const_std__vectorTint_std__allocatorTint_t_t_t_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotConnInfo_connection_point_atoms_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotConnInfo *arg1 = (RotConnInfo *) 0 ;
    std::vector<int > *arg2 = (std::vector<int > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotConnInfo_connection_point_atoms_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->connection_point_atoms = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotConnInfo_connection_point_atoms_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotConnInfo *arg1 = (RotConnInfo *) 0 ;
    std::vector<int > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotConnInfo_connection_point_atoms_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<int > *)& ((arg1)->connection_point_atoms);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotConnInfo_modifyMappingInProteinAtoms(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotConnInfo *arg1 = (RotConnInfo *) 0 ;
    std::vector<int > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotConnInfo_modifyMappingInProteinAtoms",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<int >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->modifyMappingInProteinAtoms(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotConnInfo_clear(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotConnInfo *arg1 = (RotConnInfo *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotConnInfo_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RotConnInfo(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotConnInfo *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_RotConnInfo")) goto fail;
    result = (RotConnInfo *)new RotConnInfo();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RotConnInfo, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_RotConnInfo(PyObject *, PyObject *args) {
    PyObject *resultobj;
    RotConnInfo *arg1 = (RotConnInfo *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RotConnInfo",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RotConnInfo_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RotConnInfo, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_bgf_handler__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_bgf_handler")) goto fail;
    result = (bgf_handler *)new bgf_handler();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_bgf_handler, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_bgf_handler__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::string arg1 ;
    bgf_handler *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_bgf_handler",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (bgf_handler *)new bgf_handler(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_bgf_handler, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_bgf_handler__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *arg1 = 0 ;
    bgf_handler *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_bgf_handler",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("bgf_handler");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (bgf_handler *)new bgf_handler((bgf_handler const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_bgf_handler, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_bgf_handler(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_bgf_handler__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_bgf_handler, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_bgf_handler__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_bgf_handler__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_bgf_handler'");
    return NULL;
}


static PyObject *_wrap_delete_bgf_handler(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *arg1 = (bgf_handler *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_bgf_handler",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_bgf_handler_readfile__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *arg1 = (bgf_handler *) 0 ;
    std::string arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:bgf_handler_readfile",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (bool)(arg1)->readfile(arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_bgf_handler_readfile__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *arg1 = (bgf_handler *) 0 ;
    std::string arg2 ;
    ScreamAtomV *arg3 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:bgf_handler_readfile",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTSCREAM_ATOM_p_std__allocatorTSCREAM_ATOM_p_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("ScreamAtomV");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (bool)(arg1)->readfile(arg2,*arg3);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_bgf_handler_readfile(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_bgf_handler, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                return _wrap_bgf_handler_readfile__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_bgf_handler, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_std__vectorTSCREAM_ATOM_p_std__allocatorTSCREAM_ATOM_p_t_t, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_bgf_handler_readfile__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'bgf_handler_readfile'");
    return NULL;
}


static PyObject *_wrap_bgf_handler_readPDB__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *arg1 = (bgf_handler *) 0 ;
    std::string arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:bgf_handler_readPDB",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (bool)(arg1)->readPDB(arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_bgf_handler_readPDB__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *arg1 = (bgf_handler *) 0 ;
    std::string arg2 ;
    ScreamAtomV *arg3 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:bgf_handler_readPDB",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTSCREAM_ATOM_p_std__allocatorTSCREAM_ATOM_p_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("ScreamAtomV");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (bool)(arg1)->readPDB(arg2,*arg3);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_bgf_handler_readPDB(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_bgf_handler, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                return _wrap_bgf_handler_readPDB__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_bgf_handler, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_std__vectorTSCREAM_ATOM_p_std__allocatorTSCREAM_ATOM_p_t_t, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_bgf_handler_readPDB__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'bgf_handler_readPDB'");
    return NULL;
}


static PyObject *_wrap_bgf_handler_printToFile__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *arg1 = (bgf_handler *) 0 ;
    std::string arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:bgf_handler_printToFile",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (bool)(arg1)->printToFile(arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_bgf_handler_printToFile__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *arg1 = (bgf_handler *) 0 ;
    std::string arg2 ;
    std::string arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:bgf_handler_printToFile",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (bool)(arg1)->printToFile(arg2,arg3);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_bgf_handler_printToFile(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_bgf_handler, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                return _wrap_bgf_handler_printToFile__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_bgf_handler, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                _v = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
                if (_v) {
                    return _wrap_bgf_handler_printToFile__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'bgf_handler_printToFile'");
    return NULL;
}


static PyObject *_wrap_bgf_handler_printfile__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *arg1 = (bgf_handler *) 0 ;
    ScreamAtomV *arg2 = 0 ;
    ostream *arg3 = (ostream *) 0 ;
    std::string arg4 ;
    int arg5 ;
    bool result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:bgf_handler_printfile",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > > *ptr = (std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > > *)0;
        res2 = swig::asptr(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("ScreamAtomV", obj1);
        } else if (!ptr) {
            SWIG_null_ref("ScreamAtomV");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_ostream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj3, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    result = (bool)(arg1)->printfile((std::vector<SCREAM_ATOM * > const &)*arg2,arg3,arg4,arg5);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_bgf_handler_printfile__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *arg1 = (bgf_handler *) 0 ;
    ScreamAtomV *arg2 = 0 ;
    ostream *arg3 = (ostream *) 0 ;
    std::string arg4 ;
    bool result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:bgf_handler_printfile",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > > *ptr = (std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > > *)0;
        res2 = swig::asptr(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("ScreamAtomV", obj1);
        } else if (!ptr) {
            SWIG_null_ref("ScreamAtomV");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_ostream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj3, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (bool)(arg1)->printfile((std::vector<SCREAM_ATOM * > const &)*arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_bgf_handler_printfile__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *arg1 = (bgf_handler *) 0 ;
    ScreamAtomV *arg2 = 0 ;
    ostream *arg3 = (ostream *) 0 ;
    bool result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:bgf_handler_printfile",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > > *ptr = (std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > > *)0;
        res2 = swig::asptr(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("ScreamAtomV", obj1);
        } else if (!ptr) {
            SWIG_null_ref("ScreamAtomV");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_ostream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    result = (bool)(arg1)->printfile((std::vector<SCREAM_ATOM * > const &)*arg2,arg3);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_bgf_handler_printfile(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_bgf_handler, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = swig::asptr(argv[1], (std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > >**)(0));
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_ostream, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_bgf_handler_printfile__SWIG_2(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_bgf_handler, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = swig::asptr(argv[1], (std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > >**)(0));
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_ostream, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    _v = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
                    if (_v) {
                        return _wrap_bgf_handler_printfile__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_bgf_handler, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = swig::asptr(argv[1], (std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > >**)(0));
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_ostream, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    _v = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
                    if (_v) {
                        _v = SWIG_Check_int(argv[4]);
                        if (_v) {
                            return _wrap_bgf_handler_printfile__SWIG_0(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'bgf_handler_printfile'");
    return NULL;
}


static PyObject *_wrap_bgf_handler_printPDB(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *arg1 = (bgf_handler *) 0 ;
    std::string arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:bgf_handler_printPDB",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (bool)(arg1)->printPDB(arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_bgf_handler_printToPDB__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *arg1 = (bgf_handler *) 0 ;
    ScreamAtomV *arg2 = 0 ;
    ostream *arg3 = (ostream *) 0 ;
    std::string arg4 ;
    bool result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:bgf_handler_printToPDB",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > > *ptr = (std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > > *)0;
        res2 = swig::asptr(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("ScreamAtomV", obj1);
        } else if (!ptr) {
            SWIG_null_ref("ScreamAtomV");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_ostream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj3, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (bool)(arg1)->printToPDB((std::vector<SCREAM_ATOM * > const &)*arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_bgf_handler_printToPDB__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *arg1 = (bgf_handler *) 0 ;
    ScreamAtomV *arg2 = 0 ;
    ostream *arg3 = (ostream *) 0 ;
    bool result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:bgf_handler_printToPDB",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > > *ptr = (std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > > *)0;
        res2 = swig::asptr(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("ScreamAtomV", obj1);
        } else if (!ptr) {
            SWIG_null_ref("ScreamAtomV");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_ostream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    result = (bool)(arg1)->printToPDB((std::vector<SCREAM_ATOM * > const &)*arg2,arg3);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_bgf_handler_printToPDB(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_bgf_handler, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = swig::asptr(argv[1], (std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > >**)(0));
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_ostream, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_bgf_handler_printToPDB__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_bgf_handler, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = swig::asptr(argv[1], (std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > >**)(0));
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_ostream, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    _v = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
                    if (_v) {
                        return _wrap_bgf_handler_printToPDB__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'bgf_handler_printToPDB'");
    return NULL;
}


static PyObject *_wrap_bgf_handler_printSequenceToFile(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *arg1 = (bgf_handler *) 0 ;
    std::string arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:bgf_handler_printSequenceToFile",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (bool)(arg1)->printSequenceToFile(arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_bgf_handler_returnSequence(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *arg1 = (bgf_handler *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:bgf_handler_returnSequence",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->returnSequence();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_bgf_handler_printSequence(PyObject *, PyObject *args) {
    PyObject *resultobj;
    ScreamAtomV *arg1 = 0 ;
    ostream *arg2 = (ostream *) 0 ;
    bool result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:bgf_handler_printSequence",&obj0,&obj1)) goto fail;
    {
        std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > > *ptr = (std::vector<SCREAM_ATOM*,std::allocator<SCREAM_ATOM * > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("ScreamAtomV", obj0);
        } else if (!ptr) {
            SWIG_null_ref("ScreamAtomV");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ostream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (bool)bgf_handler::printSequence((std::vector<SCREAM_ATOM * > const &)*arg1,arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_bgf_handler_pass_atomlist(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *arg1 = (bgf_handler *) 0 ;
    ScreamAtomV *arg2 = (ScreamAtomV *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:bgf_handler_pass_atomlist",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTSCREAM_ATOM_p_std__allocatorTSCREAM_ATOM_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->pass_atomlist(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_bgf_handler_getAtomList(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *arg1 = (bgf_handler *) 0 ;
    ScreamAtomV *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:bgf_handler_getAtomList",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (ScreamAtomV *)(arg1)->getAtomList();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTSCREAM_ATOM_p_std__allocatorTSCREAM_ATOM_p_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_bgf_handler_atom_list_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *arg1 = (bgf_handler *) 0 ;
    ScreamAtomV *arg2 = (ScreamAtomV *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:bgf_handler_atom_list_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTSCREAM_ATOM_p_std__allocatorTSCREAM_ATOM_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->atom_list = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_bgf_handler_atom_list_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *arg1 = (bgf_handler *) 0 ;
    ScreamAtomV *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:bgf_handler_atom_list_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (ScreamAtomV *)& ((arg1)->atom_list);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTSCREAM_ATOM_p_std__allocatorTSCREAM_ATOM_p_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_bgf_handler_header_lines_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *arg1 = (bgf_handler *) 0 ;
    stringV arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:bgf_handler_header_lines_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        stringV * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_stringV, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("stringV");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    if (arg1) (arg1)->header_lines = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_bgf_handler_header_lines_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *arg1 = (bgf_handler *) 0 ;
    stringV result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:bgf_handler_header_lines_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result =  ((arg1)->header_lines);
    
    {
        stringV * resultptr;
        resultptr = new stringV((stringV &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_stringV, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_bgf_handler_atom_lines_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *arg1 = (bgf_handler *) 0 ;
    stringV arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:bgf_handler_atom_lines_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        stringV * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_stringV, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("stringV");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    if (arg1) (arg1)->atom_lines = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_bgf_handler_atom_lines_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *arg1 = (bgf_handler *) 0 ;
    stringV result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:bgf_handler_atom_lines_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result =  ((arg1)->atom_lines);
    
    {
        stringV * resultptr;
        resultptr = new stringV((stringV &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_stringV, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_bgf_handler_conect_format_lines_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *arg1 = (bgf_handler *) 0 ;
    stringV arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:bgf_handler_conect_format_lines_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        stringV * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_stringV, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("stringV");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    if (arg1) (arg1)->conect_format_lines = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_bgf_handler_conect_format_lines_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *arg1 = (bgf_handler *) 0 ;
    stringV result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:bgf_handler_conect_format_lines_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result =  ((arg1)->conect_format_lines);
    
    {
        stringV * resultptr;
        resultptr = new stringV((stringV &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_stringV, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_bgf_handler_connectivity_record_lines_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *arg1 = (bgf_handler *) 0 ;
    stringV arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:bgf_handler_connectivity_record_lines_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        stringV * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_stringV, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("stringV");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    if (arg1) (arg1)->connectivity_record_lines = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_bgf_handler_connectivity_record_lines_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    bgf_handler *arg1 = (bgf_handler *) 0 ;
    stringV result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:bgf_handler_connectivity_record_lines_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_bgf_handler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result =  ((arg1)->connectivity_record_lines);
    
    {
        stringV * resultptr;
        resultptr = new stringV((stringV &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_stringV, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * bgf_handler_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_bgf_handler, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_AminoAcid_RTF__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AminoAcid_RTF *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_AminoAcid_RTF")) goto fail;
    result = (AminoAcid_RTF *)new AminoAcid_RTF();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_AminoAcid_RTF, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_AminoAcid_RTF__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    stringV *arg1 = 0 ;
    AminoAcid_RTF *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_AminoAcid_RTF",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_stringV, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("stringV");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (AminoAcid_RTF *)new AminoAcid_RTF(*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_AminoAcid_RTF, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_AminoAcid_RTF(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_AminoAcid_RTF__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_stringV, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_AminoAcid_RTF__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_AminoAcid_RTF'");
    return NULL;
}


static PyObject *_wrap_delete_AminoAcid_RTF(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AminoAcid_RTF *arg1 = (AminoAcid_RTF *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_AminoAcid_RTF",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AminoAcid_RTF, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AminoAcid_RTF_get_ff_type(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AminoAcid_RTF *arg1 = (AminoAcid_RTF *) 0 ;
    std::string arg2 ;
    std::string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AminoAcid_RTF_get_ff_type",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AminoAcid_RTF, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (arg1)->get_ff_type(arg2);
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AminoAcid_RTF_return_bonds_table(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AminoAcid_RTF *arg1 = (AminoAcid_RTF *) 0 ;
    SwigValueWrapper<multimap<std::string,std::string > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AminoAcid_RTF_return_bonds_table",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_AminoAcid_RTF, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((AminoAcid_RTF const *)arg1)->return_bonds_table();
    
    {
        multimap<std::string,std::string > * resultptr;
        resultptr = new multimap<std::string,std::string >((multimap<std::string,std::string > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_multimapTstd__string_std__string_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * AminoAcid_RTF_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_AminoAcid_RTF, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_SCREAM_RTF__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_RTF *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_SCREAM_RTF")) goto fail;
    result = (SCREAM_RTF *)new SCREAM_RTF();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_SCREAM_RTF, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SCREAM_RTF__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::string arg1 ;
    SCREAM_RTF *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_SCREAM_RTF",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (SCREAM_RTF *)new SCREAM_RTF(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_SCREAM_RTF, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SCREAM_RTF(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_SCREAM_RTF__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_SCREAM_RTF__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_SCREAM_RTF'");
    return NULL;
}


static PyObject *_wrap_delete_SCREAM_RTF(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_RTF *arg1 = (SCREAM_RTF *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SCREAM_RTF",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_RTF, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_RTF_get_AminoAcid_RTF(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_RTF *arg1 = (SCREAM_RTF *) 0 ;
    std::string arg2 ;
    AminoAcid_RTF *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCREAM_RTF_get_AminoAcid_RTF",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_RTF, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (AminoAcid_RTF *)(arg1)->get_AminoAcid_RTF(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_AminoAcid_RTF, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCREAM_RTF_get_ff_type(PyObject *, PyObject *args) {
    PyObject *resultobj;
    SCREAM_RTF *arg1 = (SCREAM_RTF *) 0 ;
    std::string arg2 ;
    std::string arg3 ;
    std::string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:SCREAM_RTF_get_ff_type",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SCREAM_RTF, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (arg1)->get_ff_type(arg2,arg3);
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * SCREAM_RTF_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_SCREAM_RTF, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Scream_EE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Scream_EE")) goto fail;
    result = (Scream_EE *)new Scream_EE();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Scream_EE, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Scream_EE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Scream_EE",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_init(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    Protein *arg2 = (Protein *) 0 ;
    std::vector<std::string > arg3 ;
    std::string arg4 ;
    std::string arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:Scream_EE_init",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        std::vector<std::string > * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::vector<std::string >");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj3, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj4, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj4);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
        arg5 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    (arg1)->init(arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_setCalcNonPolarHydrogen_flag(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_setCalcNonPolarHydrogen_flag",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setCalcNonPolarHydrogen_flag(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_getCalcNonPolarHydrogen_flag(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Scream_EE_getCalcNonPolarHydrogen_flag",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)(arg1)->getCalcNonPolarHydrogen_flag();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_addMutInfoRotConnInfo__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo arg2 ;
    RotConnInfo *arg3 = (RotConnInfo *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Scream_EE_addMutInfoRotConnInfo",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        MutInfo * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    (arg1)->addMutInfoRotConnInfo(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_addMutInfoRotConnInfo__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_addMutInfoRotConnInfo",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        MutInfo * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    (arg1)->addMutInfoRotConnInfo(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_addMutInfoRotConnInfo(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Scream_EE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Scream_EE_addMutInfoRotConnInfo__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Scream_EE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_RotConnInfo, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_Scream_EE_addMutInfoRotConnInfo__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Scream_EE_addMutInfoRotConnInfo'");
    return NULL;
}


static PyObject *_wrap_Scream_EE_init_after_addedMutInfoRotConnInfo(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    Protein *arg2 = (Protein *) 0 ;
    ScreamParameters *arg3 = (ScreamParameters *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Scream_EE_init_after_addedMutInfoRotConnInfo",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    (arg1)->init_after_addedMutInfoRotConnInfo(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_init_after_addedMutInfoRotConnInfo_on_the_fly_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    Protein *arg2 = (Protein *) 0 ;
    ScreamParameters *arg3 = (ScreamParameters *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Scream_EE_init_after_addedMutInfoRotConnInfo_on_the_fly_E",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    (arg1)->init_after_addedMutInfoRotConnInfo_on_the_fly_E(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_init_after_addedMutInfoRotConnInfo_neighbor_list(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    Protein *arg2 = (Protein *) 0 ;
    ScreamParameters *arg3 = (ScreamParameters *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Scream_EE_init_after_addedMutInfoRotConnInfo_neighbor_list",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_ScreamParameters, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    (arg1)->init_after_addedMutInfoRotConnInfo_neighbor_list(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_fix_mutInfo__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    RotConnInfo *arg3 = (RotConnInfo *) 0 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Scream_EE_fix_mutInfo",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    (arg1)->fix_mutInfo(*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_fix_mutInfo__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    RotConnInfo *arg3 = (RotConnInfo *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Scream_EE_fix_mutInfo",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    (arg1)->fix_mutInfo(*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_fix_mutInfo__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_fix_mutInfo",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->fix_mutInfo(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_fix_mutInfo(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Scream_EE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Scream_EE_fix_mutInfo__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Scream_EE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_RotConnInfo, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_Scream_EE_fix_mutInfo__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Scream_EE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_RotConnInfo, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_Scream_EE_fix_mutInfo__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Scream_EE_fix_mutInfo'");
    return NULL;
}


static PyObject *_wrap_Scream_EE_moveable_mutInfo__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    RotConnInfo *arg3 = (RotConnInfo *) 0 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Scream_EE_moveable_mutInfo",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    (arg1)->moveable_mutInfo(*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_moveable_mutInfo__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    RotConnInfo *arg3 = (RotConnInfo *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Scream_EE_moveable_mutInfo",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    (arg1)->moveable_mutInfo(*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_moveable_mutInfo__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_moveable_mutInfo",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->moveable_mutInfo(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_moveable_mutInfo(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Scream_EE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Scream_EE_moveable_mutInfo__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Scream_EE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_RotConnInfo, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_Scream_EE_moveable_mutInfo__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Scream_EE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_RotConnInfo, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_Scream_EE_moveable_mutInfo__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Scream_EE_moveable_mutInfo'");
    return NULL;
}


static PyObject *_wrap_Scream_EE_fix_all(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Scream_EE_fix_all",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->fix_all();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_visible_mutInfo__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    RotConnInfo *arg3 = (RotConnInfo *) 0 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Scream_EE_visible_mutInfo",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    (arg1)->visible_mutInfo(*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_visible_mutInfo__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    RotConnInfo *arg3 = (RotConnInfo *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Scream_EE_visible_mutInfo",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    (arg1)->visible_mutInfo(*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_visible_mutInfo__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_visible_mutInfo",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->visible_mutInfo(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_visible_mutInfo(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Scream_EE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Scream_EE_visible_mutInfo__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Scream_EE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_RotConnInfo, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_Scream_EE_visible_mutInfo__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Scream_EE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_RotConnInfo, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_Scream_EE_visible_mutInfo__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Scream_EE_visible_mutInfo'");
    return NULL;
}


static PyObject *_wrap_Scream_EE_invisible_mutInfo__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    RotConnInfo *arg3 = (RotConnInfo *) 0 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Scream_EE_invisible_mutInfo",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    (arg1)->invisible_mutInfo(*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_invisible_mutInfo__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    RotConnInfo *arg3 = (RotConnInfo *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Scream_EE_invisible_mutInfo",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    (arg1)->invisible_mutInfo(*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_invisible_mutInfo__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_invisible_mutInfo",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->invisible_mutInfo(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_invisible_mutInfo(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Scream_EE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Scream_EE_invisible_mutInfo__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Scream_EE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_RotConnInfo, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_Scream_EE_invisible_mutInfo__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Scream_EE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_RotConnInfo, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_Scream_EE_invisible_mutInfo__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Scream_EE_invisible_mutInfo'");
    return NULL;
}


static PyObject *_wrap_Scream_EE_visible_EL_mutInfo__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    RotConnInfo *arg3 = (RotConnInfo *) 0 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Scream_EE_visible_EL_mutInfo",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    (arg1)->visible_EL_mutInfo(*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_visible_EL_mutInfo__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    RotConnInfo *arg3 = (RotConnInfo *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Scream_EE_visible_EL_mutInfo",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    (arg1)->visible_EL_mutInfo(*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_visible_EL_mutInfo__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_visible_EL_mutInfo",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->visible_EL_mutInfo(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_visible_EL_mutInfo(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Scream_EE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Scream_EE_visible_EL_mutInfo__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Scream_EE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_RotConnInfo, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_Scream_EE_visible_EL_mutInfo__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Scream_EE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_RotConnInfo, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_Scream_EE_visible_EL_mutInfo__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Scream_EE_visible_EL_mutInfo'");
    return NULL;
}


static PyObject *_wrap_Scream_EE_invisible_EL_mutInfo__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    RotConnInfo *arg3 = (RotConnInfo *) 0 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Scream_EE_invisible_EL_mutInfo",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    (arg1)->invisible_EL_mutInfo(*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_invisible_EL_mutInfo__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    RotConnInfo *arg3 = (RotConnInfo *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Scream_EE_invisible_EL_mutInfo",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    (arg1)->invisible_EL_mutInfo(*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_invisible_EL_mutInfo__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_invisible_EL_mutInfo",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->invisible_EL_mutInfo(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_invisible_EL_mutInfo(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Scream_EE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Scream_EE_invisible_EL_mutInfo__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Scream_EE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_RotConnInfo, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_Scream_EE_invisible_EL_mutInfo__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Scream_EE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_RotConnInfo, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_Scream_EE_invisible_EL_mutInfo__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Scream_EE_invisible_EL_mutInfo'");
    return NULL;
}


static PyObject *_wrap_Scream_EE_visible_all(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Scream_EE_visible_all",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->visible_all();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_invisible_all(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Scream_EE_invisible_all",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->invisible_all();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_visible_EL_all(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Scream_EE_visible_EL_all",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->visible_EL_all();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_invisible_EL_all(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Scream_EE_invisible_EL_all",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->invisible_EL_all();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_make_chain_invisible(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_make_chain_invisible",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    (arg1)->make_chain_invisible(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_make_chain_EL_invisible(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_make_chain_EL_invisible",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    (arg1)->make_chain_EL_invisible(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_resetFlags__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_resetFlags",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->resetFlags(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_resetFlags__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Scream_EE_resetFlags",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->resetFlags();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_resetFlags(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Scream_EE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Scream_EE_resetFlags__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Scream_EE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_Scream_EE_resetFlags__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Scream_EE_resetFlags'");
    return NULL;
}


static PyObject *_wrap_Scream_EE_setup_variableAtomsOnEachSidechain(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Scream_EE_setup_variableAtomsOnEachSidechain",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->setup_variableAtomsOnEachSidechain();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_initScreamAtomDeltaValue(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    std::string arg2 ;
    std::string arg3 ;
    double arg4 ;
    std::string arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:Scream_EE_initScreamAtomDeltaValue",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj4, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj4);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
        arg5 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    (arg1)->initScreamAtomDeltaValue(arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_initScreamAtomVdwHbFields(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Scream_EE_initScreamAtomVdwHbFields",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->initScreamAtomVdwHbFields();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_addClashCollection(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    ClashCollection *arg2 = (ClashCollection *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_addClashCollection",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ClashCollection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->addClashCollection(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_cleanClashCollection(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Scream_EE_cleanClashCollection",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->cleanClashCollection();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_getDistanceDielectricPrefactor(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Scream_EE_getDistanceDielectricPrefactor",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->getDistanceDielectricPrefactor();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_setDistanceDielectricPrefactor(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_setDistanceDielectricPrefactor",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setDistanceDielectricPrefactor(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_setNormalDielectric(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_setNormalDielectric",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setNormalDielectric(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_ntrlRotamerPlacement(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    std::string arg2 ;
    int arg3 ;
    AARotamer *arg4 = (AARotamer *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Scream_EE_ntrlRotamerPlacement",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    result = (int)(arg1)->ntrlRotamerPlacement(arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_coulomb_obj_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    SCREAM_Coulomb_OBJ arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_coulomb_obj_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SCREAM_Coulomb_OBJ * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_SCREAM_Coulomb_OBJ, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("SCREAM_Coulomb_OBJ");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    if (arg1) (arg1)->coulomb_obj = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_coulomb_obj_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    SCREAM_Coulomb_OBJ result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Scream_EE_coulomb_obj_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result =  ((arg1)->coulomb_obj);
    
    {
        SCREAM_Coulomb_OBJ * resultptr;
        resultptr = new SCREAM_Coulomb_OBJ((SCREAM_Coulomb_OBJ &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_SCREAM_Coulomb_OBJ, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_vdw_obj_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    SCREAM_VDW_OBJ arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_vdw_obj_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SCREAM_VDW_OBJ * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_SCREAM_VDW_OBJ, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("SCREAM_VDW_OBJ");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    if (arg1) (arg1)->vdw_obj = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_vdw_obj_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    SCREAM_VDW_OBJ result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Scream_EE_vdw_obj_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result =  ((arg1)->vdw_obj);
    
    {
        SCREAM_VDW_OBJ * resultptr;
        resultptr = new SCREAM_VDW_OBJ((SCREAM_VDW_OBJ &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_SCREAM_VDW_OBJ, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_hb_obj_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    SCREAM_HB_OBJ arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_hb_obj_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SCREAM_HB_OBJ * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_SCREAM_HB_OBJ, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("SCREAM_HB_OBJ");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    if (arg1) (arg1)->hb_obj = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_hb_obj_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    SCREAM_HB_OBJ result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Scream_EE_hb_obj_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result =  ((arg1)->hb_obj);
    
    {
        SCREAM_HB_OBJ * resultptr;
        resultptr = new SCREAM_HB_OBJ((SCREAM_HB_OBJ &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_SCREAM_HB_OBJ, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_coulomb_EE_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    Coulomb_EE *arg2 = (Coulomb_EE *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_coulomb_EE_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Coulomb_EE, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->coulomb_EE = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_coulomb_EE_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    Coulomb_EE *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Scream_EE_coulomb_EE_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (Coulomb_EE *) ((arg1)->coulomb_EE);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Coulomb_EE, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_vdw_EE_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    VDW_EE *arg2 = (VDW_EE *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_vdw_EE_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_VDW_EE, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->vdw_EE = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_vdw_EE_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    VDW_EE *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Scream_EE_vdw_EE_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (VDW_EE *) ((arg1)->vdw_EE);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_VDW_EE, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_hb_EE_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    HB_EE *arg2 = (HB_EE *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_hb_EE_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_HB_EE, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->hb_EE = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_hb_EE_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    HB_EE *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Scream_EE_hb_EE_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (HB_EE *) ((arg1)->hb_EE);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_HB_EE, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_vdw_hb_exclusion_EE_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    VDW_HB_Exclusion_EE *arg2 = (VDW_HB_Exclusion_EE *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_vdw_hb_exclusion_EE_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_VDW_HB_Exclusion_EE, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->vdw_hb_exclusion_EE = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_vdw_hb_exclusion_EE_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    VDW_HB_Exclusion_EE *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Scream_EE_vdw_hb_exclusion_EE_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (VDW_HB_Exclusion_EE *) ((arg1)->vdw_hb_exclusion_EE);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_VDW_HB_Exclusion_EE, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_empty_lattice_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_calc_empty_lattice_E",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)(arg1)->calc_empty_lattice_E((MutInfo const &)*arg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_empty_lattice_E_full_delta(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    double arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Scream_EE_calc_empty_lattice_E_full_delta",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (double)(arg1)->calc_empty_lattice_E_full_delta((MutInfo const &)*arg2,arg3);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_empty_lattice_E_flat_delta(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    double arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Scream_EE_calc_empty_lattice_E_flat_delta",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (double)(arg1)->calc_empty_lattice_E_flat_delta((MutInfo const &)*arg2,arg3);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_empty_lattice_E_scaled_inner_wall(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    double arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Scream_EE_calc_empty_lattice_E_scaled_inner_wall",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (double)(arg1)->calc_empty_lattice_E_scaled_inner_wall((MutInfo const &)*arg2,arg3);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_empty_lattice_coulomb_E_delta(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_calc_empty_lattice_coulomb_E_delta",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)(arg1)->calc_empty_lattice_coulomb_E_delta((MutInfo const &)*arg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_empty_lattice_vdw_E_delta(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    std::string arg3 ;
    double arg4 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Scream_EE_calc_empty_lattice_vdw_E_delta",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (double)(arg1)->calc_empty_lattice_vdw_E_delta((MutInfo const &)*arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_empty_lattice_hb_E_delta(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    std::string arg3 ;
    double arg4 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Scream_EE_calc_empty_lattice_hb_E_delta",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (double)(arg1)->calc_empty_lattice_hb_E_delta((MutInfo const &)*arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_empty_lattice_vdw_hb_exclusion_E_delta(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    std::string arg3 ;
    double arg4 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Scream_EE_calc_empty_lattice_vdw_hb_exclusion_E_delta",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (double)(arg1)->calc_empty_lattice_vdw_hb_exclusion_E_delta((MutInfo const &)*arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_EL_vdw_rot_selfBB(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    std::string arg3 ;
    double arg4 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Scream_EE_calc_EL_vdw_rot_selfBB",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (double)(arg1)->calc_EL_vdw_rot_selfBB((MutInfo const &)*arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_EL_vdw_rot_otherBB(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    std::string arg3 ;
    double arg4 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Scream_EE_calc_EL_vdw_rot_otherBB",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (double)(arg1)->calc_EL_vdw_rot_otherBB((MutInfo const &)*arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_EL_vdw_rot_fixedSC(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    std::string arg3 ;
    double arg4 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Scream_EE_calc_EL_vdw_rot_fixedSC",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (double)(arg1)->calc_EL_vdw_rot_fixedSC((MutInfo const &)*arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_EL_vdw_rot_fixedHET(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    std::string arg3 ;
    double arg4 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Scream_EE_calc_EL_vdw_rot_fixedHET",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (double)(arg1)->calc_EL_vdw_rot_fixedHET((MutInfo const &)*arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_EL_vdw_rot_moveableHET(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    std::string arg3 ;
    double arg4 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Scream_EE_calc_EL_vdw_rot_moveableHET",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (double)(arg1)->calc_EL_vdw_rot_moveableHET((MutInfo const &)*arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_EL_coulomb_rot_selfBB(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_calc_EL_coulomb_rot_selfBB",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)(arg1)->calc_EL_coulomb_rot_selfBB((MutInfo const &)*arg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_EL_coulomb_rot_otherBB(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_calc_EL_coulomb_rot_otherBB",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)(arg1)->calc_EL_coulomb_rot_otherBB((MutInfo const &)*arg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_EL_coulomb_rot_fixedSC(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_calc_EL_coulomb_rot_fixedSC",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)(arg1)->calc_EL_coulomb_rot_fixedSC((MutInfo const &)*arg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_EL_coulomb_rot_fixedHET(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_calc_EL_coulomb_rot_fixedHET",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)(arg1)->calc_EL_coulomb_rot_fixedHET((MutInfo const &)*arg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_EL_coulomb_rot_moveableHET(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_calc_EL_coulomb_rot_moveableHET",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)(arg1)->calc_EL_coulomb_rot_moveableHET((MutInfo const &)*arg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_EL_hb_rot_selfBB(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    std::string arg3 ;
    double arg4 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Scream_EE_calc_EL_hb_rot_selfBB",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (double)(arg1)->calc_EL_hb_rot_selfBB((MutInfo const &)*arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_EL_hb_rot_otherBB(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    std::string arg3 ;
    double arg4 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Scream_EE_calc_EL_hb_rot_otherBB",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (double)(arg1)->calc_EL_hb_rot_otherBB((MutInfo const &)*arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_EL_hb_rot_fixedSC(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    std::string arg3 ;
    double arg4 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Scream_EE_calc_EL_hb_rot_fixedSC",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (double)(arg1)->calc_EL_hb_rot_fixedSC((MutInfo const &)*arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_EL_hb_rot_fixedHET(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    std::string arg3 ;
    double arg4 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Scream_EE_calc_EL_hb_rot_fixedHET",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (double)(arg1)->calc_EL_hb_rot_fixedHET((MutInfo const &)*arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_EL_hb_rot_moveableHET(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo *arg2 = 0 ;
    std::string arg3 ;
    double arg4 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Scream_EE_calc_EL_hb_rot_moveableHET",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (double)(arg1)->calc_EL_hb_rot_moveableHET((MutInfo const &)*arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_all_interaction_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Scream_EE_calc_all_interaction_E",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->calc_all_interaction_E();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_all_interaction_E_full_delta(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    double arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_calc_all_interaction_E_full_delta",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)(arg1)->calc_all_interaction_E_full_delta(arg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_all_interaction_E_flat_delta(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    double arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_calc_all_interaction_E_flat_delta",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)(arg1)->calc_all_interaction_E_flat_delta(arg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_all_interaction_coulomb_E_delta(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Scream_EE_calc_all_interaction_coulomb_E_delta",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->calc_all_interaction_coulomb_E_delta();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_all_interaction_vdw_E_delta(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    std::string arg2 ;
    double arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Scream_EE_calc_all_interaction_vdw_E_delta",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (double)(arg1)->calc_all_interaction_vdw_E_delta(arg2,arg3);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_all_interaction_hb_E_delta(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    std::string arg2 ;
    double arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Scream_EE_calc_all_interaction_hb_E_delta",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (double)(arg1)->calc_all_interaction_hb_E_delta(arg2,arg3);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_all_interaction_vdw_hb_exclusion_E_delta(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    std::string arg2 ;
    double arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Scream_EE_calc_all_interaction_vdw_hb_exclusion_E_delta",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (double)(arg1)->calc_all_interaction_vdw_hb_exclusion_E_delta(arg2,arg3);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_residue_interaction_E__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_calc_residue_interaction_E",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        MutInfo * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    result = (double)(arg1)->calc_residue_interaction_E(arg2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_residue_interaction_E__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo arg2 ;
    MutInfo arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Scream_EE_calc_residue_interaction_E",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        MutInfo * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        MutInfo * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    result = (double)(arg1)->calc_residue_interaction_E(arg2,arg3);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_residue_interaction_E(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Scream_EE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Scream_EE_calc_residue_interaction_E__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Scream_EE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_Scream_EE_calc_residue_interaction_E__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Scream_EE_calc_residue_interaction_E'");
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_residue_interaction_vdw_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo arg2 ;
    MutInfo arg3 ;
    std::string arg4 ;
    double arg5 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:Scream_EE_calc_residue_interaction_vdw_E",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        MutInfo * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        MutInfo * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj3, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    result = (double)(arg1)->calc_residue_interaction_vdw_E(arg2,arg3,arg4,arg5);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_residue_interaction_hb_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo arg2 ;
    MutInfo arg3 ;
    std::string arg4 ;
    double arg5 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:Scream_EE_calc_residue_interaction_hb_E",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        MutInfo * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        MutInfo * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj3, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    result = (double)(arg1)->calc_residue_interaction_hb_E(arg2,arg3,arg4,arg5);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_calc_residue_interaction_coulumb_E(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    MutInfo arg2 ;
    MutInfo arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Scream_EE_calc_residue_interaction_coulumb_E",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        MutInfo * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        MutInfo * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    result = (double)(arg1)->calc_residue_interaction_coulumb_E(arg2,arg3);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_setProtein(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    Protein *arg2 = (Protein *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_setProtein",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->setProtein(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_getProtein(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    Protein *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Scream_EE_getProtein",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (Protein *)(arg1)->getProtein();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Protein, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_ptn_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    Protein *arg2 = (Protein *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_ptn_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Protein, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->ptn = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_ptn_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    Protein *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Scream_EE_ptn_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (Protein *) ((arg1)->ptn);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Protein, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_mutInfoV_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    std::vector<MutInfo > *arg2 = (std::vector<MutInfo > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Scream_EE_mutInfoV_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->mutInfoV = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Scream_EE_mutInfoV_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Scream_EE *arg1 = (Scream_EE *) 0 ;
    std::vector<MutInfo > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Scream_EE_mutInfoV_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Scream_EE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<MutInfo > *)& ((arg1)->mutInfoV);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Scream_EE_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_Scream_EE, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MutInfo__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_MutInfo")) goto fail;
    result = (MutInfo *)new MutInfo();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_MutInfo, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MutInfo__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::string arg1 ;
    MutInfo *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_MutInfo",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (MutInfo *)new MutInfo(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_MutInfo, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MutInfo__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = 0 ;
    MutInfo *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_MutInfo",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (MutInfo *)new MutInfo((MutInfo const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_MutInfo, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MutInfo__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = 0 ;
    MutInfo *arg2 = 0 ;
    MutInfo *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_MutInfo",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (MutInfo *)new MutInfo((MutInfo const &)*arg1,(MutInfo const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_MutInfo, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MutInfo(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_MutInfo__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_MutInfo__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_MutInfo__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_MutInfo__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_MutInfo'");
    return NULL;
}


static PyObject *_wrap_delete_MutInfo(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_MutInfo",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfo_init(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfo_init",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    (arg1)->init(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfo_addMutInfo__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfo_addMutInfo",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    (arg1)->addMutInfo(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfo_addMutInfo__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    MutInfo *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfo_addMutInfo",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->addMutInfo((MutInfo const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfo_addMutInfo(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_MutInfo_addMutInfo__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                return _wrap_MutInfo_addMutInfo__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'MutInfo_addMutInfo'");
    return NULL;
}


static PyObject *_wrap_MutInfo___eq__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    MutInfo *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfo___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((MutInfo const *)arg1)->operator ==((MutInfo const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfo___lt__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    MutInfo *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfo___lt__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((MutInfo const *)arg1)->operator <((MutInfo const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfo_getChn(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfo_getChn",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((MutInfo const *)arg1)->getChn();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfo_getPstn(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfo_getPstn",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((MutInfo const *)arg1)->getPstn();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfo_getAA(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfo_getAA",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((MutInfo const *)arg1)->getAA();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfo_chn_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfo_chn_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->chn = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfo_chn_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfo_chn_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->chn);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfo_pstn_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfo_pstn_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->pstn = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfo_pstn_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfo_pstn_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->pstn);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfo_AA_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfo_AA_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->AA = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfo_AA_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfo_AA_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->AA);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfo_str_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfo_str_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->str = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfo_str_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfo_str_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->str);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfo_mIInt_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfo_mIInt_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->mIInt = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfo_mIInt_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfo_mIInt_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->mIInt);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfo_print_Me(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfo_print_Me",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((MutInfo const *)arg1)->print_Me();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfo_getString(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfo_getString",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((MutInfo const *)arg1)->getString();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfo_getAllMutInfos(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    SwigValueWrapper<std::vector<MutInfo * > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfo_getAllMutInfos",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getAllMutInfos();
    
    {
        std::vector<MutInfo * > * resultptr;
        resultptr = new std::vector<MutInfo * >((std::vector<MutInfo * > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTMutInfo_p_std__allocatorTMutInfo_p_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfo_setIndex(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfo_setIndex",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setIndex(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfo_getIndex(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfo_getIndex",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((MutInfo const *)arg1)->getIndex();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfo_setRotConnInfo(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    RotConnInfo *arg2 = (RotConnInfo *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfo_setRotConnInfo",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->setRotConnInfo(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfo_getRotConnInfo(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    RotConnInfo *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfo_getRotConnInfo",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (RotConnInfo *)((MutInfo const *)arg1)->getRotConnInfo();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_RotConnInfo, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfo_getMutInfoStringWithRotConnInfo(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    SwigValueWrapper<std::map<std::string,RotConnInfo * > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfo_getMutInfoStringWithRotConnInfo",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((MutInfo const *)arg1)->getMutInfoStringWithRotConnInfo();
    
    {
        std::map<std::string,RotConnInfo * > * resultptr;
        resultptr = new std::map<std::string,RotConnInfo * >((std::map<std::string,RotConnInfo * > &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTstd__string_RotConnInfo_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_RotConnInfo_p_t_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfo_searchAndAddRotConnInfo(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    MutInfo arg2 ;
    RotConnInfo *arg3 = (RotConnInfo *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MutInfo_searchAndAddRotConnInfo",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        MutInfo * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_RotConnInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    (arg1)->searchAndAddRotConnInfo(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfo_isClusterMutInfo(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo *arg1 = (MutInfo *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfo_isClusterMutInfo",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((MutInfo const *)arg1)->isClusterMutInfo();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MutInfo_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_MutInfo, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MutInfoPair__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfoPair *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_MutInfoPair")) goto fail;
    result = (MutInfoPair *)new MutInfoPair();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_MutInfoPair, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MutInfoPair__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfoPair *arg1 = 0 ;
    MutInfoPair *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_MutInfoPair",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfoPair, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("MutInfoPair");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (MutInfoPair *)new MutInfoPair((MutInfoPair const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_MutInfoPair, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MutInfoPair__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo arg1 ;
    MutInfo arg2 ;
    MutInfoPair *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_MutInfoPair",&obj0,&obj1)) goto fail;
    {
        MutInfo * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    {
        MutInfo * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    result = (MutInfoPair *)new MutInfoPair(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_MutInfoPair, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MutInfoPair__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfo arg1 ;
    MutInfo arg2 ;
    double arg3 ;
    MutInfoPair *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_MutInfoPair",&obj0,&obj1,&obj2)) goto fail;
    {
        MutInfo * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    {
        MutInfo * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (MutInfoPair *)new MutInfoPair(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_MutInfoPair, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MutInfoPair(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_MutInfoPair__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_MutInfoPair, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_MutInfoPair__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_MutInfoPair__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    return _wrap_new_MutInfoPair__SWIG_3(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_MutInfoPair'");
    return NULL;
}


static PyObject *_wrap_delete_MutInfoPair(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfoPair *arg1 = (MutInfoPair *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_MutInfoPair",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfoPair, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPair_init(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfoPair *arg1 = (MutInfoPair *) 0 ;
    MutInfo arg2 ;
    MutInfo arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MutInfoPair_init",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfoPair, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        MutInfo * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        MutInfo * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("MutInfo");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    (arg1)->init(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPair___eq__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfoPair *arg1 = (MutInfoPair *) 0 ;
    MutInfoPair *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfoPair___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfoPair, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfoPair, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfoPair");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((MutInfoPair const *)arg1)->operator ==((MutInfoPair const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPair___lt__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfoPair *arg1 = (MutInfoPair *) 0 ;
    MutInfoPair *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfoPair___lt__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfoPair, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfoPair, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("MutInfoPair");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((MutInfoPair const *)arg1)->operator <((MutInfoPair const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPair_getString(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfoPair *arg1 = (MutInfoPair *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfoPair_getString",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfoPair, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getString();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPair_mutInfo1_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfoPair *arg1 = (MutInfoPair *) 0 ;
    MutInfo *arg2 = (MutInfo *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfoPair_mutInfo1_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfoPair, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->mutInfo1 = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPair_mutInfo1_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfoPair *arg1 = (MutInfoPair *) 0 ;
    MutInfo *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfoPair_mutInfo1_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfoPair, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (MutInfo *)& ((arg1)->mutInfo1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_MutInfo, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPair_mutInfo2_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfoPair *arg1 = (MutInfoPair *) 0 ;
    MutInfo *arg2 = (MutInfo *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfoPair_mutInfo2_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfoPair, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->mutInfo2 = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPair_mutInfo2_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfoPair *arg1 = (MutInfoPair *) 0 ;
    MutInfo *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfoPair_mutInfo2_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfoPair, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (MutInfo *)& ((arg1)->mutInfo2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_MutInfo, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPair_getMutInfo1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfoPair *arg1 = (MutInfoPair *) 0 ;
    MutInfo result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfoPair_getMutInfo1",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfoPair, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((MutInfoPair const *)arg1)->getMutInfo1();
    
    {
        MutInfo * resultptr;
        resultptr = new MutInfo((MutInfo &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_MutInfo, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPair_getMutInfo2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfoPair *arg1 = (MutInfoPair *) 0 ;
    MutInfo result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfoPair_getMutInfo2",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfoPair, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((MutInfoPair const *)arg1)->getMutInfo2();
    
    {
        MutInfo * resultptr;
        resultptr = new MutInfo((MutInfo &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_MutInfo, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPair_setClashE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfoPair *arg1 = (MutInfoPair *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfoPair_setClashE",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfoPair, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setClashE(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPair_getClashE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    MutInfoPair *arg1 = (MutInfoPair *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfoPair_getClashE",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_MutInfoPair, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((MutInfoPair const *)arg1)->getClashE();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MutInfoPair_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_MutInfoPair, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ConnectivityMap__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<SCREAM_ATOM *,int > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ConnectivityMap")) goto fail;
    result = (std::map<SCREAM_ATOM *,int > *)new std::map<SCREAM_ATOM *,int >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ConnectivityMap__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<SCREAM_ATOM *,int > *arg1 = 0 ;
    std::map<SCREAM_ATOM *,int > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ConnectivityMap",&obj0)) goto fail;
    {
        std::map<SCREAM_ATOM *,int,std::less<SCREAM_ATOM * >,std::allocator<std::pair<SCREAM_ATOM *const,int > > > *ptr = (std::map<SCREAM_ATOM *,int,std::less<SCREAM_ATOM * >,std::allocator<std::pair<SCREAM_ATOM *const,int > > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::map<SCREAM_ATOM *,int >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::map<SCREAM_ATOM *,int >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (std::map<SCREAM_ATOM *,int > *)new std::map<SCREAM_ATOM *,int >((std::map<SCREAM_ATOM *,int > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_ConnectivityMap(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_ConnectivityMap__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::map<SCREAM_ATOM *,int,std::less<SCREAM_ATOM * >,std::allocator<std::pair<SCREAM_ATOM *const,int > > >**)(0));
        if (_v) {
            return _wrap_new_ConnectivityMap__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_ConnectivityMap'");
    return NULL;
}


static PyObject *_wrap_ConnectivityMap_empty(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<SCREAM_ATOM *,int > *arg1 = (std::map<SCREAM_ATOM *,int > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ConnectivityMap_empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((std::map<SCREAM_ATOM *,int > const *)arg1)->empty();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConnectivityMap_size(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<SCREAM_ATOM *,int > *arg1 = (std::map<SCREAM_ATOM *,int > *) 0 ;
    std::map<SCREAM_ATOM *,int >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ConnectivityMap_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::map<SCREAM_ATOM *,int > const *)arg1)->size();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConnectivityMap_clear(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<SCREAM_ATOM *,int > *arg1 = (std::map<SCREAM_ATOM *,int > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ConnectivityMap_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConnectivityMap_swap(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<SCREAM_ATOM *,int > *arg1 = (std::map<SCREAM_ATOM *,int > *) 0 ;
    std::map<SCREAM_ATOM *,int > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ConnectivityMap_swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::map<SCREAM_ATOM *,int >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->swap(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConnectivityMap_get_allocator(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<SCREAM_ATOM *,int > *arg1 = (std::map<SCREAM_ATOM *,int > *) 0 ;
    SwigValueWrapper<std::allocator<std::pair<SCREAM_ATOM *const,int > > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ConnectivityMap_get_allocator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::map<SCREAM_ATOM *,int > const *)arg1)->get_allocator();
    
    {
        std::map<SCREAM_ATOM *,int >::allocator_type * resultptr;
        resultptr = new std::map<SCREAM_ATOM *,int >::allocator_type((std::map<SCREAM_ATOM *,int >::allocator_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConnectivityMap_erase(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<SCREAM_ATOM *,int > *arg1 = (std::map<SCREAM_ATOM *,int > *) 0 ;
    std::map<SCREAM_ATOM *,int >::key_type *arg2 = 0 ;
    std::map<SCREAM_ATOM *,int >::size_type result;
    std::map<SCREAM_ATOM *,int >::key_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ConnectivityMap_erase",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&temp2, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    arg2 = &temp2;
    
    result = (arg1)->erase((SCREAM_ATOM *const &)*arg2);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConnectivityMap_count(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<SCREAM_ATOM *,int > *arg1 = (std::map<SCREAM_ATOM *,int > *) 0 ;
    std::map<SCREAM_ATOM *,int >::key_type *arg2 = 0 ;
    std::map<SCREAM_ATOM *,int >::size_type result;
    std::map<SCREAM_ATOM *,int >::key_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ConnectivityMap_count",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&temp2, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    arg2 = &temp2;
    
    result = ((std::map<SCREAM_ATOM *,int > const *)arg1)->count((SCREAM_ATOM *const &)*arg2);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConnectivityMap___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<SCREAM_ATOM *,int > *arg1 = (std::map<SCREAM_ATOM *,int > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ConnectivityMap___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)std_map_Sl_SCREAM_ATOM_Sm__Sc_int_Sg____nonzero__((std::map<SCREAM_ATOM *,int > const *)arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConnectivityMap___len__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<SCREAM_ATOM *,int > *arg1 = (std::map<SCREAM_ATOM *,int > *) 0 ;
    std::map<SCREAM_ATOM *,int >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ConnectivityMap___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = std_map_Sl_SCREAM_ATOM_Sm__Sc_int_Sg____len__((std::map<SCREAM_ATOM *,int > const *)arg1);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConnectivityMap___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<SCREAM_ATOM *,int > *arg1 = (std::map<SCREAM_ATOM *,int > *) 0 ;
    std::map<SCREAM_ATOM *,int >::key_type *arg2 = 0 ;
    std::map<SCREAM_ATOM *,int >::mapped_type result;
    std::map<SCREAM_ATOM *,int >::key_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ConnectivityMap___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&temp2, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    arg2 = &temp2;
    
    {
        try {
            result = (std::map<SCREAM_ATOM *,int >::mapped_type)std_map_Sl_SCREAM_ATOM_Sm__Sc_int_Sg____getitem__((std::map<SCREAM_ATOM *,int > const *)arg1,(SCREAM_ATOM *const &)*arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConnectivityMap___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<SCREAM_ATOM *,int > *arg1 = (std::map<SCREAM_ATOM *,int > *) 0 ;
    std::map<SCREAM_ATOM *,int >::key_type *arg2 = 0 ;
    std::map<SCREAM_ATOM *,int >::mapped_type *arg3 = 0 ;
    std::map<SCREAM_ATOM *,int >::key_type temp2 ;
    std::map<SCREAM_ATOM *,int >::mapped_type temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ConnectivityMap___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&temp2, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    arg2 = &temp2;
    
    {
        temp3 = (std::map<SCREAM_ATOM *,int >::mapped_type)(SWIG_As_int(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    {
        try {
            std_map_Sl_SCREAM_ATOM_Sm__Sc_int_Sg____setitem__(arg1,(SCREAM_ATOM *const &)*arg2,(int const &)*arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConnectivityMap___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<SCREAM_ATOM *,int > *arg1 = (std::map<SCREAM_ATOM *,int > *) 0 ;
    std::map<SCREAM_ATOM *,int >::key_type *arg2 = 0 ;
    std::map<SCREAM_ATOM *,int >::key_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ConnectivityMap___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&temp2, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    arg2 = &temp2;
    
    {
        try {
            std_map_Sl_SCREAM_ATOM_Sm__Sc_int_Sg____delitem__(arg1,(SCREAM_ATOM *const &)*arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConnectivityMap_has_key(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<SCREAM_ATOM *,int > *arg1 = (std::map<SCREAM_ATOM *,int > *) 0 ;
    std::map<SCREAM_ATOM *,int >::key_type *arg2 = 0 ;
    bool result;
    std::map<SCREAM_ATOM *,int >::key_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ConnectivityMap_has_key",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&temp2, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    arg2 = &temp2;
    
    result = (bool)std_map_Sl_SCREAM_ATOM_Sm__Sc_int_Sg__has_key((std::map<SCREAM_ATOM *,int > const *)arg1,(SCREAM_ATOM *const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConnectivityMap_keys(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<SCREAM_ATOM *,int > *arg1 = (std::map<SCREAM_ATOM *,int > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ConnectivityMap_keys",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)std_map_Sl_SCREAM_ATOM_Sm__Sc_int_Sg__keys(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConnectivityMap_values(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<SCREAM_ATOM *,int > *arg1 = (std::map<SCREAM_ATOM *,int > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ConnectivityMap_values",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)std_map_Sl_SCREAM_ATOM_Sm__Sc_int_Sg__values(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConnectivityMap_items(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<SCREAM_ATOM *,int > *arg1 = (std::map<SCREAM_ATOM *,int > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ConnectivityMap_items",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)std_map_Sl_SCREAM_ATOM_Sm__Sc_int_Sg__items(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConnectivityMap___contains__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<SCREAM_ATOM *,int > *arg1 = (std::map<SCREAM_ATOM *,int > *) 0 ;
    std::map<SCREAM_ATOM *,int >::key_type *arg2 = 0 ;
    bool result;
    std::map<SCREAM_ATOM *,int >::key_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ConnectivityMap___contains__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&temp2, SWIGTYPE_p_SCREAM_ATOM, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    arg2 = &temp2;
    
    result = (bool)std_map_Sl_SCREAM_ATOM_Sm__Sc_int_Sg____contains__(arg1,(SCREAM_ATOM *const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConnectivityMap___iter__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<SCREAM_ATOM *,int > *arg1 = (std::map<SCREAM_ATOM *,int > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ConnectivityMap___iter__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)std_map_Sl_SCREAM_ATOM_Sm__Sc_int_Sg____iter__(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ConnectivityMap(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<SCREAM_ATOM *,int > *arg1 = (std::map<SCREAM_ATOM *,int > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ConnectivityMap",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ConnectivityMap_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_stringV__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_stringV")) goto fail;
    result = (std::vector<std::string > *)new std::vector<std::string >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_stringV__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = 0 ;
    std::vector<std::string > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_stringV",&obj0)) goto fail;
    {
        std::vector<std::string,std::allocator<std::string > > *ptr = (std::vector<std::string,std::allocator<std::string > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<std::string >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<std::string >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (std::vector<std::string > *)new std::vector<std::string >((std::vector<std::string > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_stringV_empty(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:stringV_empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((std::vector<std::string > const *)arg1)->empty();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_stringV_size(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:stringV_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::vector<std::string > const *)arg1)->size();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_stringV_clear(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:stringV_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_stringV_swap(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:stringV_swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<std::string >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->swap(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_stringV_get_allocator(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    SwigValueWrapper<std::allocator<std::string > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:stringV_get_allocator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::vector<std::string > const *)arg1)->get_allocator();
    
    {
        std::vector<std::string >::allocator_type * resultptr;
        resultptr = new std::vector<std::string >::allocator_type((std::vector<std::string >::allocator_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__allocatorTstd__string_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_stringV__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string >::size_type arg1 ;
    std::vector<std::string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_stringV",&obj0)) goto fail;
    {
        arg1 = (std::vector<std::string >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (std::vector<std::string > *)new std::vector<std::string >(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_stringV_pop_back(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:stringV_pop_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->pop_back();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_stringV_resize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:stringV_resize",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<std::string >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->resize(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_stringV__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string >::size_type arg1 ;
    std::vector<std::string >::value_type *arg2 = 0 ;
    std::vector<std::string > *result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_stringV",&obj0,&obj1)) goto fail;
    {
        arg1 = (std::vector<std::string >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<std::string >::value_type", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<std::string >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    result = (std::vector<std::string > *)new std::vector<std::string >(arg1,(std::string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 1);
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_new_stringV(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_stringV__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            return _wrap_new_stringV__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::vector<std::string,std::allocator<std::string > >**)(0));
        if (_v) {
            return _wrap_new_stringV__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                return _wrap_new_stringV__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_stringV'");
    return NULL;
}


static PyObject *_wrap_stringV_push_back(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::value_type *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:stringV_push_back",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<std::string >::value_type", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<std::string >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    (arg1)->push_back((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_stringV_front(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:stringV_front",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<std::string >::value_type const &_result_ref = ((std::vector<std::string > const *)arg1)->front();
        result = (std::vector<std::string >::value_type *) &_result_ref;
    }
    
    {
        resultobj = SWIG_From_std_string((std::string)(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_stringV_back(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:stringV_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<std::string >::value_type const &_result_ref = ((std::vector<std::string > const *)arg1)->back();
        result = (std::vector<std::string >::value_type *) &_result_ref;
    }
    
    {
        resultobj = SWIG_From_std_string((std::string)(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_stringV_assign(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::size_type arg2 ;
    std::vector<std::string >::value_type *arg3 = 0 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:stringV_assign",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<std::string >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        res3 = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res3) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<std::string >::value_type", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<std::string >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = ptr;
    }
    (arg1)->assign(arg2,(std::string const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return resultobj;
    fail:
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return NULL;
}


static PyObject *_wrap_stringV_resize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::size_type arg2 ;
    std::vector<std::string >::value_type *arg3 = 0 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:stringV_resize",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<std::string >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        res3 = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res3) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<std::string >::value_type", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<std::string >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = ptr;
    }
    (arg1)->resize(arg2,(std::string const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return resultobj;
    fail:
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return NULL;
}


static PyObject *_wrap_stringV_resize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_stringV_resize__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
                if (_v) {
                    return _wrap_stringV_resize__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'stringV_resize'");
    return NULL;
}


static PyObject *_wrap_stringV_reserve(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:stringV_reserve",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<std::string >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->reserve(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_stringV_capacity(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:stringV_capacity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::vector<std::string > const *)arg1)->capacity();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_stringV___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:stringV___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)std_vector_Sl_std_string_Sg____nonzero__((std::vector<std::string > const *)arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_stringV___len__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:stringV___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = std_vector_Sl_std_string_Sg____len__((std::vector<std::string > const *)arg1);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_stringV_pop(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:stringV_pop",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_vector_Sl_std_string_Sg__pop(arg1);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_stringV___getslice__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::difference_type arg2 ;
    std::vector<std::string >::difference_type arg3 ;
    std::vector<std::string,std::allocator<std::string > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:stringV___getslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<std::string >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<std::string >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<std::string,std::allocator<std::string > > *)std_vector_Sl_std_string_Sg____getslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_stringV___setslice__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::difference_type arg2 ;
    std::vector<std::string >::difference_type arg3 ;
    std::vector<std::string,std::allocator<std::string > > *arg4 = 0 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:stringV___setslice__",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<std::string >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<std::string >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::vector<std::string,std::allocator<std::string > > *ptr = (std::vector<std::string,std::allocator<std::string > > *)0;
        res4 = swig::asptr(obj3, &ptr);
        if (!res4) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<std::string,std::allocator<std::string > >", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<std::string,std::allocator<std::string > >");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = ptr;
    }
    {
        try {
            std_vector_Sl_std_string_Sg____setslice__(arg1,arg2,arg3,(std::vector<std::string,std::allocator<std::string > > const &)*arg4);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        catch (std::invalid_argument& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_TypeError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }      
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return resultobj;
    fail:
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return NULL;
}


static PyObject *_wrap_stringV___delslice__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::difference_type arg2 ;
    std::vector<std::string >::difference_type arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:stringV___delslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<std::string >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<std::string >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_std_string_Sg____delslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_stringV___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::difference_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:stringV___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<std::string >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_std_string_Sg____delitem__(arg1,arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_stringV___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::difference_type arg2 ;
    std::vector<std::string >::value_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:stringV___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<std::string >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            {
                std::vector<std::string >::value_type const &_result_ref = std_vector_Sl_std_string_Sg____getitem__((std::vector<std::string > const *)arg1,arg2);
                result = (std::vector<std::string >::value_type *) &_result_ref;
            }
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        resultobj = SWIG_From_std_string((std::string)(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_stringV___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::difference_type arg2 ;
    std::vector<std::string >::value_type *arg3 = 0 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:stringV___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<std::string >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        res3 = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res3) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<std::string >::value_type", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<std::string >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = ptr;
    }
    {
        try {
            std_vector_Sl_std_string_Sg____setitem__(arg1,arg2,(std::string const &)*arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return resultobj;
    fail:
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return NULL;
}


static PyObject *_wrap_stringV_append(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::vector<std::string >::value_type *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:stringV_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<std::string >::value_type", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<std::string >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    std_vector_Sl_std_string_Sg__append(arg1,(std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_delete_stringV(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_stringV",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * stringV_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ExcitationEnumeration__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,unsigned short > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ExcitationEnumeration")) goto fail;
    result = (std::map<std::string,unsigned short > *)new std::map<std::string,unsigned short >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ExcitationEnumeration__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,unsigned short > *arg1 = 0 ;
    std::map<std::string,unsigned short > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ExcitationEnumeration",&obj0)) goto fail;
    {
        std::map<std::string,unsigned short,std::less<std::string >,std::allocator<std::pair<std::string const,unsigned short > > > *ptr = (std::map<std::string,unsigned short,std::less<std::string >,std::allocator<std::pair<std::string const,unsigned short > > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::map<std::string,unsigned short >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::map<std::string,unsigned short >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (std::map<std::string,unsigned short > *)new std::map<std::string,unsigned short >((std::map<std::string,unsigned short > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_ExcitationEnumeration(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_ExcitationEnumeration__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::map<std::string,unsigned short,std::less<std::string >,std::allocator<std::pair<std::string const,unsigned short > > >**)(0));
        if (_v) {
            return _wrap_new_ExcitationEnumeration__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_ExcitationEnumeration'");
    return NULL;
}


static PyObject *_wrap_ExcitationEnumeration_empty(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,unsigned short > *arg1 = (std::map<std::string,unsigned short > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExcitationEnumeration_empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((std::map<std::string,unsigned short > const *)arg1)->empty();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExcitationEnumeration_size(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,unsigned short > *arg1 = (std::map<std::string,unsigned short > *) 0 ;
    std::map<std::string,unsigned short >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExcitationEnumeration_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::map<std::string,unsigned short > const *)arg1)->size();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExcitationEnumeration_clear(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,unsigned short > *arg1 = (std::map<std::string,unsigned short > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExcitationEnumeration_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExcitationEnumeration_swap(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,unsigned short > *arg1 = (std::map<std::string,unsigned short > *) 0 ;
    std::map<std::string,unsigned short > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ExcitationEnumeration_swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::map<std::string,unsigned short >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->swap(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExcitationEnumeration_get_allocator(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,unsigned short > *arg1 = (std::map<std::string,unsigned short > *) 0 ;
    SwigValueWrapper<std::allocator<std::pair<std::string const,unsigned short > > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExcitationEnumeration_get_allocator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::map<std::string,unsigned short > const *)arg1)->get_allocator();
    
    {
        std::map<std::string,unsigned short >::allocator_type * resultptr;
        resultptr = new std::map<std::string,unsigned short >::allocator_type((std::map<std::string,unsigned short >::allocator_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExcitationEnumeration_erase(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,unsigned short > *arg1 = (std::map<std::string,unsigned short > *) 0 ;
    std::map<std::string,unsigned short >::key_type *arg2 = 0 ;
    std::map<std::string,unsigned short >::size_type result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ExcitationEnumeration_erase",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::map<std::string,unsigned short >::key_type", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::map<std::string,unsigned short >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    result = (arg1)->erase((std::string const &)*arg2);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_ExcitationEnumeration_count(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,unsigned short > *arg1 = (std::map<std::string,unsigned short > *) 0 ;
    std::map<std::string,unsigned short >::key_type *arg2 = 0 ;
    std::map<std::string,unsigned short >::size_type result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ExcitationEnumeration_count",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::map<std::string,unsigned short >::key_type", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::map<std::string,unsigned short >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    result = ((std::map<std::string,unsigned short > const *)arg1)->count((std::string const &)*arg2);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_ExcitationEnumeration___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,unsigned short > *arg1 = (std::map<std::string,unsigned short > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExcitationEnumeration___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)std_map_Sl_std_string_Sc_unsigned_SS_short_Sg____nonzero__((std::map<std::string,unsigned short > const *)arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExcitationEnumeration___len__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,unsigned short > *arg1 = (std::map<std::string,unsigned short > *) 0 ;
    std::map<std::string,unsigned short >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExcitationEnumeration___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = std_map_Sl_std_string_Sc_unsigned_SS_short_Sg____len__((std::map<std::string,unsigned short > const *)arg1);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExcitationEnumeration___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,unsigned short > *arg1 = (std::map<std::string,unsigned short > *) 0 ;
    std::map<std::string,unsigned short >::key_type *arg2 = 0 ;
    std::map<std::string,unsigned short >::mapped_type result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ExcitationEnumeration___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::map<std::string,unsigned short >::key_type", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::map<std::string,unsigned short >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    {
        try {
            result = (std::map<std::string,unsigned short >::mapped_type)std_map_Sl_std_string_Sc_unsigned_SS_short_Sg____getitem__((std::map<std::string,unsigned short > const *)arg1,(std::string const &)*arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        resultobj = SWIG_From_unsigned_SS_short((unsigned short)(result)); 
    }
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_ExcitationEnumeration___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,unsigned short > *arg1 = (std::map<std::string,unsigned short > *) 0 ;
    std::map<std::string,unsigned short >::key_type *arg2 = 0 ;
    std::map<std::string,unsigned short >::mapped_type *arg3 = 0 ;
    int res2 = 0 ;
    std::map<std::string,unsigned short >::mapped_type temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ExcitationEnumeration___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::map<std::string,unsigned short >::key_type", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::map<std::string,unsigned short >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    {
        temp3 = (std::map<std::string,unsigned short >::mapped_type)(SWIG_As_unsigned_SS_short(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    {
        try {
            std_map_Sl_std_string_Sc_unsigned_SS_short_Sg____setitem__(arg1,(std::string const &)*arg2,(unsigned short const &)*arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_ExcitationEnumeration___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,unsigned short > *arg1 = (std::map<std::string,unsigned short > *) 0 ;
    std::map<std::string,unsigned short >::key_type *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ExcitationEnumeration___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::map<std::string,unsigned short >::key_type", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::map<std::string,unsigned short >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    {
        try {
            std_map_Sl_std_string_Sc_unsigned_SS_short_Sg____delitem__(arg1,(std::string const &)*arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_ExcitationEnumeration_has_key(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,unsigned short > *arg1 = (std::map<std::string,unsigned short > *) 0 ;
    std::map<std::string,unsigned short >::key_type *arg2 = 0 ;
    bool result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ExcitationEnumeration_has_key",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::map<std::string,unsigned short >::key_type", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::map<std::string,unsigned short >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    result = (bool)std_map_Sl_std_string_Sc_unsigned_SS_short_Sg__has_key((std::map<std::string,unsigned short > const *)arg1,(std::string const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_ExcitationEnumeration_keys(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,unsigned short > *arg1 = (std::map<std::string,unsigned short > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExcitationEnumeration_keys",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)std_map_Sl_std_string_Sc_unsigned_SS_short_Sg__keys(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExcitationEnumeration_values(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,unsigned short > *arg1 = (std::map<std::string,unsigned short > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExcitationEnumeration_values",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)std_map_Sl_std_string_Sc_unsigned_SS_short_Sg__values(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExcitationEnumeration_items(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,unsigned short > *arg1 = (std::map<std::string,unsigned short > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExcitationEnumeration_items",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)std_map_Sl_std_string_Sc_unsigned_SS_short_Sg__items(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExcitationEnumeration___contains__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,unsigned short > *arg1 = (std::map<std::string,unsigned short > *) 0 ;
    std::map<std::string,unsigned short >::key_type *arg2 = 0 ;
    bool result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ExcitationEnumeration___contains__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::map<std::string,unsigned short >::key_type", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::map<std::string,unsigned short >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    result = (bool)std_map_Sl_std_string_Sc_unsigned_SS_short_Sg____contains__(arg1,(std::string const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_ExcitationEnumeration___iter__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,unsigned short > *arg1 = (std::map<std::string,unsigned short > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExcitationEnumeration___iter__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)std_map_Sl_std_string_Sc_unsigned_SS_short_Sg____iter__(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ExcitationEnumeration(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,unsigned short > *arg1 = (std::map<std::string,unsigned short > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ExcitationEnumeration",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ExcitationEnumeration_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ExcitedRotamers__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,Rotamer * > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ExcitedRotamers")) goto fail;
    result = (std::map<std::string,Rotamer * > *)new std::map<std::string,Rotamer * >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ExcitedRotamers__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,Rotamer * > *arg1 = 0 ;
    std::map<std::string,Rotamer * > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ExcitedRotamers",&obj0)) goto fail;
    {
        std::map<std::string,Rotamer *,std::less<std::string >,std::allocator<std::pair<std::string const,Rotamer * > > > *ptr = (std::map<std::string,Rotamer *,std::less<std::string >,std::allocator<std::pair<std::string const,Rotamer * > > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::map<std::string,Rotamer * >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::map<std::string,Rotamer * >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (std::map<std::string,Rotamer * > *)new std::map<std::string,Rotamer * >((std::map<std::string,Rotamer * > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_ExcitedRotamers(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_ExcitedRotamers__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::map<std::string,Rotamer *,std::less<std::string >,std::allocator<std::pair<std::string const,Rotamer * > > >**)(0));
        if (_v) {
            return _wrap_new_ExcitedRotamers__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_ExcitedRotamers'");
    return NULL;
}


static PyObject *_wrap_ExcitedRotamers_empty(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,Rotamer * > *arg1 = (std::map<std::string,Rotamer * > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExcitedRotamers_empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((std::map<std::string,Rotamer * > const *)arg1)->empty();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExcitedRotamers_size(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,Rotamer * > *arg1 = (std::map<std::string,Rotamer * > *) 0 ;
    std::map<std::string,Rotamer * >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExcitedRotamers_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::map<std::string,Rotamer * > const *)arg1)->size();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExcitedRotamers_clear(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,Rotamer * > *arg1 = (std::map<std::string,Rotamer * > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExcitedRotamers_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExcitedRotamers_swap(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,Rotamer * > *arg1 = (std::map<std::string,Rotamer * > *) 0 ;
    std::map<std::string,Rotamer * > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ExcitedRotamers_swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::map<std::string,Rotamer * >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->swap(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExcitedRotamers_get_allocator(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,Rotamer * > *arg1 = (std::map<std::string,Rotamer * > *) 0 ;
    SwigValueWrapper<std::allocator<std::pair<std::string const,Rotamer * > > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExcitedRotamers_get_allocator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::map<std::string,Rotamer * > const *)arg1)->get_allocator();
    
    {
        std::map<std::string,Rotamer * >::allocator_type * resultptr;
        resultptr = new std::map<std::string,Rotamer * >::allocator_type((std::map<std::string,Rotamer * >::allocator_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExcitedRotamers_erase(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,Rotamer * > *arg1 = (std::map<std::string,Rotamer * > *) 0 ;
    std::map<std::string,Rotamer * >::key_type *arg2 = 0 ;
    std::map<std::string,Rotamer * >::size_type result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ExcitedRotamers_erase",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::map<std::string,Rotamer * >::key_type", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::map<std::string,Rotamer * >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    result = (arg1)->erase((std::string const &)*arg2);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_ExcitedRotamers_count(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,Rotamer * > *arg1 = (std::map<std::string,Rotamer * > *) 0 ;
    std::map<std::string,Rotamer * >::key_type *arg2 = 0 ;
    std::map<std::string,Rotamer * >::size_type result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ExcitedRotamers_count",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::map<std::string,Rotamer * >::key_type", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::map<std::string,Rotamer * >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    result = ((std::map<std::string,Rotamer * > const *)arg1)->count((std::string const &)*arg2);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_ExcitedRotamers___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,Rotamer * > *arg1 = (std::map<std::string,Rotamer * > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExcitedRotamers___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)std_map_Sl_std_string_Sc_Rotamer_Sm__Sg____nonzero__((std::map<std::string,Rotamer * > const *)arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExcitedRotamers___len__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,Rotamer * > *arg1 = (std::map<std::string,Rotamer * > *) 0 ;
    std::map<std::string,Rotamer * >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExcitedRotamers___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = std_map_Sl_std_string_Sc_Rotamer_Sm__Sg____len__((std::map<std::string,Rotamer * > const *)arg1);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExcitedRotamers___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,Rotamer * > *arg1 = (std::map<std::string,Rotamer * > *) 0 ;
    std::map<std::string,Rotamer * >::key_type *arg2 = 0 ;
    std::map<std::string,Rotamer * >::mapped_type result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ExcitedRotamers___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::map<std::string,Rotamer * >::key_type", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::map<std::string,Rotamer * >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    {
        try {
            result = (std::map<std::string,Rotamer * >::mapped_type)std_map_Sl_std_string_Sc_Rotamer_Sm__Sg____getitem__((std::map<std::string,Rotamer * > const *)arg1,(std::string const &)*arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Rotamer, 0);
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_ExcitedRotamers___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,Rotamer * > *arg1 = (std::map<std::string,Rotamer * > *) 0 ;
    std::map<std::string,Rotamer * >::key_type *arg2 = 0 ;
    std::map<std::string,Rotamer * >::mapped_type *arg3 = 0 ;
    int res2 = 0 ;
    std::map<std::string,Rotamer * >::mapped_type temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ExcitedRotamers___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::map<std::string,Rotamer * >::key_type", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::map<std::string,Rotamer * >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&temp3, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    arg3 = &temp3;
    
    {
        try {
            std_map_Sl_std_string_Sc_Rotamer_Sm__Sg____setitem__(arg1,(std::string const &)*arg2,(Rotamer *const &)*arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_ExcitedRotamers___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,Rotamer * > *arg1 = (std::map<std::string,Rotamer * > *) 0 ;
    std::map<std::string,Rotamer * >::key_type *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ExcitedRotamers___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::map<std::string,Rotamer * >::key_type", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::map<std::string,Rotamer * >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    {
        try {
            std_map_Sl_std_string_Sc_Rotamer_Sm__Sg____delitem__(arg1,(std::string const &)*arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_ExcitedRotamers_has_key(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,Rotamer * > *arg1 = (std::map<std::string,Rotamer * > *) 0 ;
    std::map<std::string,Rotamer * >::key_type *arg2 = 0 ;
    bool result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ExcitedRotamers_has_key",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::map<std::string,Rotamer * >::key_type", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::map<std::string,Rotamer * >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    result = (bool)std_map_Sl_std_string_Sc_Rotamer_Sm__Sg__has_key((std::map<std::string,Rotamer * > const *)arg1,(std::string const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_ExcitedRotamers_keys(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,Rotamer * > *arg1 = (std::map<std::string,Rotamer * > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExcitedRotamers_keys",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)std_map_Sl_std_string_Sc_Rotamer_Sm__Sg__keys(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExcitedRotamers_values(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,Rotamer * > *arg1 = (std::map<std::string,Rotamer * > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExcitedRotamers_values",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)std_map_Sl_std_string_Sc_Rotamer_Sm__Sg__values(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExcitedRotamers_items(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,Rotamer * > *arg1 = (std::map<std::string,Rotamer * > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExcitedRotamers_items",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)std_map_Sl_std_string_Sc_Rotamer_Sm__Sg__items(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExcitedRotamers___contains__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,Rotamer * > *arg1 = (std::map<std::string,Rotamer * > *) 0 ;
    std::map<std::string,Rotamer * >::key_type *arg2 = 0 ;
    bool result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ExcitedRotamers___contains__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::map<std::string,Rotamer * >::key_type", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::map<std::string,Rotamer * >::key_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    result = (bool)std_map_Sl_std_string_Sc_Rotamer_Sm__Sg____contains__(arg1,(std::string const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_ExcitedRotamers___iter__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,Rotamer * > *arg1 = (std::map<std::string,Rotamer * > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ExcitedRotamers___iter__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (PyObject *)std_map_Sl_std_string_Sc_Rotamer_Sm__Sg____iter__(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ExcitedRotamers(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::map<std::string,Rotamer * > *arg1 = (std::map<std::string,Rotamer * > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ExcitedRotamers",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ExcitedRotamers_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RotamerV__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_RotamerV")) goto fail;
    result = (std::vector<Rotamer * > *)new std::vector<Rotamer * >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RotamerV__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * > *arg1 = 0 ;
    std::vector<Rotamer * > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_RotamerV",&obj0)) goto fail;
    {
        std::vector<Rotamer*,std::allocator<Rotamer * > > *ptr = (std::vector<Rotamer*,std::allocator<Rotamer * > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<Rotamer * >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<Rotamer * >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (std::vector<Rotamer * > *)new std::vector<Rotamer * >((std::vector<Rotamer * > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_RotamerV_empty(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * > *arg1 = (std::vector<Rotamer * > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotamerV_empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((std::vector<Rotamer * > const *)arg1)->empty();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerV_size(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * > *arg1 = (std::vector<Rotamer * > *) 0 ;
    std::vector<Rotamer * >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotamerV_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::vector<Rotamer * > const *)arg1)->size();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerV_clear(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * > *arg1 = (std::vector<Rotamer * > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotamerV_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerV_swap(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * > *arg1 = (std::vector<Rotamer * > *) 0 ;
    std::vector<Rotamer * > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotamerV_swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Rotamer * >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->swap(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerV_get_allocator(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * > *arg1 = (std::vector<Rotamer * > *) 0 ;
    SwigValueWrapper<std::allocator<Rotamer * > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotamerV_get_allocator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::vector<Rotamer * > const *)arg1)->get_allocator();
    
    {
        std::vector<Rotamer * >::allocator_type * resultptr;
        resultptr = new std::vector<Rotamer * >::allocator_type((std::vector<Rotamer * >::allocator_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__allocatorTRotamer_p_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RotamerV__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * >::size_type arg1 ;
    std::vector<Rotamer * > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_RotamerV",&obj0)) goto fail;
    {
        arg1 = (std::vector<Rotamer * >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (std::vector<Rotamer * > *)new std::vector<Rotamer * >(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerV_pop_back(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * > *arg1 = (std::vector<Rotamer * > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotamerV_pop_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->pop_back();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerV_resize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * > *arg1 = (std::vector<Rotamer * > *) 0 ;
    std::vector<Rotamer * >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotamerV_resize",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Rotamer * >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->resize(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RotamerV__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * >::size_type arg1 ;
    std::vector<Rotamer * >::value_type arg2 = (std::vector<Rotamer * >::value_type) 0 ;
    std::vector<Rotamer * > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_RotamerV",&obj0,&obj1)) goto fail;
    {
        arg1 = (std::vector<Rotamer * >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (std::vector<Rotamer * > *)new std::vector<Rotamer * >(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RotamerV(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_RotamerV__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            return _wrap_new_RotamerV__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::vector<Rotamer*,std::allocator<Rotamer * > >**)(0));
        if (_v) {
            return _wrap_new_RotamerV__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_Rotamer, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_new_RotamerV__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_RotamerV'");
    return NULL;
}


static PyObject *_wrap_RotamerV_push_back(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * > *arg1 = (std::vector<Rotamer * > *) 0 ;
    std::vector<Rotamer * >::value_type arg2 = (std::vector<Rotamer * >::value_type) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotamerV_push_back",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->push_back(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerV_front(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * > *arg1 = (std::vector<Rotamer * > *) 0 ;
    std::vector<Rotamer * >::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotamerV_front",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<Rotamer * >::value_type)((std::vector<Rotamer * > const *)arg1)->front();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Rotamer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerV_back(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * > *arg1 = (std::vector<Rotamer * > *) 0 ;
    std::vector<Rotamer * >::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotamerV_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::vector<Rotamer * >::value_type)((std::vector<Rotamer * > const *)arg1)->back();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Rotamer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerV_assign(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * > *arg1 = (std::vector<Rotamer * > *) 0 ;
    std::vector<Rotamer * >::size_type arg2 ;
    std::vector<Rotamer * >::value_type arg3 = (std::vector<Rotamer * >::value_type) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:RotamerV_assign",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Rotamer * >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    (arg1)->assign(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerV_resize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * > *arg1 = (std::vector<Rotamer * > *) 0 ;
    std::vector<Rotamer * >::size_type arg2 ;
    std::vector<Rotamer * >::value_type arg3 = (std::vector<Rotamer * >::value_type) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:RotamerV_resize",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Rotamer * >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    (arg1)->resize(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerV_resize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_RotamerV_resize__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_Rotamer, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_RotamerV_resize__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'RotamerV_resize'");
    return NULL;
}


static PyObject *_wrap_RotamerV_reserve(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * > *arg1 = (std::vector<Rotamer * > *) 0 ;
    std::vector<Rotamer * >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotamerV_reserve",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Rotamer * >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->reserve(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerV_capacity(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * > *arg1 = (std::vector<Rotamer * > *) 0 ;
    std::vector<Rotamer * >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotamerV_capacity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::vector<Rotamer * > const *)arg1)->capacity();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerV___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * > *arg1 = (std::vector<Rotamer * > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotamerV___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)std_vector_Sl_Rotamer_Sm__Sg____nonzero__((std::vector<Rotamer * > const *)arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerV___len__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * > *arg1 = (std::vector<Rotamer * > *) 0 ;
    std::vector<Rotamer * >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotamerV___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = std_vector_Sl_Rotamer_Sm__Sg____len__((std::vector<Rotamer * > const *)arg1);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerV_pop(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * > *arg1 = (std::vector<Rotamer * > *) 0 ;
    std::vector<Rotamer * >::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RotamerV_pop",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (std::vector<Rotamer * >::value_type)std_vector_Sl_Rotamer_Sm__Sg__pop(arg1);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Rotamer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerV___getslice__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * > *arg1 = (std::vector<Rotamer * > *) 0 ;
    std::vector<Rotamer * >::difference_type arg2 ;
    std::vector<Rotamer * >::difference_type arg3 ;
    std::vector<Rotamer *,std::allocator<Rotamer * > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:RotamerV___getslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Rotamer * >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<Rotamer * >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<Rotamer *,std::allocator<Rotamer * > > *)std_vector_Sl_Rotamer_Sm__Sg____getslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerV___setslice__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * > *arg1 = (std::vector<Rotamer * > *) 0 ;
    std::vector<Rotamer * >::difference_type arg2 ;
    std::vector<Rotamer * >::difference_type arg3 ;
    std::vector<Rotamer *,std::allocator<Rotamer * > > *arg4 = 0 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:RotamerV___setslice__",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Rotamer * >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<Rotamer * >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::vector<Rotamer*,std::allocator<Rotamer * > > *ptr = (std::vector<Rotamer*,std::allocator<Rotamer * > > *)0;
        res4 = swig::asptr(obj3, &ptr);
        if (!res4) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<Rotamer *,std::allocator<Rotamer * > >", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<Rotamer *,std::allocator<Rotamer * > >");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = ptr;
    }
    {
        try {
            std_vector_Sl_Rotamer_Sm__Sg____setslice__(arg1,arg2,arg3,(std::vector<Rotamer *,std::allocator<Rotamer * > > const &)*arg4);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        catch (std::invalid_argument& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_TypeError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }      
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return resultobj;
    fail:
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return NULL;
}


static PyObject *_wrap_RotamerV___delslice__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * > *arg1 = (std::vector<Rotamer * > *) 0 ;
    std::vector<Rotamer * >::difference_type arg2 ;
    std::vector<Rotamer * >::difference_type arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:RotamerV___delslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Rotamer * >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<Rotamer * >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Rotamer_Sm__Sg____delslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerV___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * > *arg1 = (std::vector<Rotamer * > *) 0 ;
    std::vector<Rotamer * >::difference_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotamerV___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Rotamer * >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Rotamer_Sm__Sg____delitem__(arg1,arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerV___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * > *arg1 = (std::vector<Rotamer * > *) 0 ;
    std::vector<Rotamer * >::difference_type arg2 ;
    std::vector<Rotamer * >::value_type result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotamerV___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Rotamer * >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<Rotamer * >::value_type)std_vector_Sl_Rotamer_Sm__Sg____getitem__(arg1,arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Rotamer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerV___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * > *arg1 = (std::vector<Rotamer * > *) 0 ;
    std::vector<Rotamer * >::difference_type arg2 ;
    std::vector<Rotamer * >::value_type arg3 = (std::vector<Rotamer * >::value_type) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:RotamerV___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Rotamer * >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        try {
            std_vector_Sl_Rotamer_Sm__Sg____setitem__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RotamerV_append(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * > *arg1 = (std::vector<Rotamer * > *) 0 ;
    std::vector<Rotamer * >::value_type arg2 = (std::vector<Rotamer * >::value_type) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RotamerV_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    std_vector_Sl_Rotamer_Sm__Sg__append(arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_RotamerV(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<Rotamer * > *arg1 = (std::vector<Rotamer * > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RotamerV",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RotamerV_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_pairds__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::pair<double,std::string > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_pairds")) goto fail;
    result = (std::pair<double,std::string > *)new std::pair<double,std::string >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__pairTdouble_std__string_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_pairds__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    std::string arg2 ;
    std::pair<double,std::string > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_pairds",&obj0,&obj1)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (std::pair<double,std::string > *)new std::pair<double,std::string >(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__pairTdouble_std__string_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_pairds__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::pair<double,std::string > *arg1 = 0 ;
    std::pair<double,std::string > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_pairds",&obj0)) goto fail;
    {
        std::pair<double,std::string > *ptr = (std::pair<double,std::string > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::pair<double,std::string >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::pair<double,std::string >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (std::pair<double,std::string > *)new std::pair<double,std::string >((std::pair<double,std::string > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__pairTdouble_std__string_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_pairds(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_pairds__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::pair<double,std::string >**)(0));
        if (_v) {
            return _wrap_new_pairds__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                return _wrap_new_pairds__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_pairds'");
    return NULL;
}


static PyObject *_wrap_pairds_first_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::pair<double,std::string > *arg1 = (std::pair<double,std::string > *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pairds_first_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__pairTdouble_std__string_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->first = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pairds_first_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::pair<double,std::string > *arg1 = (std::pair<double,std::string > *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pairds_first_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__pairTdouble_std__string_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->first);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pairds_second_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::pair<double,std::string > *arg1 = (std::pair<double,std::string > *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pairds_second_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__pairTdouble_std__string_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->second = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pairds_second_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::pair<double,std::string > *arg1 = (std::pair<double,std::string > *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pairds_second_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__pairTdouble_std__string_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->second);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_pairds(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::pair<double,std::string > *arg1 = (std::pair<double,std::string > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_pairds",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__pairTdouble_std__string_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * pairds_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__pairTdouble_std__string_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MutInfoListPy__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_MutInfoListPy")) goto fail;
    result = (std::vector<MutInfo > *)new std::vector<MutInfo >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MutInfoListPy__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo > *arg1 = 0 ;
    std::vector<MutInfo > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_MutInfoListPy",&obj0)) goto fail;
    {
        std::vector<MutInfo,std::allocator<MutInfo > > *ptr = (std::vector<MutInfo,std::allocator<MutInfo > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<MutInfo >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<MutInfo >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (std::vector<MutInfo > *)new std::vector<MutInfo >((std::vector<MutInfo > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_MutInfoListPy_empty(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo > *arg1 = (std::vector<MutInfo > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfoListPy_empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((std::vector<MutInfo > const *)arg1)->empty();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoListPy_size(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo > *arg1 = (std::vector<MutInfo > *) 0 ;
    std::vector<MutInfo >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfoListPy_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::vector<MutInfo > const *)arg1)->size();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoListPy_clear(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo > *arg1 = (std::vector<MutInfo > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfoListPy_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoListPy_swap(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo > *arg1 = (std::vector<MutInfo > *) 0 ;
    std::vector<MutInfo > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfoListPy_swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<MutInfo >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->swap(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoListPy_get_allocator(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo > *arg1 = (std::vector<MutInfo > *) 0 ;
    SwigValueWrapper<std::allocator<MutInfo > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfoListPy_get_allocator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::vector<MutInfo > const *)arg1)->get_allocator();
    
    {
        std::vector<MutInfo >::allocator_type * resultptr;
        resultptr = new std::vector<MutInfo >::allocator_type((std::vector<MutInfo >::allocator_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__allocatorTMutInfo_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MutInfoListPy__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo >::size_type arg1 ;
    std::vector<MutInfo > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_MutInfoListPy",&obj0)) goto fail;
    {
        arg1 = (std::vector<MutInfo >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (std::vector<MutInfo > *)new std::vector<MutInfo >(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoListPy_pop_back(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo > *arg1 = (std::vector<MutInfo > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfoListPy_pop_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->pop_back();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoListPy_resize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo > *arg1 = (std::vector<MutInfo > *) 0 ;
    std::vector<MutInfo >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfoListPy_resize",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<MutInfo >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->resize(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MutInfoListPy__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo >::size_type arg1 ;
    std::vector<MutInfo >::value_type *arg2 = 0 ;
    std::vector<MutInfo > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_MutInfoListPy",&obj0,&obj1)) goto fail;
    {
        arg1 = (std::vector<MutInfo >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<MutInfo >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (std::vector<MutInfo > *)new std::vector<MutInfo >(arg1,(MutInfo const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MutInfoListPy(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_MutInfoListPy__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            return _wrap_new_MutInfoListPy__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::vector<MutInfo,std::allocator<MutInfo > >**)(0));
        if (_v) {
            return _wrap_new_MutInfoListPy__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_MutInfoListPy__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_MutInfoListPy'");
    return NULL;
}


static PyObject *_wrap_MutInfoListPy_push_back(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo > *arg1 = (std::vector<MutInfo > *) 0 ;
    std::vector<MutInfo >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfoListPy_push_back",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<MutInfo >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->push_back((MutInfo const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoListPy_front(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo > *arg1 = (std::vector<MutInfo > *) 0 ;
    std::vector<MutInfo >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfoListPy_front",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<MutInfo >::value_type const &_result_ref = ((std::vector<MutInfo > const *)arg1)->front();
        result = (std::vector<MutInfo >::value_type *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_MutInfo, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoListPy_back(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo > *arg1 = (std::vector<MutInfo > *) 0 ;
    std::vector<MutInfo >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfoListPy_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<MutInfo >::value_type const &_result_ref = ((std::vector<MutInfo > const *)arg1)->back();
        result = (std::vector<MutInfo >::value_type *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_MutInfo, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoListPy_assign(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo > *arg1 = (std::vector<MutInfo > *) 0 ;
    std::vector<MutInfo >::size_type arg2 ;
    std::vector<MutInfo >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MutInfoListPy_assign",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<MutInfo >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<MutInfo >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->assign(arg2,(MutInfo const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoListPy_resize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo > *arg1 = (std::vector<MutInfo > *) 0 ;
    std::vector<MutInfo >::size_type arg2 ;
    std::vector<MutInfo >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MutInfoListPy_resize",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<MutInfo >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<MutInfo >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->resize(arg2,(MutInfo const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoListPy_resize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_MutInfoListPy_resize__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_MutInfo, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_MutInfoListPy_resize__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'MutInfoListPy_resize'");
    return NULL;
}


static PyObject *_wrap_MutInfoListPy_reserve(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo > *arg1 = (std::vector<MutInfo > *) 0 ;
    std::vector<MutInfo >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfoListPy_reserve",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<MutInfo >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->reserve(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoListPy_capacity(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo > *arg1 = (std::vector<MutInfo > *) 0 ;
    std::vector<MutInfo >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfoListPy_capacity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::vector<MutInfo > const *)arg1)->capacity();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoListPy___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo > *arg1 = (std::vector<MutInfo > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfoListPy___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)std_vector_Sl_MutInfo_Sg____nonzero__((std::vector<MutInfo > const *)arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoListPy___len__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo > *arg1 = (std::vector<MutInfo > *) 0 ;
    std::vector<MutInfo >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfoListPy___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = std_vector_Sl_MutInfo_Sg____len__((std::vector<MutInfo > const *)arg1);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoListPy_pop(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo > *arg1 = (std::vector<MutInfo > *) 0 ;
    std::vector<MutInfo >::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfoListPy_pop",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_vector_Sl_MutInfo_Sg__pop(arg1);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        std::vector<MutInfo >::value_type * resultptr;
        resultptr = new std::vector<MutInfo >::value_type((std::vector<MutInfo >::value_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_MutInfo, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoListPy___getslice__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo > *arg1 = (std::vector<MutInfo > *) 0 ;
    std::vector<MutInfo >::difference_type arg2 ;
    std::vector<MutInfo >::difference_type arg3 ;
    std::vector<MutInfo,std::allocator<MutInfo > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MutInfoListPy___getslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<MutInfo >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<MutInfo >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<MutInfo,std::allocator<MutInfo > > *)std_vector_Sl_MutInfo_Sg____getslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoListPy___setslice__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo > *arg1 = (std::vector<MutInfo > *) 0 ;
    std::vector<MutInfo >::difference_type arg2 ;
    std::vector<MutInfo >::difference_type arg3 ;
    std::vector<MutInfo,std::allocator<MutInfo > > *arg4 = 0 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:MutInfoListPy___setslice__",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<MutInfo >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<MutInfo >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::vector<MutInfo,std::allocator<MutInfo > > *ptr = (std::vector<MutInfo,std::allocator<MutInfo > > *)0;
        res4 = swig::asptr(obj3, &ptr);
        if (!res4) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<MutInfo,std::allocator<MutInfo > >", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<MutInfo,std::allocator<MutInfo > >");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = ptr;
    }
    {
        try {
            std_vector_Sl_MutInfo_Sg____setslice__(arg1,arg2,arg3,(std::vector<MutInfo,std::allocator<MutInfo > > const &)*arg4);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        catch (std::invalid_argument& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_TypeError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }      
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return resultobj;
    fail:
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return NULL;
}


static PyObject *_wrap_MutInfoListPy___delslice__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo > *arg1 = (std::vector<MutInfo > *) 0 ;
    std::vector<MutInfo >::difference_type arg2 ;
    std::vector<MutInfo >::difference_type arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MutInfoListPy___delslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<MutInfo >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<MutInfo >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_MutInfo_Sg____delslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoListPy___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo > *arg1 = (std::vector<MutInfo > *) 0 ;
    std::vector<MutInfo >::difference_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfoListPy___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<MutInfo >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_MutInfo_Sg____delitem__(arg1,arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoListPy___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo > *arg1 = (std::vector<MutInfo > *) 0 ;
    std::vector<MutInfo >::difference_type arg2 ;
    std::vector<MutInfo >::value_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfoListPy___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<MutInfo >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            {
                std::vector<MutInfo >::value_type const &_result_ref = std_vector_Sl_MutInfo_Sg____getitem__((std::vector<MutInfo > const *)arg1,arg2);
                result = (std::vector<MutInfo >::value_type *) &_result_ref;
            }
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_MutInfo, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoListPy___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo > *arg1 = (std::vector<MutInfo > *) 0 ;
    std::vector<MutInfo >::difference_type arg2 ;
    std::vector<MutInfo >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MutInfoListPy___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<MutInfo >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<MutInfo >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_MutInfo_Sg____setitem__(arg1,arg2,(MutInfo const &)*arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoListPy_append(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo > *arg1 = (std::vector<MutInfo > *) 0 ;
    std::vector<MutInfo >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfoListPy_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfo, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<MutInfo >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    std_vector_Sl_MutInfo_Sg__append(arg1,(MutInfo const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_MutInfoListPy(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfo > *arg1 = (std::vector<MutInfo > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_MutInfoListPy",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MutInfoListPy_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MutInfoPairListPy__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_MutInfoPairListPy")) goto fail;
    result = (std::vector<MutInfoPair > *)new std::vector<MutInfoPair >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MutInfoPairListPy__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair > *arg1 = 0 ;
    std::vector<MutInfoPair > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_MutInfoPairListPy",&obj0)) goto fail;
    {
        std::vector<MutInfoPair,std::allocator<MutInfoPair > > *ptr = (std::vector<MutInfoPair,std::allocator<MutInfoPair > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<MutInfoPair >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<MutInfoPair >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (std::vector<MutInfoPair > *)new std::vector<MutInfoPair >((std::vector<MutInfoPair > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_MutInfoPairListPy_empty(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair > *arg1 = (std::vector<MutInfoPair > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfoPairListPy_empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((std::vector<MutInfoPair > const *)arg1)->empty();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPairListPy_size(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair > *arg1 = (std::vector<MutInfoPair > *) 0 ;
    std::vector<MutInfoPair >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfoPairListPy_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::vector<MutInfoPair > const *)arg1)->size();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPairListPy_clear(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair > *arg1 = (std::vector<MutInfoPair > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfoPairListPy_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPairListPy_swap(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair > *arg1 = (std::vector<MutInfoPair > *) 0 ;
    std::vector<MutInfoPair > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfoPairListPy_swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<MutInfoPair >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->swap(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPairListPy_get_allocator(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair > *arg1 = (std::vector<MutInfoPair > *) 0 ;
    SwigValueWrapper<std::allocator<MutInfoPair > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfoPairListPy_get_allocator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::vector<MutInfoPair > const *)arg1)->get_allocator();
    
    {
        std::vector<MutInfoPair >::allocator_type * resultptr;
        resultptr = new std::vector<MutInfoPair >::allocator_type((std::vector<MutInfoPair >::allocator_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__allocatorTMutInfoPair_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MutInfoPairListPy__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair >::size_type arg1 ;
    std::vector<MutInfoPair > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_MutInfoPairListPy",&obj0)) goto fail;
    {
        arg1 = (std::vector<MutInfoPair >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (std::vector<MutInfoPair > *)new std::vector<MutInfoPair >(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPairListPy_pop_back(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair > *arg1 = (std::vector<MutInfoPair > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfoPairListPy_pop_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->pop_back();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPairListPy_resize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair > *arg1 = (std::vector<MutInfoPair > *) 0 ;
    std::vector<MutInfoPair >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfoPairListPy_resize",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<MutInfoPair >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->resize(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MutInfoPairListPy__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair >::size_type arg1 ;
    std::vector<MutInfoPair >::value_type *arg2 = 0 ;
    std::vector<MutInfoPair > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_MutInfoPairListPy",&obj0,&obj1)) goto fail;
    {
        arg1 = (std::vector<MutInfoPair >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfoPair, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<MutInfoPair >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (std::vector<MutInfoPair > *)new std::vector<MutInfoPair >(arg1,(MutInfoPair const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MutInfoPairListPy(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_MutInfoPairListPy__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            return _wrap_new_MutInfoPairListPy__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::vector<MutInfoPair,std::allocator<MutInfoPair > >**)(0));
        if (_v) {
            return _wrap_new_MutInfoPairListPy__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_MutInfoPair, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_MutInfoPairListPy__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_MutInfoPairListPy'");
    return NULL;
}


static PyObject *_wrap_MutInfoPairListPy_push_back(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair > *arg1 = (std::vector<MutInfoPair > *) 0 ;
    std::vector<MutInfoPair >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfoPairListPy_push_back",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfoPair, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<MutInfoPair >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->push_back((MutInfoPair const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPairListPy_front(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair > *arg1 = (std::vector<MutInfoPair > *) 0 ;
    std::vector<MutInfoPair >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfoPairListPy_front",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<MutInfoPair >::value_type const &_result_ref = ((std::vector<MutInfoPair > const *)arg1)->front();
        result = (std::vector<MutInfoPair >::value_type *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_MutInfoPair, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPairListPy_back(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair > *arg1 = (std::vector<MutInfoPair > *) 0 ;
    std::vector<MutInfoPair >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfoPairListPy_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<MutInfoPair >::value_type const &_result_ref = ((std::vector<MutInfoPair > const *)arg1)->back();
        result = (std::vector<MutInfoPair >::value_type *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_MutInfoPair, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPairListPy_assign(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair > *arg1 = (std::vector<MutInfoPair > *) 0 ;
    std::vector<MutInfoPair >::size_type arg2 ;
    std::vector<MutInfoPair >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MutInfoPairListPy_assign",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<MutInfoPair >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_MutInfoPair, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<MutInfoPair >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->assign(arg2,(MutInfoPair const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPairListPy_resize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair > *arg1 = (std::vector<MutInfoPair > *) 0 ;
    std::vector<MutInfoPair >::size_type arg2 ;
    std::vector<MutInfoPair >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MutInfoPairListPy_resize",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<MutInfoPair >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_MutInfoPair, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<MutInfoPair >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->resize(arg2,(MutInfoPair const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPairListPy_resize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_MutInfoPairListPy_resize__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_MutInfoPair, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_MutInfoPairListPy_resize__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'MutInfoPairListPy_resize'");
    return NULL;
}


static PyObject *_wrap_MutInfoPairListPy_reserve(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair > *arg1 = (std::vector<MutInfoPair > *) 0 ;
    std::vector<MutInfoPair >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfoPairListPy_reserve",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<MutInfoPair >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->reserve(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPairListPy_capacity(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair > *arg1 = (std::vector<MutInfoPair > *) 0 ;
    std::vector<MutInfoPair >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfoPairListPy_capacity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((std::vector<MutInfoPair > const *)arg1)->capacity();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPairListPy___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair > *arg1 = (std::vector<MutInfoPair > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfoPairListPy___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)std_vector_Sl_MutInfoPair_Sg____nonzero__((std::vector<MutInfoPair > const *)arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPairListPy___len__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair > *arg1 = (std::vector<MutInfoPair > *) 0 ;
    std::vector<MutInfoPair >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfoPairListPy___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = std_vector_Sl_MutInfoPair_Sg____len__((std::vector<MutInfoPair > const *)arg1);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPairListPy_pop(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair > *arg1 = (std::vector<MutInfoPair > *) 0 ;
    std::vector<MutInfoPair >::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MutInfoPairListPy_pop",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_vector_Sl_MutInfoPair_Sg__pop(arg1);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        std::vector<MutInfoPair >::value_type * resultptr;
        resultptr = new std::vector<MutInfoPair >::value_type((std::vector<MutInfoPair >::value_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_MutInfoPair, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPairListPy___getslice__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair > *arg1 = (std::vector<MutInfoPair > *) 0 ;
    std::vector<MutInfoPair >::difference_type arg2 ;
    std::vector<MutInfoPair >::difference_type arg3 ;
    std::vector<MutInfoPair,std::allocator<MutInfoPair > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MutInfoPairListPy___getslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<MutInfoPair >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<MutInfoPair >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<MutInfoPair,std::allocator<MutInfoPair > > *)std_vector_Sl_MutInfoPair_Sg____getslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPairListPy___setslice__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair > *arg1 = (std::vector<MutInfoPair > *) 0 ;
    std::vector<MutInfoPair >::difference_type arg2 ;
    std::vector<MutInfoPair >::difference_type arg3 ;
    std::vector<MutInfoPair,std::allocator<MutInfoPair > > *arg4 = 0 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:MutInfoPairListPy___setslice__",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<MutInfoPair >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<MutInfoPair >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::vector<MutInfoPair,std::allocator<MutInfoPair > > *ptr = (std::vector<MutInfoPair,std::allocator<MutInfoPair > > *)0;
        res4 = swig::asptr(obj3, &ptr);
        if (!res4) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<MutInfoPair,std::allocator<MutInfoPair > >", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<MutInfoPair,std::allocator<MutInfoPair > >");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = ptr;
    }
    {
        try {
            std_vector_Sl_MutInfoPair_Sg____setslice__(arg1,arg2,arg3,(std::vector<MutInfoPair,std::allocator<MutInfoPair > > const &)*arg4);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        catch (std::invalid_argument& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_TypeError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }      
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return resultobj;
    fail:
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return NULL;
}


static PyObject *_wrap_MutInfoPairListPy___delslice__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair > *arg1 = (std::vector<MutInfoPair > *) 0 ;
    std::vector<MutInfoPair >::difference_type arg2 ;
    std::vector<MutInfoPair >::difference_type arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MutInfoPairListPy___delslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<MutInfoPair >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<MutInfoPair >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_MutInfoPair_Sg____delslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPairListPy___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair > *arg1 = (std::vector<MutInfoPair > *) 0 ;
    std::vector<MutInfoPair >::difference_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfoPairListPy___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<MutInfoPair >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_MutInfoPair_Sg____delitem__(arg1,arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPairListPy___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair > *arg1 = (std::vector<MutInfoPair > *) 0 ;
    std::vector<MutInfoPair >::difference_type arg2 ;
    std::vector<MutInfoPair >::value_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfoPairListPy___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<MutInfoPair >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            {
                std::vector<MutInfoPair >::value_type const &_result_ref = std_vector_Sl_MutInfoPair_Sg____getitem__((std::vector<MutInfoPair > const *)arg1,arg2);
                result = (std::vector<MutInfoPair >::value_type *) &_result_ref;
            }
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_MutInfoPair, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPairListPy___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair > *arg1 = (std::vector<MutInfoPair > *) 0 ;
    std::vector<MutInfoPair >::difference_type arg2 ;
    std::vector<MutInfoPair >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MutInfoPairListPy___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<MutInfoPair >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_MutInfoPair, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<MutInfoPair >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_MutInfoPair_Sg____setitem__(arg1,arg2,(MutInfoPair const &)*arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@/exec/swig/share/swig/1.3.24/exception.i,336,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MutInfoPairListPy_append(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair > *arg1 = (std::vector<MutInfoPair > *) 0 ;
    std::vector<MutInfoPair >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MutInfoPairListPy_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_MutInfoPair, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<MutInfoPair >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    std_vector_Sl_MutInfoPair_Sg__append(arg1,(MutInfoPair const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_MutInfoPairListPy(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<MutInfoPair > *arg1 = (std::vector<MutInfoPair > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_MutInfoPairListPy",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MutInfoPairListPy_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_derefString(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::string *arg1 = (std::string *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:derefString",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = derefString(arg1);
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_derefRotamer(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer **arg1 = (Rotamer **) 0 ;
    Rotamer *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:derefRotamer",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (Rotamer *)derefRotamer(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Rotamer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_derefAARotamer(PyObject *, PyObject *args) {
    PyObject *resultobj;
    AARotamer **arg1 = (AARotamer **) 0 ;
    AARotamer *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:derefAARotamer",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_p_AARotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (AARotamer *)derefAARotamer(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_AARotamer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_castRotamerToAARotamer(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Rotamer *arg1 = (Rotamer *) 0 ;
    AARotamer *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:castRotamerToAARotamer",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Rotamer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (AARotamer *)castRotamerToAARotamer(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_AARotamer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"new_ScreamModel", _wrap_new_ScreamModel, METH_VARARGS, NULL},
	 { (char *)"delete_ScreamModel", _wrap_delete_ScreamModel, METH_VARARGS, NULL},
	 { (char *)"ScreamModel_scream_parameters_set", _wrap_ScreamModel_scream_parameters_set, METH_VARARGS, NULL},
	 { (char *)"ScreamModel_scream_parameters_get", _wrap_ScreamModel_scream_parameters_get, METH_VARARGS, NULL},
	 { (char *)"ScreamModel_HANDLER_set", _wrap_ScreamModel_HANDLER_set, METH_VARARGS, NULL},
	 { (char *)"ScreamModel_HANDLER_get", _wrap_ScreamModel_HANDLER_get, METH_VARARGS, NULL},
	 { (char *)"ScreamModel_ptn_set", _wrap_ScreamModel_ptn_set, METH_VARARGS, NULL},
	 { (char *)"ScreamModel_ptn_get", _wrap_ScreamModel_ptn_get, METH_VARARGS, NULL},
	 { (char *)"ScreamModel_scream_EE_set", _wrap_ScreamModel_scream_EE_set, METH_VARARGS, NULL},
	 { (char *)"ScreamModel_scream_EE_get", _wrap_ScreamModel_scream_EE_get, METH_VARARGS, NULL},
	 { (char *)"ScreamModel_new_ScreamEE", _wrap_ScreamModel_new_ScreamEE, METH_VARARGS, NULL},
	 { (char *)"ScreamModel_new_Rotlib", _wrap_ScreamModel_new_Rotlib, METH_VARARGS, NULL},
	 { (char *)"ScreamModel_scream_EE_list_set", _wrap_ScreamModel_scream_EE_list_set, METH_VARARGS, NULL},
	 { (char *)"ScreamModel_scream_EE_list_get", _wrap_ScreamModel_scream_EE_list_get, METH_VARARGS, NULL},
	 { (char *)"ScreamModel_rotlib_list_set", _wrap_ScreamModel_rotlib_list_set, METH_VARARGS, NULL},
	 { (char *)"ScreamModel_rotlib_list_get", _wrap_ScreamModel_rotlib_list_get, METH_VARARGS, NULL},
	 { (char *)"ScreamModel_swigregister", ScreamModel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScreamParameters", _wrap_new_ScreamParameters, METH_VARARGS, NULL},
	 { (char *)"delete_ScreamParameters", _wrap_delete_ScreamParameters, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_InputFileName_set", _wrap_ScreamParameters_InputFileName_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_InputFileName_get", _wrap_ScreamParameters_InputFileName_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_MutateResidueInfo_set", _wrap_ScreamParameters_MutateResidueInfo_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_MutateResidueInfo_get", _wrap_ScreamParameters_MutateResidueInfo_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_AdditionalLibraryInfo_set", _wrap_ScreamParameters_AdditionalLibraryInfo_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_AdditionalLibraryInfo_get", _wrap_ScreamParameters_AdditionalLibraryInfo_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_Library_set", _wrap_ScreamParameters_Library_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_Library_get", _wrap_ScreamParameters_Library_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_PlacementMethod_set", _wrap_ScreamParameters_PlacementMethod_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_PlacementMethod_get", _wrap_ScreamParameters_PlacementMethod_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_CreateCBParameters_set", _wrap_ScreamParameters_CreateCBParameters_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_CreateCBParameters_get", _wrap_ScreamParameters_CreateCBParameters_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_KeepOriginalRotamer_set", _wrap_ScreamParameters_KeepOriginalRotamer_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_KeepOriginalRotamer_get", _wrap_ScreamParameters_KeepOriginalRotamer_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_UseScreamEnergyFunction_set", _wrap_ScreamParameters_UseScreamEnergyFunction_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_UseScreamEnergyFunction_get", _wrap_ScreamParameters_UseScreamEnergyFunction_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_UseDeltaMethod_set", _wrap_ScreamParameters_UseDeltaMethod_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_UseDeltaMethod_get", _wrap_ScreamParameters_UseDeltaMethod_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_UseRotamerNeighborList_set", _wrap_ScreamParameters_UseRotamerNeighborList_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_UseRotamerNeighborList_get", _wrap_ScreamParameters_UseRotamerNeighborList_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_UseAsymmetricDelta_set", _wrap_ScreamParameters_UseAsymmetricDelta_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_UseAsymmetricDelta_get", _wrap_ScreamParameters_UseAsymmetricDelta_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_UseDeltaForInterResiE_set", _wrap_ScreamParameters_UseDeltaForInterResiE_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_UseDeltaForInterResiE_get", _wrap_ScreamParameters_UseDeltaForInterResiE_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_FlatDeltaValue_set", _wrap_ScreamParameters_FlatDeltaValue_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_FlatDeltaValue_get", _wrap_ScreamParameters_FlatDeltaValue_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_DeltaStandardDevs_set", _wrap_ScreamParameters_DeltaStandardDevs_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_DeltaStandardDevs_get", _wrap_ScreamParameters_DeltaStandardDevs_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_InnerWallScalingFactor_set", _wrap_ScreamParameters_InnerWallScalingFactor_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_InnerWallScalingFactor_get", _wrap_ScreamParameters_InnerWallScalingFactor_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_NonPolarHCalc_set", _wrap_ScreamParameters_NonPolarHCalc_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_NonPolarHCalc_get", _wrap_ScreamParameters_NonPolarHCalc_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_ScoringFunction_set", _wrap_ScreamParameters_ScoringFunction_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_ScoringFunction_get", _wrap_ScreamParameters_ScoringFunction_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_MultiplePlacementMethod_set", _wrap_ScreamParameters_MultiplePlacementMethod_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_MultiplePlacementMethod_get", _wrap_ScreamParameters_MultiplePlacementMethod_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_CBGroundSpectrumCalc_set", _wrap_ScreamParameters_CBGroundSpectrumCalc_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_CBGroundSpectrumCalc_get", _wrap_ScreamParameters_CBGroundSpectrumCalc_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_OneEnergyFFParFile_set", _wrap_ScreamParameters_OneEnergyFFParFile_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_OneEnergyFFParFile_get", _wrap_ScreamParameters_OneEnergyFFParFile_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_DeltaParFile_set", _wrap_ScreamParameters_DeltaParFile_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_DeltaParFile_get", _wrap_ScreamParameters_DeltaParFile_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_EachAtomDeltaFile_set", _wrap_ScreamParameters_EachAtomDeltaFile_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_EachAtomDeltaFile_get", _wrap_ScreamParameters_EachAtomDeltaFile_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_PolarOptimizationExclusions_set", _wrap_ScreamParameters_PolarOptimizationExclusions_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_PolarOptimizationExclusions_get", _wrap_ScreamParameters_PolarOptimizationExclusions_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_LJOption_set", _wrap_ScreamParameters_LJOption_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_LJOption_get", _wrap_ScreamParameters_LJOption_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_CoulombMode_set", _wrap_ScreamParameters_CoulombMode_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_CoulombMode_get", _wrap_ScreamParameters_CoulombMode_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_Dielectric_set", _wrap_ScreamParameters_Dielectric_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_Dielectric_get", _wrap_ScreamParameters_Dielectric_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_Selections_set", _wrap_ScreamParameters_Selections_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_Selections_get", _wrap_ScreamParameters_Selections_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_MaxSearchNumber_set", _wrap_ScreamParameters_MaxSearchNumber_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_MaxSearchNumber_get", _wrap_ScreamParameters_MaxSearchNumber_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_AbsStericClashCutoffEL_set", _wrap_ScreamParameters_AbsStericClashCutoffEL_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_AbsStericClashCutoffEL_get", _wrap_ScreamParameters_AbsStericClashCutoffEL_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_StericClashCutoffEnergy_set", _wrap_ScreamParameters_StericClashCutoffEnergy_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_StericClashCutoffEnergy_get", _wrap_ScreamParameters_StericClashCutoffEnergy_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_StericClashCutoffDist_set", _wrap_ScreamParameters_StericClashCutoffDist_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_StericClashCutoffDist_get", _wrap_ScreamParameters_StericClashCutoffDist_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_MaxFinalStepRunTime_set", _wrap_ScreamParameters_MaxFinalStepRunTime_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_MaxFinalStepRunTime_get", _wrap_ScreamParameters_MaxFinalStepRunTime_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_LibPath_set", _wrap_ScreamParameters_LibPath_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_LibPath_get", _wrap_ScreamParameters_LibPath_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_Verbosity_set", _wrap_ScreamParameters_Verbosity_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_Verbosity_get", _wrap_ScreamParameters_Verbosity_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_DesignPositionAndClass_set", _wrap_ScreamParameters_DesignPositionAndClass_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_DesignPositionAndClass_get", _wrap_ScreamParameters_DesignPositionAndClass_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_DesignAAClassDefns_set", _wrap_ScreamParameters_DesignAAClassDefns_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_DesignAAClassDefns_get", _wrap_ScreamParameters_DesignAAClassDefns_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_JustOutputSequence_set", _wrap_ScreamParameters_JustOutputSequence_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_JustOutputSequence_get", _wrap_ScreamParameters_JustOutputSequence_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_StructuresPerSequence_set", _wrap_ScreamParameters_StructuresPerSequence_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_StructuresPerSequence_get", _wrap_ScreamParameters_StructuresPerSequence_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_BindingSiteMode_set", _wrap_ScreamParameters_BindingSiteMode_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_BindingSiteMode_get", _wrap_ScreamParameters_BindingSiteMode_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_FixedResidues_set", _wrap_ScreamParameters_FixedResidues_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_FixedResidues_get", _wrap_ScreamParameters_FixedResidues_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_AroundAtom_set", _wrap_ScreamParameters_AroundAtom_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_AroundAtom_get", _wrap_ScreamParameters_AroundAtom_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_AroundResidue_set", _wrap_ScreamParameters_AroundResidue_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_AroundResidue_get", _wrap_ScreamParameters_AroundResidue_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_AroundChain_set", _wrap_ScreamParameters_AroundChain_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_AroundChain_get", _wrap_ScreamParameters_AroundChain_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_AroundDistance_set", _wrap_ScreamParameters_AroundDistance_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_AroundDistance_get", _wrap_ScreamParameters_AroundDistance_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_AroundDistanceDefn_set", _wrap_ScreamParameters_AroundDistanceDefn_set, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_AroundDistanceDefn_get", _wrap_ScreamParameters_AroundDistanceDefn_get, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getMutateResidueInfoList", _wrap_ScreamParameters_getMutateResidueInfoList, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getAdditionalLibraryInfo", _wrap_ScreamParameters_getAdditionalLibraryInfo, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getKeepOriginalRotamer", _wrap_ScreamParameters_getKeepOriginalRotamer, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getUseScreamEnergyFunction", _wrap_ScreamParameters_getUseScreamEnergyFunction, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getPlacementMethod", _wrap_ScreamParameters_getPlacementMethod, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getCreateCBParameters", _wrap_ScreamParameters_getCreateCBParameters, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getUseDeltaMethod", _wrap_ScreamParameters_getUseDeltaMethod, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getUseRotamerNeighborList", _wrap_ScreamParameters_getUseRotamerNeighborList, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getUseAsymmetricDelta", _wrap_ScreamParameters_getUseAsymmetricDelta, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getUseDeltaForInterResiE", _wrap_ScreamParameters_getUseDeltaForInterResiE, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getFlatDeltaValue", _wrap_ScreamParameters_getFlatDeltaValue, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getDeltaStandardDevs", _wrap_ScreamParameters_getDeltaStandardDevs, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getInnerWallScalingFactor", _wrap_ScreamParameters_getInnerWallScalingFactor, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getNonPolarHCalc", _wrap_ScreamParameters_getNonPolarHCalc, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getOneEnergyFFParFile", _wrap_ScreamParameters_getOneEnergyFFParFile, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getDeltaParFile", _wrap_ScreamParameters_getDeltaParFile, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getEachAtomDeltaFile", _wrap_ScreamParameters_getEachAtomDeltaFile, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getPolarOptimizationExclusions", _wrap_ScreamParameters_getPolarOptimizationExclusions, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getSelections", _wrap_ScreamParameters_getSelections, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getMaxSearchNumber", _wrap_ScreamParameters_getMaxSearchNumber, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getAbsStericClashCutoffEL", _wrap_ScreamParameters_getAbsStericClashCutoffEL, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getStericClashCutoffEnergy", _wrap_ScreamParameters_getStericClashCutoffEnergy, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getStericClashCutoffDist", _wrap_ScreamParameters_getStericClashCutoffDist, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getMaxFinalStepRunTime", _wrap_ScreamParameters_getMaxFinalStepRunTime, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getDesignPositionAndClass", _wrap_ScreamParameters_getDesignPositionAndClass, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getDesignAAClassDefns", _wrap_ScreamParameters_getDesignAAClassDefns, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getJustOutputSequence", _wrap_ScreamParameters_getJustOutputSequence, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getLJOption", _wrap_ScreamParameters_getLJOption, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getCoulombMode", _wrap_ScreamParameters_getCoulombMode, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getDielectric", _wrap_ScreamParameters_getDielectric, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getBindingSiteMode", _wrap_ScreamParameters_getBindingSiteMode, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getFixedResidues", _wrap_ScreamParameters_getFixedResidues, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getAroundAtom", _wrap_ScreamParameters_getAroundAtom, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getAroundResidue", _wrap_ScreamParameters_getAroundResidue, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getAroundChain", _wrap_ScreamParameters_getAroundChain, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getAroundDistance", _wrap_ScreamParameters_getAroundDistance, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getAroundDistanceDefn", _wrap_ScreamParameters_getAroundDistanceDefn, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getDesignPositions", _wrap_ScreamParameters_getDesignPositions, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getDesignClassFromPosition", _wrap_ScreamParameters_getDesignClassFromPosition, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getDesignClassAAs", _wrap_ScreamParameters_getDesignClassAAs, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_multiplePlacementMethod", _wrap_ScreamParameters_multiplePlacementMethod, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getCBGroundSpectrumCalc", _wrap_ScreamParameters_getCBGroundSpectrumCalc, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_read_scream_par_file", _wrap_ScreamParameters_read_scream_par_file, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_print_to_output", _wrap_ScreamParameters_print_to_output, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_minimizationMethod", _wrap_ScreamParameters_minimizationMethod, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_minimizationSteps", _wrap_ScreamParameters_minimizationSteps, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_oneEMethod", _wrap_ScreamParameters_oneEMethod, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_residueToScreamName", _wrap_ScreamParameters_residueToScreamName, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_residueToScreamPstn", _wrap_ScreamParameters_residueToScreamPstn, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_residueToScreamChn", _wrap_ScreamParameters_residueToScreamChn, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_determineLibDirPath", _wrap_ScreamParameters_determineLibDirPath, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_determineLibDirFileNameSuffix", _wrap_ScreamParameters_determineLibDirFileNameSuffix, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_determineCnnDirPath", _wrap_ScreamParameters_determineCnnDirPath, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getLibResolution", _wrap_ScreamParameters_getLibResolution, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_returnEnergyMethod", _wrap_ScreamParameters_returnEnergyMethod, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_returnEnergyMethodTValue", _wrap_ScreamParameters_returnEnergyMethodTValue, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_getVerbosity", _wrap_ScreamParameters_getVerbosity, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters__init_default_params", _wrap_ScreamParameters__init_default_params, METH_VARARGS, NULL},
	 { (char *)"ScreamParameters_swigregister", ScreamParameters_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SCREAM_ATOM", _wrap_new_SCREAM_ATOM, METH_VARARGS, NULL},
	 { (char *)"delete_SCREAM_ATOM", _wrap_delete_SCREAM_ATOM, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_pdb_init", _wrap_SCREAM_ATOM_pdb_init, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_set_x", _wrap_SCREAM_ATOM_set_x, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_set_y", _wrap_SCREAM_ATOM_set_y, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_set_z", _wrap_SCREAM_ATOM_set_z, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_getAtomLabel", _wrap_SCREAM_ATOM_getAtomLabel, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_setAtomLabel", _wrap_SCREAM_ATOM_setAtomLabel, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_getAtomType", _wrap_SCREAM_ATOM_getAtomType, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_setAtomType", _wrap_SCREAM_ATOM_setAtomType, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_getX", _wrap_SCREAM_ATOM_getX, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_setX", _wrap_SCREAM_ATOM_setX, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_getY", _wrap_SCREAM_ATOM_getY, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_setY", _wrap_SCREAM_ATOM_setY, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_getZ", _wrap_SCREAM_ATOM_getZ, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_setZ", _wrap_SCREAM_ATOM_setZ, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_getCharge", _wrap_SCREAM_ATOM_getCharge, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_setCharge", _wrap_SCREAM_ATOM_setCharge, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_getResName", _wrap_SCREAM_ATOM_getResName, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_setResName", _wrap_SCREAM_ATOM_setResName, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_getChain", _wrap_SCREAM_ATOM_getChain, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_setChain", _wrap_SCREAM_ATOM_setChain, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_getResNum", _wrap_SCREAM_ATOM_getResNum, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_setResNum", _wrap_SCREAM_ATOM_setResNum, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_GLOBAL_ATOM_N_set", _wrap_SCREAM_ATOM_GLOBAL_ATOM_N_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_GLOBAL_ATOM_N_get", _wrap_SCREAM_ATOM_GLOBAL_ATOM_N_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_keyw_set", _wrap_SCREAM_ATOM_keyw_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_keyw_get", _wrap_SCREAM_ATOM_keyw_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_atomLabel_set", _wrap_SCREAM_ATOM_atomLabel_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_atomLabel_get", _wrap_SCREAM_ATOM_atomLabel_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_stripped_atomLabel_set", _wrap_SCREAM_ATOM_stripped_atomLabel_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_stripped_atomLabel_get", _wrap_SCREAM_ATOM_stripped_atomLabel_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_isSC_Flag_set", _wrap_SCREAM_ATOM_isSC_Flag_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_isSC_Flag_get", _wrap_SCREAM_ATOM_isSC_Flag_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_isAAResAtom_set", _wrap_SCREAM_ATOM_isAAResAtom_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_isAAResAtom_get", _wrap_SCREAM_ATOM_isAAResAtom_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_atomType_set", _wrap_SCREAM_ATOM_atomType_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_atomType_get", _wrap_SCREAM_ATOM_atomType_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_stripped_atomType_set", _wrap_SCREAM_ATOM_stripped_atomType_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_stripped_atomType_get", _wrap_SCREAM_ATOM_stripped_atomType_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_occupancy_set", _wrap_SCREAM_ATOM_occupancy_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_occupancy_get", _wrap_SCREAM_ATOM_occupancy_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_BFactor_set", _wrap_SCREAM_ATOM_BFactor_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_BFactor_get", _wrap_SCREAM_ATOM_BFactor_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_resName_set", _wrap_SCREAM_ATOM_resName_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_resName_get", _wrap_SCREAM_ATOM_resName_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_oneLetterResName_set", _wrap_SCREAM_ATOM_oneLetterResName_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_oneLetterResName_get", _wrap_SCREAM_ATOM_oneLetterResName_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_chain_set", _wrap_SCREAM_ATOM_chain_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_chain_get", _wrap_SCREAM_ATOM_chain_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_resNum_set", _wrap_SCREAM_ATOM_resNum_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_resNum_get", _wrap_SCREAM_ATOM_resNum_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_atoms_connected_set", _wrap_SCREAM_ATOM_atoms_connected_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_atoms_connected_get", _wrap_SCREAM_ATOM_atoms_connected_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_lone_pair_set", _wrap_SCREAM_ATOM_lone_pair_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_lone_pair_get", _wrap_SCREAM_ATOM_lone_pair_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_x_set", _wrap_SCREAM_ATOM_x_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_x_get", _wrap_SCREAM_ATOM_x_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_q_set", _wrap_SCREAM_ATOM_q_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_q_get", _wrap_SCREAM_ATOM_q_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_n_set", _wrap_SCREAM_ATOM_n_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_n_get", _wrap_SCREAM_ATOM_n_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_type_set", _wrap_SCREAM_ATOM_type_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_type_get", _wrap_SCREAM_ATOM_type_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_flags_set", _wrap_SCREAM_ATOM_flags_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_flags_get", _wrap_SCREAM_ATOM_flags_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_m_set", _wrap_SCREAM_ATOM_m_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_m_get", _wrap_SCREAM_ATOM_m_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_vchg2_set", _wrap_SCREAM_ATOM_vchg2_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_vchg2_get", _wrap_SCREAM_ATOM_vchg2_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_library_name_set", _wrap_SCREAM_ATOM_library_name_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_library_name_get", _wrap_SCREAM_ATOM_library_name_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_vdw_r_set", _wrap_SCREAM_ATOM_vdw_r_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_vdw_r_get", _wrap_SCREAM_ATOM_vdw_r_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_vdw_d_set", _wrap_SCREAM_ATOM_vdw_d_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_vdw_d_get", _wrap_SCREAM_ATOM_vdw_d_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_vdw_s_set", _wrap_SCREAM_ATOM_vdw_s_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_vdw_s_get", _wrap_SCREAM_ATOM_vdw_s_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_vachg_set", _wrap_SCREAM_ATOM_vachg_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_vachg_get", _wrap_SCREAM_ATOM_vachg_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_vrchg_set", _wrap_SCREAM_ATOM_vrchg_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_vrchg_get", _wrap_SCREAM_ATOM_vrchg_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_hb_da_set", _wrap_SCREAM_ATOM_hb_da_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_hb_da_get", _wrap_SCREAM_ATOM_hb_da_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_a_set", _wrap_SCREAM_ATOM_a_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_a_get", _wrap_SCREAM_ATOM_a_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_delta_set", _wrap_SCREAM_ATOM_delta_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_delta_get", _wrap_SCREAM_ATOM_delta_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_connectivity_m_set", _wrap_SCREAM_ATOM_connectivity_m_set, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_connectivity_m_get", _wrap_SCREAM_ATOM_connectivity_m_get, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_initFlag", _wrap_SCREAM_ATOM_initFlag, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_resetFlag", _wrap_SCREAM_ATOM_resetFlag, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_make_atom_moveable", _wrap_SCREAM_ATOM_make_atom_moveable, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_make_atom_fixed", _wrap_SCREAM_ATOM_make_atom_fixed, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_make_atom_invisible", _wrap_SCREAM_ATOM_make_atom_invisible, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_make_atom_visible", _wrap_SCREAM_ATOM_make_atom_visible, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_make_atom_EL_invisible", _wrap_SCREAM_ATOM_make_atom_EL_invisible, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_make_atom_EL_visible", _wrap_SCREAM_ATOM_make_atom_EL_visible, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_is_part_of_EE", _wrap_SCREAM_ATOM_is_part_of_EE, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_fix_atom", _wrap_SCREAM_ATOM_fix_atom, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_distance", _wrap_SCREAM_ATOM_distance, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_distance_squared", _wrap_SCREAM_ATOM_distance_squared, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_worst_clash_dist", _wrap_SCREAM_ATOM_worst_clash_dist, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_feed_me", _wrap_SCREAM_ATOM_feed_me, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_feed_me_pdb", _wrap_SCREAM_ATOM_feed_me_pdb, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_make_bond", _wrap_SCREAM_ATOM_make_bond, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_delete_bond", _wrap_SCREAM_ATOM_delete_bond, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_copy", _wrap_SCREAM_ATOM_copy, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_copyJustCoords", _wrap_SCREAM_ATOM_copyJustCoords, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_dump", _wrap_SCREAM_ATOM_dump, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_pdb_dump", _wrap_SCREAM_ATOM_pdb_dump, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_return_bgf_line", _wrap_SCREAM_ATOM_return_bgf_line, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_return_pdb_line", _wrap_SCREAM_ATOM_return_pdb_line, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_append_to_filehandle", _wrap_SCREAM_ATOM_append_to_filehandle, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_pdb_append_to_filehandle", _wrap_SCREAM_ATOM_pdb_append_to_filehandle, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_pdb_append_to_ostream_connect_info", _wrap_SCREAM_ATOM_pdb_append_to_ostream_connect_info, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_append_to_ostream_connect_info", _wrap_SCREAM_ATOM_append_to_ostream_connect_info, METH_VARARGS, NULL},
	 { (char *)"SCREAM_ATOM_swigregister", SCREAM_ATOM_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Rotamer", _wrap_new_Rotamer, METH_VARARGS, NULL},
	 { (char *)"delete_Rotamer", _wrap_delete_Rotamer, METH_VARARGS, NULL},
	 { (char *)"Rotamer_deepcopy", _wrap_Rotamer_deepcopy, METH_VARARGS, NULL},
	 { (char *)"Rotamer_read_cnn_lines", _wrap_Rotamer_read_cnn_lines, METH_VARARGS, NULL},
	 { (char *)"Rotamer_print_Me", _wrap_Rotamer_print_Me, METH_VARARGS, NULL},
	 { (char *)"Rotamer_print_ordered_by_n", _wrap_Rotamer_print_ordered_by_n, METH_VARARGS, NULL},
	 { (char *)"Rotamer_append_to_filehandle", _wrap_Rotamer_append_to_filehandle, METH_VARARGS, NULL},
	 { (char *)"Rotamer_pdb_append_to_filehandle", _wrap_Rotamer_pdb_append_to_filehandle, METH_VARARGS, NULL},
	 { (char *)"Rotamer_append_to_ostream_connect_info", _wrap_Rotamer_append_to_ostream_connect_info, METH_VARARGS, NULL},
	 { (char *)"Rotamer_printEnergies", _wrap_Rotamer_printEnergies, METH_VARARGS, NULL},
	 { (char *)"Rotamer_self_E_set", _wrap_Rotamer_self_E_set, METH_VARARGS, NULL},
	 { (char *)"Rotamer_self_E_get", _wrap_Rotamer_self_E_get, METH_VARARGS, NULL},
	 { (char *)"Rotamer_is_Original_set", _wrap_Rotamer_is_Original_set, METH_VARARGS, NULL},
	 { (char *)"Rotamer_is_Original_get", _wrap_Rotamer_is_Original_get, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_is_Original_flag", _wrap_Rotamer_get_is_Original_flag, METH_VARARGS, NULL},
	 { (char *)"Rotamer_set_is_Original_flag", _wrap_Rotamer_set_is_Original_flag, METH_VARARGS, NULL},
	 { (char *)"Rotamer_same_backbone_set", _wrap_Rotamer_same_backbone_set, METH_VARARGS, NULL},
	 { (char *)"Rotamer_same_backbone_get", _wrap_Rotamer_same_backbone_get, METH_VARARGS, NULL},
	 { (char *)"Rotamer_library_name_set", _wrap_Rotamer_library_name_set, METH_VARARGS, NULL},
	 { (char *)"Rotamer_library_name_get", _wrap_Rotamer_library_name_get, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_bb", _wrap_Rotamer_get_bb, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_sc", _wrap_Rotamer_get_sc, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_sc_atoms", _wrap_Rotamer_get_sc_atoms, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_bb_atoms", _wrap_Rotamer_get_bb_atoms, METH_VARARGS, NULL},
	 { (char *)"Rotamer_getAtom", _wrap_Rotamer_getAtom, METH_VARARGS, NULL},
	 { (char *)"Rotamer_getTheseAtoms", _wrap_Rotamer_getTheseAtoms, METH_VARARGS, NULL},
	 { (char *)"Rotamer_getAllRotamers", _wrap_Rotamer_getAllRotamers, METH_VARARGS, NULL},
	 { (char *)"Rotamer_fix_toggle", _wrap_Rotamer_fix_toggle, METH_VARARGS, NULL},
	 { (char *)"Rotamer_fix_sc_toggle", _wrap_Rotamer_fix_sc_toggle, METH_VARARGS, NULL},
	 { (char *)"Rotamer_fix_bb_toggle", _wrap_Rotamer_fix_bb_toggle, METH_VARARGS, NULL},
	 { (char *)"Rotamer_number_of_atoms", _wrap_Rotamer_number_of_atoms, METH_VARARGS, NULL},
	 { (char *)"Rotamer_total_charge", _wrap_Rotamer_total_charge, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_rotamer_n", _wrap_Rotamer_get_rotamer_n, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_mult_H_n", _wrap_Rotamer_get_mult_H_n, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_library_name", _wrap_Rotamer_get_library_name, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_empty_lattice_E", _wrap_Rotamer_get_empty_lattice_E, METH_VARARGS, NULL},
	 { (char *)"Rotamer_set_empty_lattice_E", _wrap_Rotamer_set_empty_lattice_E, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_empty_lattice_E_abs", _wrap_Rotamer_get_empty_lattice_E_abs, METH_VARARGS, NULL},
	 { (char *)"Rotamer_set_empty_lattice_E_abs", _wrap_Rotamer_set_empty_lattice_E_abs, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_empty_lattice_energy_rank", _wrap_Rotamer_get_empty_lattice_energy_rank, METH_VARARGS, NULL},
	 { (char *)"Rotamer_set_empty_lattice_energy_rank", _wrap_Rotamer_set_empty_lattice_energy_rank, METH_VARARGS, NULL},
	 { (char *)"Rotamer_setFailedDistanceCutoff", _wrap_Rotamer_setFailedDistanceCutoff, METH_VARARGS, NULL},
	 { (char *)"Rotamer_setPassedDistanceCutoff", _wrap_Rotamer_setPassedDistanceCutoff, METH_VARARGS, NULL},
	 { (char *)"Rotamer_failedDistanceCutoff", _wrap_Rotamer_failedDistanceCutoff, METH_VARARGS, NULL},
	 { (char *)"Rotamer_sameResidueTypeAs", _wrap_Rotamer_sameResidueTypeAs, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_preCalc_Energy_Line", _wrap_Rotamer_get_preCalc_Energy_Line, METH_VARARGS, NULL},
	 { (char *)"Rotamer_populate_preCalc_Terms", _wrap_Rotamer_populate_preCalc_Terms, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_preCalc_TotE", _wrap_Rotamer_get_preCalc_TotE, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_preCalc_BondsE", _wrap_Rotamer_get_preCalc_BondsE, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_preCalc_AnglesE", _wrap_Rotamer_get_preCalc_AnglesE, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_preCalc_TorsionsE", _wrap_Rotamer_get_preCalc_TorsionsE, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_preCalc_InversionsE", _wrap_Rotamer_get_preCalc_InversionsE, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_preCalc_CoulombE", _wrap_Rotamer_get_preCalc_CoulombE, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_preCalc_vdwE", _wrap_Rotamer_get_preCalc_vdwE, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_preCalc_HBondE", _wrap_Rotamer_get_preCalc_HBondE, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_preCalc_SolvE", _wrap_Rotamer_get_preCalc_SolvE, METH_VARARGS, NULL},
	 { (char *)"Rotamer_set_preCalc_TotE", _wrap_Rotamer_set_preCalc_TotE, METH_VARARGS, NULL},
	 { (char *)"Rotamer_set_preCalc_BondsE", _wrap_Rotamer_set_preCalc_BondsE, METH_VARARGS, NULL},
	 { (char *)"Rotamer_set_preCalc_AnglesE", _wrap_Rotamer_set_preCalc_AnglesE, METH_VARARGS, NULL},
	 { (char *)"Rotamer_set_preCalc_TorsionsE", _wrap_Rotamer_set_preCalc_TorsionsE, METH_VARARGS, NULL},
	 { (char *)"Rotamer_set_preCalc_InversionsE", _wrap_Rotamer_set_preCalc_InversionsE, METH_VARARGS, NULL},
	 { (char *)"Rotamer_set_preCalc_CoulombE", _wrap_Rotamer_set_preCalc_CoulombE, METH_VARARGS, NULL},
	 { (char *)"Rotamer_set_preCalc_vdwE", _wrap_Rotamer_set_preCalc_vdwE, METH_VARARGS, NULL},
	 { (char *)"Rotamer_set_preCalc_HBondE", _wrap_Rotamer_set_preCalc_HBondE, METH_VARARGS, NULL},
	 { (char *)"Rotamer_set_preCalc_SolvE", _wrap_Rotamer_set_preCalc_SolvE, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_rotlib_E", _wrap_Rotamer_get_rotlib_E, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_sc_valence_E", _wrap_Rotamer_get_sc_valence_E, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_sc_coulomb_E", _wrap_Rotamer_get_sc_coulomb_E, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_sc_vdw_E", _wrap_Rotamer_get_sc_vdw_E, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_sc_hb_E", _wrap_Rotamer_get_sc_hb_E, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_sc_total_nb_E", _wrap_Rotamer_get_sc_total_nb_E, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_sc_solvation_E", _wrap_Rotamer_get_sc_solvation_E, METH_VARARGS, NULL},
	 { (char *)"Rotamer_get_sc_total_E", _wrap_Rotamer_get_sc_total_E, METH_VARARGS, NULL},
	 { (char *)"Rotamer_set_rotamer_n", _wrap_Rotamer_set_rotamer_n, METH_VARARGS, NULL},
	 { (char *)"Rotamer_set_rotlib_E", _wrap_Rotamer_set_rotlib_E, METH_VARARGS, NULL},
	 { (char *)"Rotamer_set_sc_valence_E", _wrap_Rotamer_set_sc_valence_E, METH_VARARGS, NULL},
	 { (char *)"Rotamer_set_sc_coulomb_E", _wrap_Rotamer_set_sc_coulomb_E, METH_VARARGS, NULL},
	 { (char *)"Rotamer_set_sc_vdw_E", _wrap_Rotamer_set_sc_vdw_E, METH_VARARGS, NULL},
	 { (char *)"Rotamer_set_sc_hb_E", _wrap_Rotamer_set_sc_hb_E, METH_VARARGS, NULL},
	 { (char *)"Rotamer_set_sc_total_nb_E", _wrap_Rotamer_set_sc_total_nb_E, METH_VARARGS, NULL},
	 { (char *)"Rotamer_set_sc_solvation_E", _wrap_Rotamer_set_sc_solvation_E, METH_VARARGS, NULL},
	 { (char *)"Rotamer_set_sc_total_E", _wrap_Rotamer_set_sc_total_E, METH_VARARGS, NULL},
	 { (char *)"Rotamer_match_bb", _wrap_Rotamer_match_bb, METH_VARARGS, NULL},
	 { (char *)"Rotamer_match_CB", _wrap_Rotamer_match_CB, METH_VARARGS, NULL},
	 { (char *)"Rotamer_assign_atom_fftype", _wrap_Rotamer_assign_atom_fftype, METH_VARARGS, NULL},
	 { (char *)"Rotamer_assign_charges", _wrap_Rotamer_assign_charges, METH_VARARGS, NULL},
	 { (char *)"Rotamer_assign_lone_pair", _wrap_Rotamer_assign_lone_pair, METH_VARARGS, NULL},
	 { (char *)"Rotamer_declaredInRotlibScope", _wrap_Rotamer_declaredInRotlibScope, METH_VARARGS, NULL},
	 { (char *)"Rotamer_setDeclaredInRotlibScope", _wrap_Rotamer_setDeclaredInRotlibScope, METH_VARARGS, NULL},
	 { (char *)"Rotamer_swigregister", Rotamer_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AARotamer", _wrap_new_AARotamer, METH_VARARGS, NULL},
	 { (char *)"delete_AARotamer", _wrap_delete_AARotamer, METH_VARARGS, NULL},
	 { (char *)"AARotamer_deepcopy", _wrap_AARotamer_deepcopy, METH_VARARGS, NULL},
	 { (char *)"AARotamer_get_resName", _wrap_AARotamer_get_resName, METH_VARARGS, NULL},
	 { (char *)"AARotamer_set_resName", _wrap_AARotamer_set_resName, METH_VARARGS, NULL},
	 { (char *)"AARotamer_initRotamerAtomList", _wrap_AARotamer_initRotamerAtomList, METH_VARARGS, NULL},
	 { (char *)"AARotamer_calc_PHI", _wrap_AARotamer_calc_PHI, METH_VARARGS, NULL},
	 { (char *)"AARotamer_calc_PSI", _wrap_AARotamer_calc_PSI, METH_VARARGS, NULL},
	 { (char *)"AARotamer_get_PHI", _wrap_AARotamer_get_PHI, METH_VARARGS, NULL},
	 { (char *)"AARotamer_get_PSI", _wrap_AARotamer_get_PSI, METH_VARARGS, NULL},
	 { (char *)"AARotamer_chi1", _wrap_AARotamer_chi1, METH_VARARGS, NULL},
	 { (char *)"AARotamer_chi2", _wrap_AARotamer_chi2, METH_VARARGS, NULL},
	 { (char *)"AARotamer_chi3", _wrap_AARotamer_chi3, METH_VARARGS, NULL},
	 { (char *)"AARotamer_chi4", _wrap_AARotamer_chi4, METH_VARARGS, NULL},
	 { (char *)"AARotamer_chi5", _wrap_AARotamer_chi5, METH_VARARGS, NULL},
	 { (char *)"AARotamer_match_bb", _wrap_AARotamer_match_bb, METH_VARARGS, NULL},
	 { (char *)"AARotamer_match_CB", _wrap_AARotamer_match_CB, METH_VARARGS, NULL},
	 { (char *)"AARotamer_create_CB", _wrap_AARotamer_create_CB, METH_VARARGS, NULL},
	 { (char *)"AARotamer_assign_atom_fftype", _wrap_AARotamer_assign_atom_fftype, METH_VARARGS, NULL},
	 { (char *)"AARotamer_assign_charges", _wrap_AARotamer_assign_charges, METH_VARARGS, NULL},
	 { (char *)"AARotamer_assign_lone_pair", _wrap_AARotamer_assign_lone_pair, METH_VARARGS, NULL},
	 { (char *)"AARotamer_calc_C_i_minus_one", _wrap_AARotamer_calc_C_i_minus_one, METH_VARARGS, NULL},
	 { (char *)"AARotamer_center_CA", _wrap_AARotamer_center_CA, METH_VARARGS, NULL},
	 { (char *)"AARotamer_append_to_filehandle", _wrap_AARotamer_append_to_filehandle, METH_VARARGS, NULL},
	 { (char *)"AARotamer_pdb_append_to_filehandle", _wrap_AARotamer_pdb_append_to_filehandle, METH_VARARGS, NULL},
	 { (char *)"AARotamer_append_to_ostream_connect_info", _wrap_AARotamer_append_to_ostream_connect_info, METH_VARARGS, NULL},
	 { (char *)"AARotamer_print_Me", _wrap_AARotamer_print_Me, METH_VARARGS, NULL},
	 { (char *)"AARotamer_print_ordered_by_n", _wrap_AARotamer_print_ordered_by_n, METH_VARARGS, NULL},
	 { (char *)"AARotamer_get_bb", _wrap_AARotamer_get_bb, METH_VARARGS, NULL},
	 { (char *)"AARotamer_get_sc", _wrap_AARotamer_get_sc, METH_VARARGS, NULL},
	 { (char *)"AARotamer_PHI_set", _wrap_AARotamer_PHI_set, METH_VARARGS, NULL},
	 { (char *)"AARotamer_PHI_get", _wrap_AARotamer_PHI_get, METH_VARARGS, NULL},
	 { (char *)"AARotamer_PSI_set", _wrap_AARotamer_PSI_set, METH_VARARGS, NULL},
	 { (char *)"AARotamer_PSI_get", _wrap_AARotamer_PSI_get, METH_VARARGS, NULL},
	 { (char *)"AARotamer_resName_set", _wrap_AARotamer_resName_set, METH_VARARGS, NULL},
	 { (char *)"AARotamer_resName_get", _wrap_AARotamer_resName_get, METH_VARARGS, NULL},
	 { (char *)"AARotamer_private_chi", _wrap_AARotamer_private_chi, METH_VARARGS, NULL},
	 { (char *)"AARotamer__determine_and_fix_GLY_sidechain_HCA_issue", _wrap_AARotamer__determine_and_fix_GLY_sidechain_HCA_issue, METH_VARARGS, NULL},
	 { (char *)"AARotamer_swigregister", AARotamer_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Protein", _wrap_new_Protein, METH_VARARGS, NULL},
	 { (char *)"delete_Protein", _wrap_delete_Protein, METH_VARARGS, NULL},
	 { (char *)"Protein_get_AAChain", _wrap_Protein_get_AAChain, METH_VARARGS, NULL},
	 { (char *)"Protein_get_Ligand", _wrap_Protein_get_Ligand, METH_VARARGS, NULL},
	 { (char *)"Protein_get_Component_with_ChainName", _wrap_Protein_get_Component_with_ChainName, METH_VARARGS, NULL},
	 { (char *)"Protein_get_res_type", _wrap_Protein_get_res_type, METH_VARARGS, NULL},
	 { (char *)"Protein_get_sc_atoms", _wrap_Protein_get_sc_atoms, METH_VARARGS, NULL},
	 { (char *)"Protein_get_variable_atoms", _wrap_Protein_get_variable_atoms, METH_VARARGS, NULL},
	 { (char *)"Protein_get_visible_in_EL_mutInfo_atoms", _wrap_Protein_get_visible_in_EL_mutInfo_atoms, METH_VARARGS, NULL},
	 { (char *)"Protein_getAtomList", _wrap_Protein_getAtomList, METH_VARARGS, NULL},
	 { (char *)"Protein_getNewAtomList", _wrap_Protein_getNewAtomList, METH_VARARGS, NULL},
	 { (char *)"Protein_getAtom", _wrap_Protein_getAtom, METH_VARARGS, NULL},
	 { (char *)"Protein_getTheseAtoms", _wrap_Protein_getTheseAtoms, METH_VARARGS, NULL},
	 { (char *)"Protein_addHydrogens", _wrap_Protein_addHydrogens, METH_VARARGS, NULL},
	 { (char *)"Protein_addConnectivity", _wrap_Protein_addConnectivity, METH_VARARGS, NULL},
	 { (char *)"Protein_assignFFType", _wrap_Protein_assignFFType, METH_VARARGS, NULL},
	 { (char *)"Protein_residuesAroundAtomN", _wrap_Protein_residuesAroundAtomN, METH_VARARGS, NULL},
	 { (char *)"Protein_residuesAroundResidue", _wrap_Protein_residuesAroundResidue, METH_VARARGS, NULL},
	 { (char *)"Protein_residuesAroundChain", _wrap_Protein_residuesAroundChain, METH_VARARGS, NULL},
	 { (char *)"Protein_residuesAroundAtom", _wrap_Protein_residuesAroundAtom, METH_VARARGS, NULL},
	 { (char *)"Protein_totalComponents", _wrap_Protein_totalComponents, METH_VARARGS, NULL},
	 { (char *)"Protein_mutationDone", _wrap_Protein_mutationDone, METH_VARARGS, NULL},
	 { (char *)"Protein_setMutInfoStrainEnergy", _wrap_Protein_setMutInfoStrainEnergy, METH_VARARGS, NULL},
	 { (char *)"Protein_getMutInfoStrainEnergy", _wrap_Protein_getMutInfoStrainEnergy, METH_VARARGS, NULL},
	 { (char *)"Protein_printAtomFlagStates", _wrap_Protein_printAtomFlagStates, METH_VARARGS, NULL},
	 { (char *)"Protein_getPlacementMethod", _wrap_Protein_getPlacementMethod, METH_VARARGS, NULL},
	 { (char *)"Protein_setPlacementMethod", _wrap_Protein_setPlacementMethod, METH_VARARGS, NULL},
	 { (char *)"Protein_getOffBisectorAngle", _wrap_Protein_getOffBisectorAngle, METH_VARARGS, NULL},
	 { (char *)"Protein_getOffPlaneAngle", _wrap_Protein_getOffPlaneAngle, METH_VARARGS, NULL},
	 { (char *)"Protein_getBondLength", _wrap_Protein_getBondLength, METH_VARARGS, NULL},
	 { (char *)"Protein_getRotamerMatchVectorLamdba", _wrap_Protein_getRotamerMatchVectorLamdba, METH_VARARGS, NULL},
	 { (char *)"Protein_setOffBisectorAngle", _wrap_Protein_setOffBisectorAngle, METH_VARARGS, NULL},
	 { (char *)"Protein_setOffPlaneAngle", _wrap_Protein_setOffPlaneAngle, METH_VARARGS, NULL},
	 { (char *)"Protein_setBondLength", _wrap_Protein_setBondLength, METH_VARARGS, NULL},
	 { (char *)"Protein_setRotamerMatchVectorLamdba", _wrap_Protein_setRotamerMatchVectorLamdba, METH_VARARGS, NULL},
	 { (char *)"Protein_ntrlRotamerPlacement", _wrap_Protein_ntrlRotamerPlacement, METH_VARARGS, NULL},
	 { (char *)"Protein_getAARotamer", _wrap_Protein_getAARotamer, METH_VARARGS, NULL},
	 { (char *)"Protein_conformerPlacement", _wrap_Protein_conformerPlacement, METH_VARARGS, NULL},
	 { (char *)"Protein_conformerExtraction", _wrap_Protein_conformerExtraction, METH_VARARGS, NULL},
	 { (char *)"Protein_rotamerClusterPlacement", _wrap_Protein_rotamerClusterPlacement, METH_VARARGS, NULL},
	 { (char *)"Protein_setRotamerClusterEmptyLatticeEnergy", _wrap_Protein_setRotamerClusterEmptyLatticeEnergy, METH_VARARGS, NULL},
	 { (char *)"Protein_getRotamerClusterEmptyLatticeEnergy", _wrap_Protein_getRotamerClusterEmptyLatticeEnergy, METH_VARARGS, NULL},
	 { (char *)"Protein_mutation", _wrap_Protein_mutation, METH_VARARGS, NULL},
	 { (char *)"Protein_setPreCalcEnergy", _wrap_Protein_setPreCalcEnergy, METH_VARARGS, NULL},
	 { (char *)"Protein_getPreCalcEnergy", _wrap_Protein_getPreCalcEnergy, METH_VARARGS, NULL},
	 { (char *)"Protein_setEmptyLatticeEnergy", _wrap_Protein_setEmptyLatticeEnergy, METH_VARARGS, NULL},
	 { (char *)"Protein_getEmptyLatticeEnergy", _wrap_Protein_getEmptyLatticeEnergy, METH_VARARGS, NULL},
	 { (char *)"Protein_setSideChainLibraryName", _wrap_Protein_setSideChainLibraryName, METH_VARARGS, NULL},
	 { (char *)"Protein_setProteinLibraryName", _wrap_Protein_setProteinLibraryName, METH_VARARGS, NULL},
	 { (char *)"Protein_resetFlags", _wrap_Protein_resetFlags, METH_VARARGS, NULL},
	 { (char *)"Protein_getNewMapping", _wrap_Protein_getNewMapping, METH_VARARGS, NULL},
	 { (char *)"Protein_sc_clash", _wrap_Protein_sc_clash, METH_VARARGS, NULL},
	 { (char *)"Protein_conformer_clash", _wrap_Protein_conformer_clash, METH_VARARGS, NULL},
	 { (char *)"Protein_sc_CRMS", _wrap_Protein_sc_CRMS, METH_VARARGS, NULL},
	 { (char *)"Protein_conformer_CRMS", _wrap_Protein_conformer_CRMS, METH_VARARGS, NULL},
	 { (char *)"Protein_max_atom_dist_on_SC", _wrap_Protein_max_atom_dist_on_SC, METH_VARARGS, NULL},
	 { (char *)"Protein_sc_atom_CRMS", _wrap_Protein_sc_atom_CRMS, METH_VARARGS, NULL},
	 { (char *)"Protein_fix_entire_atom_list_ordering", _wrap_Protein_fix_entire_atom_list_ordering, METH_VARARGS, NULL},
	 { (char *)"Protein_fix_toggle", _wrap_Protein_fix_toggle, METH_VARARGS, NULL},
	 { (char *)"Protein_fix_sc_toggle", _wrap_Protein_fix_sc_toggle, METH_VARARGS, NULL},
	 { (char *)"Protein_append_to_filehandle", _wrap_Protein_append_to_filehandle, METH_VARARGS, NULL},
	 { (char *)"Protein_pdb_append_to_filehandle", _wrap_Protein_pdb_append_to_filehandle, METH_VARARGS, NULL},
	 { (char *)"Protein_print_bgf_file", _wrap_Protein_print_bgf_file, METH_VARARGS, NULL},
	 { (char *)"Protein_print_Me", _wrap_Protein_print_Me, METH_VARARGS, NULL},
	 { (char *)"Protein_print_ordered_by_n", _wrap_Protein_print_ordered_by_n, METH_VARARGS, NULL},
	 { (char *)"Protein_swigregister", Protein_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Rotlib", _wrap_new_Rotlib, METH_VARARGS, NULL},
	 { (char *)"delete_Rotlib", _wrap_delete_Rotlib, METH_VARARGS, NULL},
	 { (char *)"Rotlib_readConnectivityFile", _wrap_Rotlib_readConnectivityFile, METH_VARARGS, NULL},
	 { (char *)"Rotlib_readRotamerLibrary", _wrap_Rotlib_readRotamerLibrary, METH_VARARGS, NULL},
	 { (char *)"Rotlib_get_library_name", _wrap_Rotlib_get_library_name, METH_VARARGS, NULL},
	 { (char *)"Rotlib_getRotConnInfo", _wrap_Rotlib_getRotConnInfo, METH_VARARGS, NULL},
	 { (char *)"Rotlib_get_next_rot", _wrap_Rotlib_get_next_rot, METH_VARARGS, NULL},
	 { (char *)"Rotlib_get_current_rot", _wrap_Rotlib_get_current_rot, METH_VARARGS, NULL},
	 { (char *)"Rotlib_get_next_rot_with_empty_lattice_E_below", _wrap_Rotlib_get_next_rot_with_empty_lattice_E_below, METH_VARARGS, NULL},
	 { (char *)"Rotlib_get_empty_lattice_E_rot", _wrap_Rotlib_get_empty_lattice_E_rot, METH_VARARGS, NULL},
	 { (char *)"Rotlib_get_empty_lattice_E_rot_after_sorted_by_empty_lattice_E", _wrap_Rotlib_get_empty_lattice_E_rot_after_sorted_by_empty_lattice_E, METH_VARARGS, NULL},
	 { (char *)"Rotlib_reset_pstn", _wrap_Rotlib_reset_pstn, METH_VARARGS, NULL},
	 { (char *)"Rotlib_size", _wrap_Rotlib_size, METH_VARARGS, NULL},
	 { (char *)"Rotlib_n_rotamers_below_empty_lattice_energy", _wrap_Rotlib_n_rotamers_below_empty_lattice_energy, METH_VARARGS, NULL},
	 { (char *)"Rotlib_add_rotamer", _wrap_Rotlib_add_rotamer, METH_VARARGS, NULL},
	 { (char *)"Rotlib_new_rotamer", _wrap_Rotlib_new_rotamer, METH_VARARGS, NULL},
	 { (char *)"Rotlib_new_rotamer_cluster", _wrap_Rotlib_new_rotamer_cluster, METH_VARARGS, NULL},
	 { (char *)"Rotlib_print_Me", _wrap_Rotlib_print_Me, METH_VARARGS, NULL},
	 { (char *)"Rotlib_print_to_file", _wrap_Rotlib_print_to_file, METH_VARARGS, NULL},
	 { (char *)"Rotlib_sort_by_rotlib_E", _wrap_Rotlib_sort_by_rotlib_E, METH_VARARGS, NULL},
	 { (char *)"Rotlib_sort_by_self_E", _wrap_Rotlib_sort_by_self_E, METH_VARARGS, NULL},
	 { (char *)"Rotlib_sort_by_empty_lattice_E", _wrap_Rotlib_sort_by_empty_lattice_E, METH_VARARGS, NULL},
	 { (char *)"Rotlib_get_best_preCalc_E", _wrap_Rotlib_get_best_preCalc_E, METH_VARARGS, NULL},
	 { (char *)"Rotlib_swigregister", Rotlib_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AARotlib", _wrap_new_AARotlib, METH_VARARGS, NULL},
	 { (char *)"delete_AARotlib", _wrap_delete_AARotlib, METH_VARARGS, NULL},
	 { (char *)"AARotlib_get_next_rot", _wrap_AARotlib_get_next_rot, METH_VARARGS, NULL},
	 { (char *)"AARotlib_get_current_rot", _wrap_AARotlib_get_current_rot, METH_VARARGS, NULL},
	 { (char *)"AARotlib_get_rot", _wrap_AARotlib_get_rot, METH_VARARGS, NULL},
	 { (char *)"AARotlib_reset_rot_pstn", _wrap_AARotlib_reset_rot_pstn, METH_VARARGS, NULL},
	 { (char *)"AARotlib_set_rot_pstn", _wrap_AARotlib_set_rot_pstn, METH_VARARGS, NULL},
	 { (char *)"AARotlib_get_next_rot_with_empty_lattice_E_below", _wrap_AARotlib_get_next_rot_with_empty_lattice_E_below, METH_VARARGS, NULL},
	 { (char *)"AARotlib_get_empty_lattice_E_rot", _wrap_AARotlib_get_empty_lattice_E_rot, METH_VARARGS, NULL},
	 { (char *)"AARotlib_center_CA", _wrap_AARotlib_center_CA, METH_VARARGS, NULL},
	 { (char *)"AARotlib_calc_all_PHI", _wrap_AARotlib_calc_all_PHI, METH_VARARGS, NULL},
	 { (char *)"AARotlib_calc_all_PSI", _wrap_AARotlib_calc_all_PSI, METH_VARARGS, NULL},
	 { (char *)"AARotlib_resName_set", _wrap_AARotlib_resName_set, METH_VARARGS, NULL},
	 { (char *)"AARotlib_resName_get", _wrap_AARotlib_resName_get, METH_VARARGS, NULL},
	 { (char *)"AARotlib_swigregister", AARotlib_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NtrlAARotlib", _wrap_new_NtrlAARotlib, METH_VARARGS, NULL},
	 { (char *)"NtrlAARotlib_setup_library", _wrap_NtrlAARotlib_setup_library, METH_VARARGS, NULL},
	 { (char *)"delete_NtrlAARotlib", _wrap_delete_NtrlAARotlib, METH_VARARGS, NULL},
	 { (char *)"NtrlAARotlib_assign_atom_fftype", _wrap_NtrlAARotlib_assign_atom_fftype, METH_VARARGS, NULL},
	 { (char *)"NtrlAARotlib_assign_charges", _wrap_NtrlAARotlib_assign_charges, METH_VARARGS, NULL},
	 { (char *)"NtrlAARotlib_assign_lone_pair", _wrap_NtrlAARotlib_assign_lone_pair, METH_VARARGS, NULL},
	 { (char *)"NtrlAARotlib_append_to_filehandle", _wrap_NtrlAARotlib_append_to_filehandle, METH_VARARGS, NULL},
	 { (char *)"NtrlAARotlib_swigregister", NtrlAARotlib_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Multiple_NtrlAARotlib", _wrap_new_Multiple_NtrlAARotlib, METH_VARARGS, NULL},
	 { (char *)"delete_Multiple_NtrlAARotlib", _wrap_delete_Multiple_NtrlAARotlib, METH_VARARGS, NULL},
	 { (char *)"Multiple_NtrlAARotlib_getRotConnInfo", _wrap_Multiple_NtrlAARotlib_getRotConnInfo, METH_VARARGS, NULL},
	 { (char *)"Multiple_NtrlAARotlib_add_library", _wrap_Multiple_NtrlAARotlib_add_library, METH_VARARGS, NULL},
	 { (char *)"Multiple_NtrlAARotlib_swigregister", Multiple_NtrlAARotlib_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_HIS_NtrlAARotlib", _wrap_new_HIS_NtrlAARotlib, METH_VARARGS, NULL},
	 { (char *)"delete_HIS_NtrlAARotlib", _wrap_delete_HIS_NtrlAARotlib, METH_VARARGS, NULL},
	 { (char *)"HIS_NtrlAARotlib_add_rotamer", _wrap_HIS_NtrlAARotlib_add_rotamer, METH_VARARGS, NULL},
	 { (char *)"HIS_NtrlAARotlib_swigregister", HIS_NtrlAARotlib_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RotlibCollection", _wrap_new_RotlibCollection, METH_VARARGS, NULL},
	 { (char *)"delete_RotlibCollection", _wrap_delete_RotlibCollection, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_addRotlib", _wrap_RotlibCollection_addRotlib, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_addClashCollection", _wrap_RotlibCollection_addClashCollection, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_initEmptyLatticeDataStructures", _wrap_RotlibCollection_initEmptyLatticeDataStructures, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_initDynamicMemoryDataStructures", _wrap_RotlibCollection_initDynamicMemoryDataStructures, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_initAllocationUnderEnergyThreshold", _wrap_RotlibCollection_initAllocationUnderEnergyThreshold, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_getNextRotamersByELEnergy", _wrap_RotlibCollection_getNextRotamersByELEnergy, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_resetEmptyLatticeCrntPstn", _wrap_RotlibCollection_resetEmptyLatticeCrntPstn, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_resetTotalEnergyCrntPstn", _wrap_RotlibCollection_resetTotalEnergyCrntPstn, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_getNextEmptyLatticeExcitationRotamers", _wrap_RotlibCollection_getNextEmptyLatticeExcitationRotamers, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_getNextTotalEnergyExcitationRotamers", _wrap_RotlibCollection_getNextTotalEnergyExcitationRotamers, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_getNthEmptyLatticeExcitationRotamers", _wrap_RotlibCollection_getNthEmptyLatticeExcitationRotamers, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_getELExcitedRotamerFromEnumeration", _wrap_RotlibCollection_getELExcitedRotamerFromEnumeration, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_getELExcitedRotamer_nFromEnumeration_n", _wrap_RotlibCollection_getELExcitedRotamer_nFromEnumeration_n, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_getELEnumerationFromExcitedRotamer", _wrap_RotlibCollection_getELEnumerationFromExcitedRotamer, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_getELEnumeration_nFromExcitedRotamer_n", _wrap_RotlibCollection_getELEnumeration_nFromExcitedRotamer_n, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection__ExcitationEnumerationToExcitationEnumeration_n", _wrap_RotlibCollection__ExcitationEnumerationToExcitationEnumeration_n, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection__ExcitedRotamers_nToExcitedRotamers", _wrap_RotlibCollection__ExcitedRotamers_nToExcitedRotamers, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_getClashCollection", _wrap_RotlibCollection_getClashCollection, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_cleanClashCollection", _wrap_RotlibCollection_cleanClashCollection, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_getMutInfoRotlibMap", _wrap_RotlibCollection_getMutInfoRotlibMap, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_getMutInfoRotlibDict", _wrap_RotlibCollection_getMutInfoRotlibDict, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_getNextDynamicMemoryRotamers_And_Expand", _wrap_RotlibCollection_getNextDynamicMemoryRotamers_And_Expand, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_getNextDynamicClashEliminatedRotamers_And_Expand", _wrap_RotlibCollection_getNextDynamicClashEliminatedRotamers_And_Expand, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_increaseConfigurationsUnderEnergyThreshold", _wrap_RotlibCollection_increaseConfigurationsUnderEnergyThreshold, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_getNextUnderEnergyThresholdRotamers", _wrap_RotlibCollection_getNextUnderEnergyThresholdRotamers, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_setExcitationEnergy", _wrap_RotlibCollection_setExcitationEnergy, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_getExcitationEnergy", _wrap_RotlibCollection_getExcitationEnergy, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_printEmptyLatticeLinearEnergyTable", _wrap_RotlibCollection_printEmptyLatticeLinearEnergyTable, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_printExcitationEnergyTable", _wrap_RotlibCollection_printExcitationEnergyTable, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_printEmptyLatticeTable", _wrap_RotlibCollection_printEmptyLatticeTable, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_getInitMethod", _wrap_RotlibCollection_getInitMethod, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_sizeOfSystem", _wrap_RotlibCollection_sizeOfSystem, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_getHighestAllowedRotamerE", _wrap_RotlibCollection_getHighestAllowedRotamerE, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_setHighestAllowedRotamerE", _wrap_RotlibCollection_setHighestAllowedRotamerE, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_maxRotamerConfigurations_set", _wrap_RotlibCollection_maxRotamerConfigurations_set, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_maxRotamerConfigurations_get", _wrap_RotlibCollection_maxRotamerConfigurations_get, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_cmpMaxRotamerConfigurations", _wrap_RotlibCollection_cmpMaxRotamerConfigurations, METH_VARARGS, NULL},
	 { (char *)"RotlibCollection_swigregister", RotlibCollection_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ClashCollection", _wrap_new_ClashCollection, METH_VARARGS, NULL},
	 { (char *)"delete_ClashCollection", _wrap_delete_ClashCollection, METH_VARARGS, NULL},
	 { (char *)"ClashCollection_setThresholdE", _wrap_ClashCollection_setThresholdE, METH_VARARGS, NULL},
	 { (char *)"ClashCollection_addClashPair", _wrap_ClashCollection_addClashPair, METH_VARARGS, NULL},
	 { (char *)"ClashCollection_checkClash", _wrap_ClashCollection_checkClash, METH_VARARGS, NULL},
	 { (char *)"ClashCollection_getThresholdE", _wrap_ClashCollection_getThresholdE, METH_VARARGS, NULL},
	 { (char *)"ClashCollection_getNumberOfClashes", _wrap_ClashCollection_getNumberOfClashes, METH_VARARGS, NULL},
	 { (char *)"ClashCollection_storeCurrentRotamerConfiguration", _wrap_ClashCollection_storeCurrentRotamerConfiguration, METH_VARARGS, NULL},
	 { (char *)"ClashCollection_increment_total_clashing_rotamers_eliminated", _wrap_ClashCollection_increment_total_clashing_rotamers_eliminated, METH_VARARGS, NULL},
	 { (char *)"ClashCollection_set_total_clashing_rotamers_eliminated", _wrap_ClashCollection_set_total_clashing_rotamers_eliminated, METH_VARARGS, NULL},
	 { (char *)"ClashCollection_get_total_clashing_rotamers_eliminated", _wrap_ClashCollection_get_total_clashing_rotamers_eliminated, METH_VARARGS, NULL},
	 { (char *)"ClashCollection_getClashList", _wrap_ClashCollection_getClashList, METH_VARARGS, NULL},
	 { (char *)"ClashCollection_getDiscreteClashPairList", _wrap_ClashCollection_getDiscreteClashPairList, METH_VARARGS, NULL},
	 { (char *)"ClashCollection_swigregister", ClashCollection_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RotamerNeighborList", _wrap_new_RotamerNeighborList, METH_VARARGS, NULL},
	 { (char *)"RotamerNeighborList_setCutoff", _wrap_RotamerNeighborList_setCutoff, METH_VARARGS, NULL},
	 { (char *)"RotamerNeighborList_getCutoff", _wrap_RotamerNeighborList_getCutoff, METH_VARARGS, NULL},
	 { (char *)"RotamerNeighborList_setProtein", _wrap_RotamerNeighborList_setProtein, METH_VARARGS, NULL},
	 { (char *)"RotamerNeighborList_getProtein", _wrap_RotamerNeighborList_getProtein, METH_VARARGS, NULL},
	 { (char *)"RotamerNeighborList_addMutInfoRotConnInfo", _wrap_RotamerNeighborList_addMutInfoRotConnInfo, METH_VARARGS, NULL},
	 { (char *)"RotamerNeighborList_initRotamerNeighborList", _wrap_RotamerNeighborList_initRotamerNeighborList, METH_VARARGS, NULL},
	 { (char *)"RotamerNeighborList_returnEmptyLatticeNeighborList", _wrap_RotamerNeighborList_returnEmptyLatticeNeighborList, METH_VARARGS, NULL},
	 { (char *)"delete_RotamerNeighborList", _wrap_delete_RotamerNeighborList, METH_VARARGS, NULL},
	 { (char *)"RotamerNeighborList_swigregister", RotamerNeighborList_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RotamerCluster", _wrap_new_RotamerCluster, METH_VARARGS, NULL},
	 { (char *)"delete_RotamerCluster", _wrap_delete_RotamerCluster, METH_VARARGS, NULL},
	 { (char *)"RotamerCluster_addRotamerCluster", _wrap_RotamerCluster_addRotamerCluster, METH_VARARGS, NULL},
	 { (char *)"RotamerCluster_getAllRotamers", _wrap_RotamerCluster_getAllRotamers, METH_VARARGS, NULL},
	 { (char *)"RotamerCluster_print_Me", _wrap_RotamerCluster_print_Me, METH_VARARGS, NULL},
	 { (char *)"RotamerCluster_append_to_filehandle", _wrap_RotamerCluster_append_to_filehandle, METH_VARARGS, NULL},
	 { (char *)"RotamerCluster_pdb_append_to_filehandle", _wrap_RotamerCluster_pdb_append_to_filehandle, METH_VARARGS, NULL},
	 { (char *)"RotamerCluster_append_to_ostream_connect_info", _wrap_RotamerCluster_append_to_ostream_connect_info, METH_VARARGS, NULL},
	 { (char *)"RotamerCluster_get_sc_atoms", _wrap_RotamerCluster_get_sc_atoms, METH_VARARGS, NULL},
	 { (char *)"RotamerCluster_get_bb_atoms", _wrap_RotamerCluster_get_bb_atoms, METH_VARARGS, NULL},
	 { (char *)"RotamerCluster_swigregister", RotamerCluster_swigregister, METH_VARARGS, NULL},
	 { (char *)"RotConnInfo_targetRotamerLibFile_set", _wrap_RotConnInfo_targetRotamerLibFile_set, METH_VARARGS, NULL},
	 { (char *)"RotConnInfo_targetRotamerLibFile_get", _wrap_RotConnInfo_targetRotamerLibFile_get, METH_VARARGS, NULL},
	 { (char *)"RotConnInfo_anchor_pts_set", _wrap_RotConnInfo_anchor_pts_set, METH_VARARGS, NULL},
	 { (char *)"RotConnInfo_anchor_pts_get", _wrap_RotConnInfo_anchor_pts_get, METH_VARARGS, NULL},
	 { (char *)"RotConnInfo_atoms_of_exact_match_set", _wrap_RotConnInfo_atoms_of_exact_match_set, METH_VARARGS, NULL},
	 { (char *)"RotConnInfo_atoms_of_exact_match_get", _wrap_RotConnInfo_atoms_of_exact_match_get, METH_VARARGS, NULL},
	 { (char *)"RotConnInfo_atom_n_map_set", _wrap_RotConnInfo_atom_n_map_set, METH_VARARGS, NULL},
	 { (char *)"RotConnInfo_atom_n_map_get", _wrap_RotConnInfo_atom_n_map_get, METH_VARARGS, NULL},
	 { (char *)"RotConnInfo_atom_n_label_map_set", _wrap_RotConnInfo_atom_n_label_map_set, METH_VARARGS, NULL},
	 { (char *)"RotConnInfo_atom_n_label_map_get", _wrap_RotConnInfo_atom_n_label_map_get, METH_VARARGS, NULL},
	 { (char *)"RotConnInfo_side_chain_atoms_set", _wrap_RotConnInfo_side_chain_atoms_set, METH_VARARGS, NULL},
	 { (char *)"RotConnInfo_side_chain_atoms_get", _wrap_RotConnInfo_side_chain_atoms_get, METH_VARARGS, NULL},
	 { (char *)"RotConnInfo_atom_connectivity_info_set", _wrap_RotConnInfo_atom_connectivity_info_set, METH_VARARGS, NULL},
	 { (char *)"RotConnInfo_atom_connectivity_info_get", _wrap_RotConnInfo_atom_connectivity_info_get, METH_VARARGS, NULL},
	 { (char *)"RotConnInfo_connection_point_atoms_set", _wrap_RotConnInfo_connection_point_atoms_set, METH_VARARGS, NULL},
	 { (char *)"RotConnInfo_connection_point_atoms_get", _wrap_RotConnInfo_connection_point_atoms_get, METH_VARARGS, NULL},
	 { (char *)"RotConnInfo_modifyMappingInProteinAtoms", _wrap_RotConnInfo_modifyMappingInProteinAtoms, METH_VARARGS, NULL},
	 { (char *)"RotConnInfo_clear", _wrap_RotConnInfo_clear, METH_VARARGS, NULL},
	 { (char *)"new_RotConnInfo", _wrap_new_RotConnInfo, METH_VARARGS, NULL},
	 { (char *)"delete_RotConnInfo", _wrap_delete_RotConnInfo, METH_VARARGS, NULL},
	 { (char *)"RotConnInfo_swigregister", RotConnInfo_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_bgf_handler", _wrap_new_bgf_handler, METH_VARARGS, NULL},
	 { (char *)"delete_bgf_handler", _wrap_delete_bgf_handler, METH_VARARGS, NULL},
	 { (char *)"bgf_handler_readfile", _wrap_bgf_handler_readfile, METH_VARARGS, NULL},
	 { (char *)"bgf_handler_readPDB", _wrap_bgf_handler_readPDB, METH_VARARGS, NULL},
	 { (char *)"bgf_handler_printToFile", _wrap_bgf_handler_printToFile, METH_VARARGS, NULL},
	 { (char *)"bgf_handler_printfile", _wrap_bgf_handler_printfile, METH_VARARGS, NULL},
	 { (char *)"bgf_handler_printPDB", _wrap_bgf_handler_printPDB, METH_VARARGS, NULL},
	 { (char *)"bgf_handler_printToPDB", _wrap_bgf_handler_printToPDB, METH_VARARGS, NULL},
	 { (char *)"bgf_handler_printSequenceToFile", _wrap_bgf_handler_printSequenceToFile, METH_VARARGS, NULL},
	 { (char *)"bgf_handler_returnSequence", _wrap_bgf_handler_returnSequence, METH_VARARGS, NULL},
	 { (char *)"bgf_handler_printSequence", _wrap_bgf_handler_printSequence, METH_VARARGS, NULL},
	 { (char *)"bgf_handler_pass_atomlist", _wrap_bgf_handler_pass_atomlist, METH_VARARGS, NULL},
	 { (char *)"bgf_handler_getAtomList", _wrap_bgf_handler_getAtomList, METH_VARARGS, NULL},
	 { (char *)"bgf_handler_atom_list_set", _wrap_bgf_handler_atom_list_set, METH_VARARGS, NULL},
	 { (char *)"bgf_handler_atom_list_get", _wrap_bgf_handler_atom_list_get, METH_VARARGS, NULL},
	 { (char *)"bgf_handler_header_lines_set", _wrap_bgf_handler_header_lines_set, METH_VARARGS, NULL},
	 { (char *)"bgf_handler_header_lines_get", _wrap_bgf_handler_header_lines_get, METH_VARARGS, NULL},
	 { (char *)"bgf_handler_atom_lines_set", _wrap_bgf_handler_atom_lines_set, METH_VARARGS, NULL},
	 { (char *)"bgf_handler_atom_lines_get", _wrap_bgf_handler_atom_lines_get, METH_VARARGS, NULL},
	 { (char *)"bgf_handler_conect_format_lines_set", _wrap_bgf_handler_conect_format_lines_set, METH_VARARGS, NULL},
	 { (char *)"bgf_handler_conect_format_lines_get", _wrap_bgf_handler_conect_format_lines_get, METH_VARARGS, NULL},
	 { (char *)"bgf_handler_connectivity_record_lines_set", _wrap_bgf_handler_connectivity_record_lines_set, METH_VARARGS, NULL},
	 { (char *)"bgf_handler_connectivity_record_lines_get", _wrap_bgf_handler_connectivity_record_lines_get, METH_VARARGS, NULL},
	 { (char *)"bgf_handler_swigregister", bgf_handler_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AminoAcid_RTF", _wrap_new_AminoAcid_RTF, METH_VARARGS, NULL},
	 { (char *)"delete_AminoAcid_RTF", _wrap_delete_AminoAcid_RTF, METH_VARARGS, NULL},
	 { (char *)"AminoAcid_RTF_get_ff_type", _wrap_AminoAcid_RTF_get_ff_type, METH_VARARGS, NULL},
	 { (char *)"AminoAcid_RTF_return_bonds_table", _wrap_AminoAcid_RTF_return_bonds_table, METH_VARARGS, NULL},
	 { (char *)"AminoAcid_RTF_swigregister", AminoAcid_RTF_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SCREAM_RTF", _wrap_new_SCREAM_RTF, METH_VARARGS, NULL},
	 { (char *)"delete_SCREAM_RTF", _wrap_delete_SCREAM_RTF, METH_VARARGS, NULL},
	 { (char *)"SCREAM_RTF_get_AminoAcid_RTF", _wrap_SCREAM_RTF_get_AminoAcid_RTF, METH_VARARGS, NULL},
	 { (char *)"SCREAM_RTF_get_ff_type", _wrap_SCREAM_RTF_get_ff_type, METH_VARARGS, NULL},
	 { (char *)"SCREAM_RTF_swigregister", SCREAM_RTF_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Scream_EE", _wrap_new_Scream_EE, METH_VARARGS, NULL},
	 { (char *)"delete_Scream_EE", _wrap_delete_Scream_EE, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_init", _wrap_Scream_EE_init, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_setCalcNonPolarHydrogen_flag", _wrap_Scream_EE_setCalcNonPolarHydrogen_flag, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_getCalcNonPolarHydrogen_flag", _wrap_Scream_EE_getCalcNonPolarHydrogen_flag, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_addMutInfoRotConnInfo", _wrap_Scream_EE_addMutInfoRotConnInfo, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_init_after_addedMutInfoRotConnInfo", _wrap_Scream_EE_init_after_addedMutInfoRotConnInfo, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_init_after_addedMutInfoRotConnInfo_on_the_fly_E", _wrap_Scream_EE_init_after_addedMutInfoRotConnInfo_on_the_fly_E, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_init_after_addedMutInfoRotConnInfo_neighbor_list", _wrap_Scream_EE_init_after_addedMutInfoRotConnInfo_neighbor_list, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_fix_mutInfo", _wrap_Scream_EE_fix_mutInfo, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_moveable_mutInfo", _wrap_Scream_EE_moveable_mutInfo, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_fix_all", _wrap_Scream_EE_fix_all, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_visible_mutInfo", _wrap_Scream_EE_visible_mutInfo, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_invisible_mutInfo", _wrap_Scream_EE_invisible_mutInfo, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_visible_EL_mutInfo", _wrap_Scream_EE_visible_EL_mutInfo, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_invisible_EL_mutInfo", _wrap_Scream_EE_invisible_EL_mutInfo, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_visible_all", _wrap_Scream_EE_visible_all, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_invisible_all", _wrap_Scream_EE_invisible_all, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_visible_EL_all", _wrap_Scream_EE_visible_EL_all, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_invisible_EL_all", _wrap_Scream_EE_invisible_EL_all, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_make_chain_invisible", _wrap_Scream_EE_make_chain_invisible, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_make_chain_EL_invisible", _wrap_Scream_EE_make_chain_EL_invisible, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_resetFlags", _wrap_Scream_EE_resetFlags, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_setup_variableAtomsOnEachSidechain", _wrap_Scream_EE_setup_variableAtomsOnEachSidechain, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_initScreamAtomDeltaValue", _wrap_Scream_EE_initScreamAtomDeltaValue, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_initScreamAtomVdwHbFields", _wrap_Scream_EE_initScreamAtomVdwHbFields, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_addClashCollection", _wrap_Scream_EE_addClashCollection, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_cleanClashCollection", _wrap_Scream_EE_cleanClashCollection, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_getDistanceDielectricPrefactor", _wrap_Scream_EE_getDistanceDielectricPrefactor, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_setDistanceDielectricPrefactor", _wrap_Scream_EE_setDistanceDielectricPrefactor, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_setNormalDielectric", _wrap_Scream_EE_setNormalDielectric, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_ntrlRotamerPlacement", _wrap_Scream_EE_ntrlRotamerPlacement, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_coulomb_obj_set", _wrap_Scream_EE_coulomb_obj_set, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_coulomb_obj_get", _wrap_Scream_EE_coulomb_obj_get, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_vdw_obj_set", _wrap_Scream_EE_vdw_obj_set, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_vdw_obj_get", _wrap_Scream_EE_vdw_obj_get, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_hb_obj_set", _wrap_Scream_EE_hb_obj_set, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_hb_obj_get", _wrap_Scream_EE_hb_obj_get, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_coulomb_EE_set", _wrap_Scream_EE_coulomb_EE_set, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_coulomb_EE_get", _wrap_Scream_EE_coulomb_EE_get, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_vdw_EE_set", _wrap_Scream_EE_vdw_EE_set, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_vdw_EE_get", _wrap_Scream_EE_vdw_EE_get, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_hb_EE_set", _wrap_Scream_EE_hb_EE_set, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_hb_EE_get", _wrap_Scream_EE_hb_EE_get, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_vdw_hb_exclusion_EE_set", _wrap_Scream_EE_vdw_hb_exclusion_EE_set, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_vdw_hb_exclusion_EE_get", _wrap_Scream_EE_vdw_hb_exclusion_EE_get, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_empty_lattice_E", _wrap_Scream_EE_calc_empty_lattice_E, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_empty_lattice_E_full_delta", _wrap_Scream_EE_calc_empty_lattice_E_full_delta, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_empty_lattice_E_flat_delta", _wrap_Scream_EE_calc_empty_lattice_E_flat_delta, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_empty_lattice_E_scaled_inner_wall", _wrap_Scream_EE_calc_empty_lattice_E_scaled_inner_wall, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_empty_lattice_coulomb_E_delta", _wrap_Scream_EE_calc_empty_lattice_coulomb_E_delta, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_empty_lattice_vdw_E_delta", _wrap_Scream_EE_calc_empty_lattice_vdw_E_delta, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_empty_lattice_hb_E_delta", _wrap_Scream_EE_calc_empty_lattice_hb_E_delta, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_empty_lattice_vdw_hb_exclusion_E_delta", _wrap_Scream_EE_calc_empty_lattice_vdw_hb_exclusion_E_delta, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_EL_vdw_rot_selfBB", _wrap_Scream_EE_calc_EL_vdw_rot_selfBB, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_EL_vdw_rot_otherBB", _wrap_Scream_EE_calc_EL_vdw_rot_otherBB, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_EL_vdw_rot_fixedSC", _wrap_Scream_EE_calc_EL_vdw_rot_fixedSC, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_EL_vdw_rot_fixedHET", _wrap_Scream_EE_calc_EL_vdw_rot_fixedHET, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_EL_vdw_rot_moveableHET", _wrap_Scream_EE_calc_EL_vdw_rot_moveableHET, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_EL_coulomb_rot_selfBB", _wrap_Scream_EE_calc_EL_coulomb_rot_selfBB, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_EL_coulomb_rot_otherBB", _wrap_Scream_EE_calc_EL_coulomb_rot_otherBB, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_EL_coulomb_rot_fixedSC", _wrap_Scream_EE_calc_EL_coulomb_rot_fixedSC, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_EL_coulomb_rot_fixedHET", _wrap_Scream_EE_calc_EL_coulomb_rot_fixedHET, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_EL_coulomb_rot_moveableHET", _wrap_Scream_EE_calc_EL_coulomb_rot_moveableHET, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_EL_hb_rot_selfBB", _wrap_Scream_EE_calc_EL_hb_rot_selfBB, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_EL_hb_rot_otherBB", _wrap_Scream_EE_calc_EL_hb_rot_otherBB, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_EL_hb_rot_fixedSC", _wrap_Scream_EE_calc_EL_hb_rot_fixedSC, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_EL_hb_rot_fixedHET", _wrap_Scream_EE_calc_EL_hb_rot_fixedHET, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_EL_hb_rot_moveableHET", _wrap_Scream_EE_calc_EL_hb_rot_moveableHET, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_all_interaction_E", _wrap_Scream_EE_calc_all_interaction_E, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_all_interaction_E_full_delta", _wrap_Scream_EE_calc_all_interaction_E_full_delta, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_all_interaction_E_flat_delta", _wrap_Scream_EE_calc_all_interaction_E_flat_delta, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_all_interaction_coulomb_E_delta", _wrap_Scream_EE_calc_all_interaction_coulomb_E_delta, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_all_interaction_vdw_E_delta", _wrap_Scream_EE_calc_all_interaction_vdw_E_delta, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_all_interaction_hb_E_delta", _wrap_Scream_EE_calc_all_interaction_hb_E_delta, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_all_interaction_vdw_hb_exclusion_E_delta", _wrap_Scream_EE_calc_all_interaction_vdw_hb_exclusion_E_delta, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_residue_interaction_E", _wrap_Scream_EE_calc_residue_interaction_E, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_residue_interaction_vdw_E", _wrap_Scream_EE_calc_residue_interaction_vdw_E, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_residue_interaction_hb_E", _wrap_Scream_EE_calc_residue_interaction_hb_E, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_calc_residue_interaction_coulumb_E", _wrap_Scream_EE_calc_residue_interaction_coulumb_E, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_setProtein", _wrap_Scream_EE_setProtein, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_getProtein", _wrap_Scream_EE_getProtein, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_ptn_set", _wrap_Scream_EE_ptn_set, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_ptn_get", _wrap_Scream_EE_ptn_get, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_mutInfoV_set", _wrap_Scream_EE_mutInfoV_set, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_mutInfoV_get", _wrap_Scream_EE_mutInfoV_get, METH_VARARGS, NULL},
	 { (char *)"Scream_EE_swigregister", Scream_EE_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MutInfo", _wrap_new_MutInfo, METH_VARARGS, NULL},
	 { (char *)"delete_MutInfo", _wrap_delete_MutInfo, METH_VARARGS, NULL},
	 { (char *)"MutInfo_init", _wrap_MutInfo_init, METH_VARARGS, NULL},
	 { (char *)"MutInfo_addMutInfo", _wrap_MutInfo_addMutInfo, METH_VARARGS, NULL},
	 { (char *)"MutInfo___eq__", _wrap_MutInfo___eq__, METH_VARARGS, NULL},
	 { (char *)"MutInfo___lt__", _wrap_MutInfo___lt__, METH_VARARGS, NULL},
	 { (char *)"MutInfo_getChn", _wrap_MutInfo_getChn, METH_VARARGS, NULL},
	 { (char *)"MutInfo_getPstn", _wrap_MutInfo_getPstn, METH_VARARGS, NULL},
	 { (char *)"MutInfo_getAA", _wrap_MutInfo_getAA, METH_VARARGS, NULL},
	 { (char *)"MutInfo_chn_set", _wrap_MutInfo_chn_set, METH_VARARGS, NULL},
	 { (char *)"MutInfo_chn_get", _wrap_MutInfo_chn_get, METH_VARARGS, NULL},
	 { (char *)"MutInfo_pstn_set", _wrap_MutInfo_pstn_set, METH_VARARGS, NULL},
	 { (char *)"MutInfo_pstn_get", _wrap_MutInfo_pstn_get, METH_VARARGS, NULL},
	 { (char *)"MutInfo_AA_set", _wrap_MutInfo_AA_set, METH_VARARGS, NULL},
	 { (char *)"MutInfo_AA_get", _wrap_MutInfo_AA_get, METH_VARARGS, NULL},
	 { (char *)"MutInfo_str_set", _wrap_MutInfo_str_set, METH_VARARGS, NULL},
	 { (char *)"MutInfo_str_get", _wrap_MutInfo_str_get, METH_VARARGS, NULL},
	 { (char *)"MutInfo_mIInt_set", _wrap_MutInfo_mIInt_set, METH_VARARGS, NULL},
	 { (char *)"MutInfo_mIInt_get", _wrap_MutInfo_mIInt_get, METH_VARARGS, NULL},
	 { (char *)"MutInfo_print_Me", _wrap_MutInfo_print_Me, METH_VARARGS, NULL},
	 { (char *)"MutInfo_getString", _wrap_MutInfo_getString, METH_VARARGS, NULL},
	 { (char *)"MutInfo_getAllMutInfos", _wrap_MutInfo_getAllMutInfos, METH_VARARGS, NULL},
	 { (char *)"MutInfo_setIndex", _wrap_MutInfo_setIndex, METH_VARARGS, NULL},
	 { (char *)"MutInfo_getIndex", _wrap_MutInfo_getIndex, METH_VARARGS, NULL},
	 { (char *)"MutInfo_setRotConnInfo", _wrap_MutInfo_setRotConnInfo, METH_VARARGS, NULL},
	 { (char *)"MutInfo_getRotConnInfo", _wrap_MutInfo_getRotConnInfo, METH_VARARGS, NULL},
	 { (char *)"MutInfo_getMutInfoStringWithRotConnInfo", _wrap_MutInfo_getMutInfoStringWithRotConnInfo, METH_VARARGS, NULL},
	 { (char *)"MutInfo_searchAndAddRotConnInfo", _wrap_MutInfo_searchAndAddRotConnInfo, METH_VARARGS, NULL},
	 { (char *)"MutInfo_isClusterMutInfo", _wrap_MutInfo_isClusterMutInfo, METH_VARARGS, NULL},
	 { (char *)"MutInfo_swigregister", MutInfo_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MutInfoPair", _wrap_new_MutInfoPair, METH_VARARGS, NULL},
	 { (char *)"delete_MutInfoPair", _wrap_delete_MutInfoPair, METH_VARARGS, NULL},
	 { (char *)"MutInfoPair_init", _wrap_MutInfoPair_init, METH_VARARGS, NULL},
	 { (char *)"MutInfoPair___eq__", _wrap_MutInfoPair___eq__, METH_VARARGS, NULL},
	 { (char *)"MutInfoPair___lt__", _wrap_MutInfoPair___lt__, METH_VARARGS, NULL},
	 { (char *)"MutInfoPair_getString", _wrap_MutInfoPair_getString, METH_VARARGS, NULL},
	 { (char *)"MutInfoPair_mutInfo1_set", _wrap_MutInfoPair_mutInfo1_set, METH_VARARGS, NULL},
	 { (char *)"MutInfoPair_mutInfo1_get", _wrap_MutInfoPair_mutInfo1_get, METH_VARARGS, NULL},
	 { (char *)"MutInfoPair_mutInfo2_set", _wrap_MutInfoPair_mutInfo2_set, METH_VARARGS, NULL},
	 { (char *)"MutInfoPair_mutInfo2_get", _wrap_MutInfoPair_mutInfo2_get, METH_VARARGS, NULL},
	 { (char *)"MutInfoPair_getMutInfo1", _wrap_MutInfoPair_getMutInfo1, METH_VARARGS, NULL},
	 { (char *)"MutInfoPair_getMutInfo2", _wrap_MutInfoPair_getMutInfo2, METH_VARARGS, NULL},
	 { (char *)"MutInfoPair_setClashE", _wrap_MutInfoPair_setClashE, METH_VARARGS, NULL},
	 { (char *)"MutInfoPair_getClashE", _wrap_MutInfoPair_getClashE, METH_VARARGS, NULL},
	 { (char *)"MutInfoPair_swigregister", MutInfoPair_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ConnectivityMap", _wrap_new_ConnectivityMap, METH_VARARGS, NULL},
	 { (char *)"ConnectivityMap_empty", _wrap_ConnectivityMap_empty, METH_VARARGS, NULL},
	 { (char *)"ConnectivityMap_size", _wrap_ConnectivityMap_size, METH_VARARGS, NULL},
	 { (char *)"ConnectivityMap_clear", _wrap_ConnectivityMap_clear, METH_VARARGS, NULL},
	 { (char *)"ConnectivityMap_swap", _wrap_ConnectivityMap_swap, METH_VARARGS, NULL},
	 { (char *)"ConnectivityMap_get_allocator", _wrap_ConnectivityMap_get_allocator, METH_VARARGS, NULL},
	 { (char *)"ConnectivityMap_erase", _wrap_ConnectivityMap_erase, METH_VARARGS, NULL},
	 { (char *)"ConnectivityMap_count", _wrap_ConnectivityMap_count, METH_VARARGS, NULL},
	 { (char *)"ConnectivityMap___nonzero__", _wrap_ConnectivityMap___nonzero__, METH_VARARGS, NULL},
	 { (char *)"ConnectivityMap___len__", _wrap_ConnectivityMap___len__, METH_VARARGS, NULL},
	 { (char *)"ConnectivityMap___getitem__", _wrap_ConnectivityMap___getitem__, METH_VARARGS, NULL},
	 { (char *)"ConnectivityMap___setitem__", _wrap_ConnectivityMap___setitem__, METH_VARARGS, NULL},
	 { (char *)"ConnectivityMap___delitem__", _wrap_ConnectivityMap___delitem__, METH_VARARGS, NULL},
	 { (char *)"ConnectivityMap_has_key", _wrap_ConnectivityMap_has_key, METH_VARARGS, NULL},
	 { (char *)"ConnectivityMap_keys", _wrap_ConnectivityMap_keys, METH_VARARGS, NULL},
	 { (char *)"ConnectivityMap_values", _wrap_ConnectivityMap_values, METH_VARARGS, NULL},
	 { (char *)"ConnectivityMap_items", _wrap_ConnectivityMap_items, METH_VARARGS, NULL},
	 { (char *)"ConnectivityMap___contains__", _wrap_ConnectivityMap___contains__, METH_VARARGS, NULL},
	 { (char *)"ConnectivityMap___iter__", _wrap_ConnectivityMap___iter__, METH_VARARGS, NULL},
	 { (char *)"delete_ConnectivityMap", _wrap_delete_ConnectivityMap, METH_VARARGS, NULL},
	 { (char *)"ConnectivityMap_swigregister", ConnectivityMap_swigregister, METH_VARARGS, NULL},
	 { (char *)"stringV_empty", _wrap_stringV_empty, METH_VARARGS, NULL},
	 { (char *)"stringV_size", _wrap_stringV_size, METH_VARARGS, NULL},
	 { (char *)"stringV_clear", _wrap_stringV_clear, METH_VARARGS, NULL},
	 { (char *)"stringV_swap", _wrap_stringV_swap, METH_VARARGS, NULL},
	 { (char *)"stringV_get_allocator", _wrap_stringV_get_allocator, METH_VARARGS, NULL},
	 { (char *)"stringV_pop_back", _wrap_stringV_pop_back, METH_VARARGS, NULL},
	 { (char *)"new_stringV", _wrap_new_stringV, METH_VARARGS, NULL},
	 { (char *)"stringV_push_back", _wrap_stringV_push_back, METH_VARARGS, NULL},
	 { (char *)"stringV_front", _wrap_stringV_front, METH_VARARGS, NULL},
	 { (char *)"stringV_back", _wrap_stringV_back, METH_VARARGS, NULL},
	 { (char *)"stringV_assign", _wrap_stringV_assign, METH_VARARGS, NULL},
	 { (char *)"stringV_resize", _wrap_stringV_resize, METH_VARARGS, NULL},
	 { (char *)"stringV_reserve", _wrap_stringV_reserve, METH_VARARGS, NULL},
	 { (char *)"stringV_capacity", _wrap_stringV_capacity, METH_VARARGS, NULL},
	 { (char *)"stringV___nonzero__", _wrap_stringV___nonzero__, METH_VARARGS, NULL},
	 { (char *)"stringV___len__", _wrap_stringV___len__, METH_VARARGS, NULL},
	 { (char *)"stringV_pop", _wrap_stringV_pop, METH_VARARGS, NULL},
	 { (char *)"stringV___getslice__", _wrap_stringV___getslice__, METH_VARARGS, NULL},
	 { (char *)"stringV___setslice__", _wrap_stringV___setslice__, METH_VARARGS, NULL},
	 { (char *)"stringV___delslice__", _wrap_stringV___delslice__, METH_VARARGS, NULL},
	 { (char *)"stringV___delitem__", _wrap_stringV___delitem__, METH_VARARGS, NULL},
	 { (char *)"stringV___getitem__", _wrap_stringV___getitem__, METH_VARARGS, NULL},
	 { (char *)"stringV___setitem__", _wrap_stringV___setitem__, METH_VARARGS, NULL},
	 { (char *)"stringV_append", _wrap_stringV_append, METH_VARARGS, NULL},
	 { (char *)"delete_stringV", _wrap_delete_stringV, METH_VARARGS, NULL},
	 { (char *)"stringV_swigregister", stringV_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ExcitationEnumeration", _wrap_new_ExcitationEnumeration, METH_VARARGS, NULL},
	 { (char *)"ExcitationEnumeration_empty", _wrap_ExcitationEnumeration_empty, METH_VARARGS, NULL},
	 { (char *)"ExcitationEnumeration_size", _wrap_ExcitationEnumeration_size, METH_VARARGS, NULL},
	 { (char *)"ExcitationEnumeration_clear", _wrap_ExcitationEnumeration_clear, METH_VARARGS, NULL},
	 { (char *)"ExcitationEnumeration_swap", _wrap_ExcitationEnumeration_swap, METH_VARARGS, NULL},
	 { (char *)"ExcitationEnumeration_get_allocator", _wrap_ExcitationEnumeration_get_allocator, METH_VARARGS, NULL},
	 { (char *)"ExcitationEnumeration_erase", _wrap_ExcitationEnumeration_erase, METH_VARARGS, NULL},
	 { (char *)"ExcitationEnumeration_count", _wrap_ExcitationEnumeration_count, METH_VARARGS, NULL},
	 { (char *)"ExcitationEnumeration___nonzero__", _wrap_ExcitationEnumeration___nonzero__, METH_VARARGS, NULL},
	 { (char *)"ExcitationEnumeration___len__", _wrap_ExcitationEnumeration___len__, METH_VARARGS, NULL},
	 { (char *)"ExcitationEnumeration___getitem__", _wrap_ExcitationEnumeration___getitem__, METH_VARARGS, NULL},
	 { (char *)"ExcitationEnumeration___setitem__", _wrap_ExcitationEnumeration___setitem__, METH_VARARGS, NULL},
	 { (char *)"ExcitationEnumeration___delitem__", _wrap_ExcitationEnumeration___delitem__, METH_VARARGS, NULL},
	 { (char *)"ExcitationEnumeration_has_key", _wrap_ExcitationEnumeration_has_key, METH_VARARGS, NULL},
	 { (char *)"ExcitationEnumeration_keys", _wrap_ExcitationEnumeration_keys, METH_VARARGS, NULL},
	 { (char *)"ExcitationEnumeration_values", _wrap_ExcitationEnumeration_values, METH_VARARGS, NULL},
	 { (char *)"ExcitationEnumeration_items", _wrap_ExcitationEnumeration_items, METH_VARARGS, NULL},
	 { (char *)"ExcitationEnumeration___contains__", _wrap_ExcitationEnumeration___contains__, METH_VARARGS, NULL},
	 { (char *)"ExcitationEnumeration___iter__", _wrap_ExcitationEnumeration___iter__, METH_VARARGS, NULL},
	 { (char *)"delete_ExcitationEnumeration", _wrap_delete_ExcitationEnumeration, METH_VARARGS, NULL},
	 { (char *)"ExcitationEnumeration_swigregister", ExcitationEnumeration_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ExcitedRotamers", _wrap_new_ExcitedRotamers, METH_VARARGS, NULL},
	 { (char *)"ExcitedRotamers_empty", _wrap_ExcitedRotamers_empty, METH_VARARGS, NULL},
	 { (char *)"ExcitedRotamers_size", _wrap_ExcitedRotamers_size, METH_VARARGS, NULL},
	 { (char *)"ExcitedRotamers_clear", _wrap_ExcitedRotamers_clear, METH_VARARGS, NULL},
	 { (char *)"ExcitedRotamers_swap", _wrap_ExcitedRotamers_swap, METH_VARARGS, NULL},
	 { (char *)"ExcitedRotamers_get_allocator", _wrap_ExcitedRotamers_get_allocator, METH_VARARGS, NULL},
	 { (char *)"ExcitedRotamers_erase", _wrap_ExcitedRotamers_erase, METH_VARARGS, NULL},
	 { (char *)"ExcitedRotamers_count", _wrap_ExcitedRotamers_count, METH_VARARGS, NULL},
	 { (char *)"ExcitedRotamers___nonzero__", _wrap_ExcitedRotamers___nonzero__, METH_VARARGS, NULL},
	 { (char *)"ExcitedRotamers___len__", _wrap_ExcitedRotamers___len__, METH_VARARGS, NULL},
	 { (char *)"ExcitedRotamers___getitem__", _wrap_ExcitedRotamers___getitem__, METH_VARARGS, NULL},
	 { (char *)"ExcitedRotamers___setitem__", _wrap_ExcitedRotamers___setitem__, METH_VARARGS, NULL},
	 { (char *)"ExcitedRotamers___delitem__", _wrap_ExcitedRotamers___delitem__, METH_VARARGS, NULL},
	 { (char *)"ExcitedRotamers_has_key", _wrap_ExcitedRotamers_has_key, METH_VARARGS, NULL},
	 { (char *)"ExcitedRotamers_keys", _wrap_ExcitedRotamers_keys, METH_VARARGS, NULL},
	 { (char *)"ExcitedRotamers_values", _wrap_ExcitedRotamers_values, METH_VARARGS, NULL},
	 { (char *)"ExcitedRotamers_items", _wrap_ExcitedRotamers_items, METH_VARARGS, NULL},
	 { (char *)"ExcitedRotamers___contains__", _wrap_ExcitedRotamers___contains__, METH_VARARGS, NULL},
	 { (char *)"ExcitedRotamers___iter__", _wrap_ExcitedRotamers___iter__, METH_VARARGS, NULL},
	 { (char *)"delete_ExcitedRotamers", _wrap_delete_ExcitedRotamers, METH_VARARGS, NULL},
	 { (char *)"ExcitedRotamers_swigregister", ExcitedRotamers_swigregister, METH_VARARGS, NULL},
	 { (char *)"RotamerV_empty", _wrap_RotamerV_empty, METH_VARARGS, NULL},
	 { (char *)"RotamerV_size", _wrap_RotamerV_size, METH_VARARGS, NULL},
	 { (char *)"RotamerV_clear", _wrap_RotamerV_clear, METH_VARARGS, NULL},
	 { (char *)"RotamerV_swap", _wrap_RotamerV_swap, METH_VARARGS, NULL},
	 { (char *)"RotamerV_get_allocator", _wrap_RotamerV_get_allocator, METH_VARARGS, NULL},
	 { (char *)"RotamerV_pop_back", _wrap_RotamerV_pop_back, METH_VARARGS, NULL},
	 { (char *)"new_RotamerV", _wrap_new_RotamerV, METH_VARARGS, NULL},
	 { (char *)"RotamerV_push_back", _wrap_RotamerV_push_back, METH_VARARGS, NULL},
	 { (char *)"RotamerV_front", _wrap_RotamerV_front, METH_VARARGS, NULL},
	 { (char *)"RotamerV_back", _wrap_RotamerV_back, METH_VARARGS, NULL},
	 { (char *)"RotamerV_assign", _wrap_RotamerV_assign, METH_VARARGS, NULL},
	 { (char *)"RotamerV_resize", _wrap_RotamerV_resize, METH_VARARGS, NULL},
	 { (char *)"RotamerV_reserve", _wrap_RotamerV_reserve, METH_VARARGS, NULL},
	 { (char *)"RotamerV_capacity", _wrap_RotamerV_capacity, METH_VARARGS, NULL},
	 { (char *)"RotamerV___nonzero__", _wrap_RotamerV___nonzero__, METH_VARARGS, NULL},
	 { (char *)"RotamerV___len__", _wrap_RotamerV___len__, METH_VARARGS, NULL},
	 { (char *)"RotamerV_pop", _wrap_RotamerV_pop, METH_VARARGS, NULL},
	 { (char *)"RotamerV___getslice__", _wrap_RotamerV___getslice__, METH_VARARGS, NULL},
	 { (char *)"RotamerV___setslice__", _wrap_RotamerV___setslice__, METH_VARARGS, NULL},
	 { (char *)"RotamerV___delslice__", _wrap_RotamerV___delslice__, METH_VARARGS, NULL},
	 { (char *)"RotamerV___delitem__", _wrap_RotamerV___delitem__, METH_VARARGS, NULL},
	 { (char *)"RotamerV___getitem__", _wrap_RotamerV___getitem__, METH_VARARGS, NULL},
	 { (char *)"RotamerV___setitem__", _wrap_RotamerV___setitem__, METH_VARARGS, NULL},
	 { (char *)"RotamerV_append", _wrap_RotamerV_append, METH_VARARGS, NULL},
	 { (char *)"delete_RotamerV", _wrap_delete_RotamerV, METH_VARARGS, NULL},
	 { (char *)"RotamerV_swigregister", RotamerV_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_pairds", _wrap_new_pairds, METH_VARARGS, NULL},
	 { (char *)"pairds_first_set", _wrap_pairds_first_set, METH_VARARGS, NULL},
	 { (char *)"pairds_first_get", _wrap_pairds_first_get, METH_VARARGS, NULL},
	 { (char *)"pairds_second_set", _wrap_pairds_second_set, METH_VARARGS, NULL},
	 { (char *)"pairds_second_get", _wrap_pairds_second_get, METH_VARARGS, NULL},
	 { (char *)"delete_pairds", _wrap_delete_pairds, METH_VARARGS, NULL},
	 { (char *)"pairds_swigregister", pairds_swigregister, METH_VARARGS, NULL},
	 { (char *)"MutInfoListPy_empty", _wrap_MutInfoListPy_empty, METH_VARARGS, NULL},
	 { (char *)"MutInfoListPy_size", _wrap_MutInfoListPy_size, METH_VARARGS, NULL},
	 { (char *)"MutInfoListPy_clear", _wrap_MutInfoListPy_clear, METH_VARARGS, NULL},
	 { (char *)"MutInfoListPy_swap", _wrap_MutInfoListPy_swap, METH_VARARGS, NULL},
	 { (char *)"MutInfoListPy_get_allocator", _wrap_MutInfoListPy_get_allocator, METH_VARARGS, NULL},
	 { (char *)"MutInfoListPy_pop_back", _wrap_MutInfoListPy_pop_back, METH_VARARGS, NULL},
	 { (char *)"new_MutInfoListPy", _wrap_new_MutInfoListPy, METH_VARARGS, NULL},
	 { (char *)"MutInfoListPy_push_back", _wrap_MutInfoListPy_push_back, METH_VARARGS, NULL},
	 { (char *)"MutInfoListPy_front", _wrap_MutInfoListPy_front, METH_VARARGS, NULL},
	 { (char *)"MutInfoListPy_back", _wrap_MutInfoListPy_back, METH_VARARGS, NULL},
	 { (char *)"MutInfoListPy_assign", _wrap_MutInfoListPy_assign, METH_VARARGS, NULL},
	 { (char *)"MutInfoListPy_resize", _wrap_MutInfoListPy_resize, METH_VARARGS, NULL},
	 { (char *)"MutInfoListPy_reserve", _wrap_MutInfoListPy_reserve, METH_VARARGS, NULL},
	 { (char *)"MutInfoListPy_capacity", _wrap_MutInfoListPy_capacity, METH_VARARGS, NULL},
	 { (char *)"MutInfoListPy___nonzero__", _wrap_MutInfoListPy___nonzero__, METH_VARARGS, NULL},
	 { (char *)"MutInfoListPy___len__", _wrap_MutInfoListPy___len__, METH_VARARGS, NULL},
	 { (char *)"MutInfoListPy_pop", _wrap_MutInfoListPy_pop, METH_VARARGS, NULL},
	 { (char *)"MutInfoListPy___getslice__", _wrap_MutInfoListPy___getslice__, METH_VARARGS, NULL},
	 { (char *)"MutInfoListPy___setslice__", _wrap_MutInfoListPy___setslice__, METH_VARARGS, NULL},
	 { (char *)"MutInfoListPy___delslice__", _wrap_MutInfoListPy___delslice__, METH_VARARGS, NULL},
	 { (char *)"MutInfoListPy___delitem__", _wrap_MutInfoListPy___delitem__, METH_VARARGS, NULL},
	 { (char *)"MutInfoListPy___getitem__", _wrap_MutInfoListPy___getitem__, METH_VARARGS, NULL},
	 { (char *)"MutInfoListPy___setitem__", _wrap_MutInfoListPy___setitem__, METH_VARARGS, NULL},
	 { (char *)"MutInfoListPy_append", _wrap_MutInfoListPy_append, METH_VARARGS, NULL},
	 { (char *)"delete_MutInfoListPy", _wrap_delete_MutInfoListPy, METH_VARARGS, NULL},
	 { (char *)"MutInfoListPy_swigregister", MutInfoListPy_swigregister, METH_VARARGS, NULL},
	 { (char *)"MutInfoPairListPy_empty", _wrap_MutInfoPairListPy_empty, METH_VARARGS, NULL},
	 { (char *)"MutInfoPairListPy_size", _wrap_MutInfoPairListPy_size, METH_VARARGS, NULL},
	 { (char *)"MutInfoPairListPy_clear", _wrap_MutInfoPairListPy_clear, METH_VARARGS, NULL},
	 { (char *)"MutInfoPairListPy_swap", _wrap_MutInfoPairListPy_swap, METH_VARARGS, NULL},
	 { (char *)"MutInfoPairListPy_get_allocator", _wrap_MutInfoPairListPy_get_allocator, METH_VARARGS, NULL},
	 { (char *)"MutInfoPairListPy_pop_back", _wrap_MutInfoPairListPy_pop_back, METH_VARARGS, NULL},
	 { (char *)"new_MutInfoPairListPy", _wrap_new_MutInfoPairListPy, METH_VARARGS, NULL},
	 { (char *)"MutInfoPairListPy_push_back", _wrap_MutInfoPairListPy_push_back, METH_VARARGS, NULL},
	 { (char *)"MutInfoPairListPy_front", _wrap_MutInfoPairListPy_front, METH_VARARGS, NULL},
	 { (char *)"MutInfoPairListPy_back", _wrap_MutInfoPairListPy_back, METH_VARARGS, NULL},
	 { (char *)"MutInfoPairListPy_assign", _wrap_MutInfoPairListPy_assign, METH_VARARGS, NULL},
	 { (char *)"MutInfoPairListPy_resize", _wrap_MutInfoPairListPy_resize, METH_VARARGS, NULL},
	 { (char *)"MutInfoPairListPy_reserve", _wrap_MutInfoPairListPy_reserve, METH_VARARGS, NULL},
	 { (char *)"MutInfoPairListPy_capacity", _wrap_MutInfoPairListPy_capacity, METH_VARARGS, NULL},
	 { (char *)"MutInfoPairListPy___nonzero__", _wrap_MutInfoPairListPy___nonzero__, METH_VARARGS, NULL},
	 { (char *)"MutInfoPairListPy___len__", _wrap_MutInfoPairListPy___len__, METH_VARARGS, NULL},
	 { (char *)"MutInfoPairListPy_pop", _wrap_MutInfoPairListPy_pop, METH_VARARGS, NULL},
	 { (char *)"MutInfoPairListPy___getslice__", _wrap_MutInfoPairListPy___getslice__, METH_VARARGS, NULL},
	 { (char *)"MutInfoPairListPy___setslice__", _wrap_MutInfoPairListPy___setslice__, METH_VARARGS, NULL},
	 { (char *)"MutInfoPairListPy___delslice__", _wrap_MutInfoPairListPy___delslice__, METH_VARARGS, NULL},
	 { (char *)"MutInfoPairListPy___delitem__", _wrap_MutInfoPairListPy___delitem__, METH_VARARGS, NULL},
	 { (char *)"MutInfoPairListPy___getitem__", _wrap_MutInfoPairListPy___getitem__, METH_VARARGS, NULL},
	 { (char *)"MutInfoPairListPy___setitem__", _wrap_MutInfoPairListPy___setitem__, METH_VARARGS, NULL},
	 { (char *)"MutInfoPairListPy_append", _wrap_MutInfoPairListPy_append, METH_VARARGS, NULL},
	 { (char *)"delete_MutInfoPairListPy", _wrap_delete_MutInfoPairListPy, METH_VARARGS, NULL},
	 { (char *)"MutInfoPairListPy_swigregister", MutInfoPairListPy_swigregister, METH_VARARGS, NULL},
	 { (char *)"derefString", _wrap_derefString, METH_VARARGS, NULL},
	 { (char *)"derefRotamer", _wrap_derefRotamer, METH_VARARGS, NULL},
	 { (char *)"derefAARotamer", _wrap_derefAARotamer, METH_VARARGS, NULL},
	 { (char *)"castRotamerToAARotamer", _wrap_castRotamerToAARotamer, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_Multiple_NtrlAARotlibTo_p_NtrlAARotlib(void *x) {
    return (void *)((NtrlAARotlib *)  ((Multiple_NtrlAARotlib *) x));
}
static void *_p_HIS_NtrlAARotlibTo_p_NtrlAARotlib(void *x) {
    return (void *)((NtrlAARotlib *)  ((HIS_NtrlAARotlib *) x));
}
static void *_p_NtrlAARotlibTo_p_AARotlib(void *x) {
    return (void *)((AARotlib *)  ((NtrlAARotlib *) x));
}
static void *_p_Multiple_NtrlAARotlibTo_p_AARotlib(void *x) {
    return (void *)((AARotlib *) (NtrlAARotlib *) ((Multiple_NtrlAARotlib *) x));
}
static void *_p_HIS_NtrlAARotlibTo_p_AARotlib(void *x) {
    return (void *)((AARotlib *) (NtrlAARotlib *) ((HIS_NtrlAARotlib *) x));
}
static void *_p_AARotamerTo_p_Rotamer(void *x) {
    return (void *)((Rotamer *)  ((AARotamer *) x));
}
static void *_p_RotamerClusterTo_p_Rotamer(void *x) {
    return (void *)((Rotamer *)  ((RotamerCluster *) x));
}
static void *_p_p_AARotamerTo_p_p_Rotamer(void *x) {
    return (void *)((Rotamer **)  ((AARotamer **) x));
}
static void *_p_p_RotamerClusterTo_p_p_Rotamer(void *x) {
    return (void *)((Rotamer **)  ((RotamerCluster **) x));
}
static void *_p_AARotlibTo_p_Rotlib(void *x) {
    return (void *)((Rotlib *)  ((AARotlib *) x));
}
static void *_p_NtrlAARotlibTo_p_Rotlib(void *x) {
    return (void *)((Rotlib *) (AARotlib *) ((NtrlAARotlib *) x));
}
static void *_p_Multiple_NtrlAARotlibTo_p_Rotlib(void *x) {
    return (void *)((Rotlib *) (AARotlib *)(NtrlAARotlib *) ((Multiple_NtrlAARotlib *) x));
}
static void *_p_HIS_NtrlAARotlibTo_p_Rotlib(void *x) {
    return (void *)((Rotlib *) (AARotlib *)(NtrlAARotlib *) ((HIS_NtrlAARotlib *) x));
}
static swig_type_info _swigt__p_VDW_HB_Exclusion_EE[] = {{"_p_VDW_HB_Exclusion_EE", 0, "VDW_HB_Exclusion_EE *", 0, 0, 0, 0},{"_p_VDW_HB_Exclusion_EE", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__vectorTdouble_std__allocatorTdouble_t_t[] = {{"_p_std__vectorTdouble_std__allocatorTdouble_t_t", 0, "std::vector<double > *", 0, 0, 0, 0},{"_p_std__vectorTdouble_std__allocatorTdouble_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_RotamerNeighborList[] = {{"_p_RotamerNeighborList", 0, "RotamerNeighborList *", 0, 0, 0, 0},{"_p_RotamerNeighborList", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_Protein[] = {{"_p_Protein", 0, "Protein *", 0, 0, 0, 0},{"_p_Protein", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_key_type[] = {{"_p_key_type", 0, "key_type *", 0, 0, 0, 0},{"_p_key_type", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__mapTint_std__string_std__lessTint_t_std__allocatorTstd__pairTint_const_std__string_t_t_t[] = {{"_p_std__mapTint_std__string_std__lessTint_t_std__allocatorTstd__pairTint_const_std__string_t_t_t", 0, "std::map<int,std::string > *", 0, 0, 0, 0},{"_p_std__mapTint_std__string_std__lessTint_t_std__allocatorTstd__pairTint_const_std__string_t_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_ScreamVector[] = {{"_p_ScreamVector", 0, "ScreamVector *", 0, 0, 0, 0},{"_p_ScreamVector", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__allocatorTMutInfoPair_t[] = {{"_p_std__allocatorTMutInfoPair_t", 0, "std::allocator<MutInfoPair > *|std::vector<MutInfoPair >::allocator_type *", 0, 0, 0, 0},{"_p_std__allocatorTMutInfoPair_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__std__size_t[] = {{"_std__size_t", 0, "std::size_t", 0, 0, 0, 0},{"_std__size_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__size_t[] = {{"_size_t", 0, "size_t", 0, 0, 0, 0},{"_size_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t[] = {{"_p_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t", 0, "std::allocator<std::pair<std::string const,Rotamer * > > *|std::map<std::string,Rotamer * >::allocator_type *", 0, 0, 0, 0},{"_p_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_VDW_EE[] = {{"_p_VDW_EE", 0, "VDW_EE *", 0, 0, 0, 0},{"_p_VDW_EE", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__mapTstd__string_RotConnInfo_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_RotConnInfo_p_t_t_t[] = {{"_p_std__mapTstd__string_RotConnInfo_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_RotConnInfo_p_t_t_t", 0, "std::map<std::string,RotConnInfo * > *", 0, 0, 0, 0},{"_p_std__mapTstd__string_RotConnInfo_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_RotConnInfo_p_t_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__allocatorTMutInfo_t[] = {{"_p_std__allocatorTMutInfo_t", 0, "std::allocator<MutInfo > *|std::vector<MutInfo >::allocator_type *", 0, 0, 0, 0},{"_p_std__allocatorTMutInfo_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_difference_type[] = {{"_p_difference_type", 0, "difference_type *", 0, 0, 0, 0},{"_p_difference_type", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_value_type[] = {{"_p_value_type", 0, "value_type *", 0, 0, 0, 0},{"_p_value_type", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_second_type[] = {{"_p_second_type", 0, "second_type *", 0, 0, 0, 0},{"_p_second_type", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t[] = {{"_p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t", 0, "std::map<SCREAM_ATOM *,int > *", 0, 0, 0, 0},{"_p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_HB_EE[] = {{"_p_HB_EE", 0, "HB_EE *", 0, 0, 0, 0},{"_p_HB_EE", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_MutInfoPair[] = {{"_p_MutInfoPair", 0, "MutInfoPair *|std::vector<MutInfoPair >::value_type *", 0, 0, 0, 0},{"_p_MutInfoPair", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t[] = {{"_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t", 0, "std::vector<MutInfo > *", 0, 0, 0, 0},{"_p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_RotamerCluster[] = {{"_p_RotamerCluster", 0, "RotamerCluster *", 0, 0, 0, 0},{"_p_RotamerCluster", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__mapTint_std__vectorTint_std__allocatorTint_t_t_std__lessTint_t_std__allocatorTstd__pairTint_const_std__vectorTint_std__allocatorTint_t_t_t_t_t[] = {{"_p_std__mapTint_std__vectorTint_std__allocatorTint_t_t_std__lessTint_t_std__allocatorTstd__pairTint_const_std__vectorTint_std__allocatorTint_t_t_t_t_t", 0, "std::map<int,std::vector<int > > *", 0, 0, 0, 0},{"_p_std__mapTint_std__vectorTint_std__allocatorTint_t_t_std__lessTint_t_std__allocatorTstd__pairTint_const_std__vectorTint_std__allocatorTint_t_t_t_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t[] = {{"_p_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t", 0, "std::allocator<std::pair<std::string const,unsigned short > > *|std::map<std::string,unsigned short >::allocator_type *", 0, 0, 0, 0},{"_p_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__std__ptrdiff_t[] = {{"_std__ptrdiff_t", 0, "std::ptrdiff_t", 0, 0, 0, 0},{"_std__ptrdiff_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__ptrdiff_t[] = {{"_ptrdiff_t", 0, "ptrdiff_t", 0, 0, 0, 0},{"_ptrdiff_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t[] = {{"_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t", 0, "std::vector<Rotamer * > *", 0, 0, 0, 0},{"_p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_Ligand[] = {{"_p_Ligand", 0, "Ligand *", 0, 0, 0, 0},{"_p_Ligand", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_const_reference[] = {{"_p_const_reference", 0, "const_reference *", 0, 0, 0, 0},{"_p_const_reference", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_reference[] = {{"_p_reference", 0, "reference *", 0, 0, 0, 0},{"_p_reference", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__vectorTint_std__allocatorTint_t_t[] = {{"_p_std__vectorTint_std__allocatorTint_t_t", 0, "std::vector<int > *", 0, 0, 0, 0},{"_p_std__vectorTint_std__allocatorTint_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_long_double[] = {{"_p_long_double", 0, "long double *", 0, 0, 0, 0},{"_p_long_double", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_double[] = {{"_p_double", 0, "double *", 0, 0, 0, 0},{"_p_double", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_AASideChain[] = {{"_p_AASideChain", 0, "AASideChain *", 0, 0, 0, 0},{"_p_AASideChain", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_SideChain[] = {{"_p_SideChain", 0, "SideChain *", 0, 0, 0, 0},{"_p_SideChain", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_RotConnInfo[] = {{"_p_RotConnInfo", 0, "RotConnInfo *", 0, 0, 0, 0},{"_p_RotConnInfo", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_SCREAM_RTF[] = {{"_p_SCREAM_RTF", 0, "SCREAM_RTF *", 0, 0, 0, 0},{"_p_SCREAM_RTF", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_ofstream[] = {{"_p_ofstream", 0, "ofstream *", 0, 0, 0, 0},{"_p_ofstream", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__vectorTScream_EE_p_std__allocatorTScream_EE_p_t_t[] = {{"_p_std__vectorTScream_EE_p_std__allocatorTScream_EE_p_t_t", 0, "std::vector<Scream_EE * > *", 0, 0, 0, 0},{"_p_std__vectorTScream_EE_p_std__allocatorTScream_EE_p_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__allocatorTRotamer_p_t[] = {{"_p_std__allocatorTRotamer_p_t", 0, "std::allocator<Rotamer * > *|std::vector<Rotamer * >::allocator_type *", 0, 0, 0, 0},{"_p_std__allocatorTRotamer_p_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_fisrt_type[] = {{"_p_fisrt_type", 0, "fisrt_type *", 0, 0, 0, 0},{"_p_fisrt_type", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_ProteinComponent[] = {{"_p_ProteinComponent", 0, "ProteinComponent *", 0, 0, 0, 0},{"_p_ProteinComponent", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_mapped_type[] = {{"_p_mapped_type", 0, "mapped_type *", 0, 0, 0, 0},{"_p_mapped_type", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_allocator_type[] = {{"_p_allocator_type", 0, "allocator_type *", 0, 0, 0, 0},{"_p_allocator_type", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_AABackBone[] = {{"_p_AABackBone", 0, "AABackBone *", 0, 0, 0, 0},{"_p_AABackBone", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_BackBone[] = {{"_p_BackBone", 0, "BackBone *", 0, 0, 0, 0},{"_p_BackBone", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_AminoAcid_RTF[] = {{"_p_AminoAcid_RTF", 0, "AminoAcid_RTF *", 0, 0, 0, 0},{"_p_AminoAcid_RTF", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_bgf_handler[] = {{"_p_bgf_handler", 0, "bgf_handler *", 0, 0, 0, 0},{"_p_bgf_handler", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_ClashCollection[] = {{"_p_ClashCollection", 0, "ClashCollection *", 0, 0, 0, 0},{"_p_ClashCollection", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_RotlibCollection[] = {{"_p_RotlibCollection", 0, "RotlibCollection *", 0, 0, 0, 0},{"_p_RotlibCollection", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_SCREAM_HB_OBJ[] = {{"_p_SCREAM_HB_OBJ", 0, "SCREAM_HB_OBJ *", 0, 0, 0, 0},{"_p_SCREAM_HB_OBJ", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__vectorTRotlib_p_std__allocatorTRotlib_p_t_t[] = {{"_p_std__vectorTRotlib_p_std__allocatorTRotlib_p_t_t", 0, "std::vector<Rotlib * > *", 0, 0, 0, 0},{"_p_std__vectorTRotlib_p_std__allocatorTRotlib_p_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_multimapTstd__string_std__string_t[] = {{"_p_multimapTstd__string_std__string_t", 0, "multimap<std::string,std::string > *", 0, 0, 0, 0},{"_p_multimapTstd__string_std__string_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__pairTdouble_std__string_t[] = {{"_p_std__pairTdouble_std__string_t", 0, "std::pair<double,std::string > *", 0, 0, 0, 0},{"_p_std__pairTdouble_std__string_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_MutInfo[] = {{"_p_MutInfo", 0, "MutInfo *|std::vector<MutInfo >::value_type *", 0, 0, 0, 0},{"_p_MutInfo", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__allocatorTstd__string_t[] = {{"_p_std__allocatorTstd__string_t", 0, "std::allocator<std::string > *|std::vector<std::string >::allocator_type *", 0, 0, 0, 0},{"_p_std__allocatorTstd__string_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__mapTstd__string_NtrlAARotlib_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_NtrlAARotlib_p_t_t_t[] = {{"_p_std__mapTstd__string_NtrlAARotlib_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_NtrlAARotlib_p_t_t_t", 0, "std::map<std::string,NtrlAARotlib * > *", 0, 0, 0, 0},{"_p_std__mapTstd__string_NtrlAARotlib_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_NtrlAARotlib_p_t_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t[] = {{"_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t", 0, "std::map<std::string,unsigned short > *", 0, 0, 0, 0},{"_p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_HIS_NtrlAARotlib[] = {{"_p_HIS_NtrlAARotlib", 0, "HIS_NtrlAARotlib *", 0, 0, 0, 0},{"_p_HIS_NtrlAARotlib", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_Multiple_NtrlAARotlib[] = {{"_p_Multiple_NtrlAARotlib", 0, "Multiple_NtrlAARotlib *", 0, 0, 0, 0},{"_p_Multiple_NtrlAARotlib", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_NtrlAARotlib[] = {{"_p_NtrlAARotlib", 0, "NtrlAARotlib *", 0, 0, 0, 0},{"_p_NtrlAARotlib", 0, 0, 0, 0, 0, 0},{"_p_Multiple_NtrlAARotlib", _p_Multiple_NtrlAARotlibTo_p_NtrlAARotlib, 0, 0, 0, 0, 0},{"_p_HIS_NtrlAARotlib", _p_HIS_NtrlAARotlibTo_p_NtrlAARotlib, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_AARotlib[] = {{"_p_AARotlib", 0, "AARotlib *", 0, 0, 0, 0},{"_p_AARotlib", 0, 0, 0, 0, 0, 0},{"_p_NtrlAARotlib", _p_NtrlAARotlibTo_p_AARotlib, 0, 0, 0, 0, 0},{"_p_Multiple_NtrlAARotlib", _p_Multiple_NtrlAARotlibTo_p_AARotlib, 0, 0, 0, 0, 0},{"_p_HIS_NtrlAARotlib", _p_HIS_NtrlAARotlibTo_p_AARotlib, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_Rotlib[] = {{"_p_Rotlib", 0, "Rotlib *", 0, 0, 0, 0},{"_p_Rotlib", 0, 0, 0, 0, 0, 0},{"_p_AARotlib", _p_AARotlibTo_p_Rotlib, 0, 0, 0, 0, 0},{"_p_NtrlAARotlib", _p_NtrlAARotlibTo_p_Rotlib, 0, 0, 0, 0, 0},{"_p_Multiple_NtrlAARotlib", _p_Multiple_NtrlAARotlibTo_p_Rotlib, 0, 0, 0, 0, 0},{"_p_HIS_NtrlAARotlib", _p_HIS_NtrlAARotlibTo_p_Rotlib, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_char[] = {{"_p_char", 0, "char *", 0, 0, 0, 0},{"_p_char", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t[] = {{"_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t", 0, "std::vector<MutInfoPair > *", 0, 0, 0, 0},{"_p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_SCREAM_ATOM[] = {{"_p_SCREAM_ATOM", 0, "SCREAM_ATOM *|std::map<SCREAM_ATOM *,int >::key_type", 0, 0, 0, 0},{"_p_SCREAM_ATOM", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_SCREAM_ATOM[] = {{"_p_p_SCREAM_ATOM", 0, "SCREAM_ATOM **|std::map<SCREAM_ATOM *,int >::key_type *", 0, 0, 0, 0},{"_p_p_SCREAM_ATOM", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__vectorTstd__string_std__allocatorTstd__string_t_t[] = {{"_p_std__vectorTstd__string_std__allocatorTstd__string_t_t", 0, "std::vector<std::string > *", 0, 0, 0, 0},{"_p_std__vectorTstd__string_std__allocatorTstd__string_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_Scream_EE[] = {{"_p_Scream_EE", 0, "Scream_EE *", 0, 0, 0, 0},{"_p_Scream_EE", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_SCREAM_VDW_OBJ[] = {{"_p_SCREAM_VDW_OBJ", 0, "SCREAM_VDW_OBJ *", 0, 0, 0, 0},{"_p_SCREAM_VDW_OBJ", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_ScreamParameters[] = {{"_p_ScreamParameters", 0, "ScreamParameters *", 0, 0, 0, 0},{"_p_ScreamParameters", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__vectorTMutInfo_p_std__allocatorTMutInfo_p_t_t[] = {{"_p_std__vectorTMutInfo_p_std__allocatorTMutInfo_p_t_t", 0, "std::vector<MutInfo * > *", 0, 0, 0, 0},{"_p_std__vectorTMutInfo_p_std__allocatorTMutInfo_p_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t[] = {{"_p_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t", 0, "std::allocator<std::pair<SCREAM_ATOM *const,int > > *|std::map<SCREAM_ATOM *,int >::allocator_type *", 0, 0, 0, 0},{"_p_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__mapTint_int_std__lessTint_t_std__allocatorTstd__pairTint_const_int_t_t_t[] = {{"_p_std__mapTint_int_std__lessTint_t_std__allocatorTstd__pairTint_const_int_t_t_t", 0, "std::map<int,int > *", 0, 0, 0, 0},{"_p_std__mapTint_int_std__lessTint_t_std__allocatorTstd__pairTint_const_int_t_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_ScreamModel[] = {{"_p_ScreamModel", 0, "ScreamModel *", 0, 0, 0, 0},{"_p_ScreamModel", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_SCREAM_Coulomb_OBJ[] = {{"_p_SCREAM_Coulomb_OBJ", 0, "SCREAM_Coulomb_OBJ *", 0, 0, 0, 0},{"_p_SCREAM_Coulomb_OBJ", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_ostream[] = {{"_p_ostream", 0, "ostream *", 0, 0, 0, 0},{"_p_ostream", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_AAChain[] = {{"_p_AAChain", 0, "AAChain *", 0, 0, 0, 0},{"_p_AAChain", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_size_type[] = {{"_p_size_type", 0, "size_type *", 0, 0, 0, 0},{"_p_size_type", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__string[] = {{"_p_std__string", 0, "std::string *", 0, 0, 0, 0},{"_p_std__string", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__mapTMutInfo_RotConnInfo_p_std__lessTMutInfo_t_std__allocatorTstd__pairTMutInfo_const_RotConnInfo_p_t_t_t[] = {{"_p_std__mapTMutInfo_RotConnInfo_p_std__lessTMutInfo_t_std__allocatorTstd__pairTMutInfo_const_RotConnInfo_p_t_t_t", 0, "std::map<MutInfo,RotConnInfo * > *", 0, 0, 0, 0},{"_p_std__mapTMutInfo_RotConnInfo_p_std__lessTMutInfo_t_std__allocatorTstd__pairTMutInfo_const_RotConnInfo_p_t_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__mapTunsigned_short_Rotamer_p_std__lessTunsigned_short_t_std__allocatorTstd__pairTunsigned_short_const_Rotamer_p_t_t_t[] = {{"_p_std__mapTunsigned_short_Rotamer_p_std__lessTunsigned_short_t_std__allocatorTstd__pairTunsigned_short_const_Rotamer_p_t_t_t", 0, "std::map<unsigned short,Rotamer * > *|ExcitedRotamers_n *", 0, 0, 0, 0},{"_p_std__mapTunsigned_short_Rotamer_p_std__lessTunsigned_short_t_std__allocatorTstd__pairTunsigned_short_const_Rotamer_p_t_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__mapTunsigned_short_unsigned_short_std__lessTunsigned_short_t_std__allocatorTstd__pairTunsigned_short_const_unsigned_short_t_t_t[] = {{"_p_std__mapTunsigned_short_unsigned_short_std__lessTunsigned_short_t_std__allocatorTstd__pairTunsigned_short_const_unsigned_short_t_t_t", 0, "std::map<unsigned short,unsigned short > *|ExcitationEnumeration_n *", 0, 0, 0, 0},{"_p_std__mapTunsigned_short_unsigned_short_std__lessTunsigned_short_t_std__allocatorTstd__pairTunsigned_short_const_unsigned_short_t_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_Coulomb_EE[] = {{"_p_Coulomb_EE", 0, "Coulomb_EE *", 0, 0, 0, 0},{"_p_Coulomb_EE", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_AARotamer[] = {{"_p_AARotamer", 0, "AARotamer *", 0, 0, 0, 0},{"_p_AARotamer", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_Rotamer[] = {{"_p_Rotamer", 0, "Rotamer *", 0, 0, 0, 0},{"_p_Rotamer", 0, 0, 0, 0, 0, 0},{"_p_AARotamer", _p_AARotamerTo_p_Rotamer, 0, 0, 0, 0, 0},{"_p_RotamerCluster", _p_RotamerClusterTo_p_Rotamer, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_Rotamer[] = {{"_p_p_Rotamer", 0, "Rotamer **", 0, 0, 0, 0},{"_p_p_Rotamer", 0, 0, 0, 0, 0, 0},{"_p_p_AARotamer", _p_p_AARotamerTo_p_p_Rotamer, 0, 0, 0, 0, 0},{"_p_p_RotamerCluster", _p_p_RotamerClusterTo_p_p_Rotamer, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_AARotamer[] = {{"_p_p_AARotamer", 0, "AARotamer **", 0, 0, 0, 0},{"_p_p_AARotamer", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__vectorTSCREAM_ATOM_p_std__allocatorTSCREAM_ATOM_p_t_t[] = {{"_p_std__vectorTSCREAM_ATOM_p_std__allocatorTSCREAM_ATOM_p_t_t", 0, "std::vector<SCREAM_ATOM * > *|ScreamAtomV *", 0, 0, 0, 0},{"_p_std__vectorTSCREAM_ATOM_p_std__allocatorTSCREAM_ATOM_p_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_stringV[] = {{"_p_stringV", 0, "stringV *", 0, 0, 0, 0},{"_p_stringV", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t[] = {{"_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t", 0, "std::map<std::string,Rotamer * > *", 0, 0, 0, 0},{"_p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_VDW_HB_Exclusion_EE, 
_swigt__p_std__vectorTdouble_std__allocatorTdouble_t_t, 
_swigt__p_RotamerNeighborList, 
_swigt__p_Protein, 
_swigt__p_key_type, 
_swigt__p_std__mapTint_std__string_std__lessTint_t_std__allocatorTstd__pairTint_const_std__string_t_t_t, 
_swigt__p_ScreamVector, 
_swigt__p_std__allocatorTMutInfoPair_t, 
_swigt__std__size_t, 
_swigt__size_t, 
_swigt__p_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t, 
_swigt__p_VDW_EE, 
_swigt__p_std__mapTstd__string_RotConnInfo_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_RotConnInfo_p_t_t_t, 
_swigt__p_std__allocatorTMutInfo_t, 
_swigt__p_difference_type, 
_swigt__p_value_type, 
_swigt__p_second_type, 
_swigt__p_std__mapTSCREAM_ATOM_p_int_std__lessTSCREAM_ATOM_p_t_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t_t, 
_swigt__p_HB_EE, 
_swigt__p_MutInfoPair, 
_swigt__p_std__vectorTMutInfo_std__allocatorTMutInfo_t_t, 
_swigt__p_RotamerCluster, 
_swigt__p_std__mapTint_std__vectorTint_std__allocatorTint_t_t_std__lessTint_t_std__allocatorTstd__pairTint_const_std__vectorTint_std__allocatorTint_t_t_t_t_t, 
_swigt__p_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t, 
_swigt__std__ptrdiff_t, 
_swigt__ptrdiff_t, 
_swigt__p_std__vectorTRotamer_p_std__allocatorTRotamer_p_t_t, 
_swigt__p_Ligand, 
_swigt__p_const_reference, 
_swigt__p_reference, 
_swigt__p_std__vectorTint_std__allocatorTint_t_t, 
_swigt__p_long_double, 
_swigt__p_double, 
_swigt__p_AASideChain, 
_swigt__p_SideChain, 
_swigt__p_RotConnInfo, 
_swigt__p_SCREAM_RTF, 
_swigt__p_ofstream, 
_swigt__p_std__vectorTScream_EE_p_std__allocatorTScream_EE_p_t_t, 
_swigt__p_std__allocatorTRotamer_p_t, 
_swigt__p_fisrt_type, 
_swigt__p_ProteinComponent, 
_swigt__p_mapped_type, 
_swigt__p_allocator_type, 
_swigt__p_AABackBone, 
_swigt__p_BackBone, 
_swigt__p_AminoAcid_RTF, 
_swigt__p_bgf_handler, 
_swigt__p_ClashCollection, 
_swigt__p_RotlibCollection, 
_swigt__p_SCREAM_HB_OBJ, 
_swigt__p_std__vectorTRotlib_p_std__allocatorTRotlib_p_t_t, 
_swigt__p_multimapTstd__string_std__string_t, 
_swigt__p_std__pairTdouble_std__string_t, 
_swigt__p_MutInfo, 
_swigt__p_std__allocatorTstd__string_t, 
_swigt__p_std__mapTstd__string_NtrlAARotlib_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_NtrlAARotlib_p_t_t_t, 
_swigt__p_std__mapTstd__string_unsigned_short_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_unsigned_short_t_t_t, 
_swigt__p_HIS_NtrlAARotlib, 
_swigt__p_Multiple_NtrlAARotlib, 
_swigt__p_NtrlAARotlib, 
_swigt__p_AARotlib, 
_swigt__p_Rotlib, 
_swigt__p_char, 
_swigt__p_std__vectorTMutInfoPair_std__allocatorTMutInfoPair_t_t, 
_swigt__p_SCREAM_ATOM, 
_swigt__p_p_SCREAM_ATOM, 
_swigt__p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 
_swigt__p_Scream_EE, 
_swigt__p_SCREAM_VDW_OBJ, 
_swigt__p_ScreamParameters, 
_swigt__p_std__vectorTMutInfo_p_std__allocatorTMutInfo_p_t_t, 
_swigt__p_std__allocatorTstd__pairTSCREAM_ATOM_pconst_int_t_t, 
_swigt__p_std__mapTint_int_std__lessTint_t_std__allocatorTstd__pairTint_const_int_t_t_t, 
_swigt__p_ScreamModel, 
_swigt__p_SCREAM_Coulomb_OBJ, 
_swigt__p_ostream, 
_swigt__p_AAChain, 
_swigt__p_size_type, 
_swigt__p_std__string, 
_swigt__p_std__mapTMutInfo_RotConnInfo_p_std__lessTMutInfo_t_std__allocatorTstd__pairTMutInfo_const_RotConnInfo_p_t_t_t, 
_swigt__p_std__mapTunsigned_short_Rotamer_p_std__lessTunsigned_short_t_std__allocatorTstd__pairTunsigned_short_const_Rotamer_p_t_t_t, 
_swigt__p_std__mapTunsigned_short_unsigned_short_std__lessTunsigned_short_t_std__allocatorTstd__pairTunsigned_short_const_unsigned_short_t_t_t, 
_swigt__p_Coulomb_EE, 
_swigt__p_AARotamer, 
_swigt__p_Rotamer, 
_swigt__p_p_Rotamer, 
_swigt__p_p_AARotamer, 
_swigt__p_std__vectorTSCREAM_ATOM_p_std__allocatorTSCREAM_ATOM_p_t_t, 
_swigt__p_stringV, 
_swigt__p_std__mapTstd__string_Rotamer_p_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_Rotamer_p_t_t_t, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
    
    /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
    
    /* -----------------------------------------------------------------------------
     * global variable support code.
     * ----------------------------------------------------------------------------- */
    
    typedef struct swig_globalvar {
        char       *name;                  /* Name of global variable */
        PyObject *(*get_attr)();           /* Return the current value */
        int       (*set_attr)(PyObject *); /* Set the value */
        struct swig_globalvar *next;
    } swig_globalvar;
    
    typedef struct swig_varlinkobject {
        PyObject_HEAD
        swig_globalvar *vars;
    } swig_varlinkobject;
    
    static PyObject *
    swig_varlink_repr(swig_varlinkobject *v) {
        v = v;
        return PyString_FromString("<Swig global variables>");
    }
    
    static int
    swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
        swig_globalvar  *var;
        flags = flags;
        fprintf(fp,"Swig global variables { ");
        for (var = v->vars; var; var=var->next) {
            fprintf(fp,"%s", var->name);
            if (var->next) fprintf(fp,", ");
        }
        fprintf(fp," }\n");
        return 0;
    }
    
    static PyObject *
    swig_varlink_getattr(swig_varlinkobject *v, char *n) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->get_attr)();
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return NULL;
    }
    
    static int
    swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->set_attr)(p);
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return 1;
    }
    
    static PyTypeObject varlinktype = {
        PyObject_HEAD_INIT(0)              
        0,                                  /* Number of items in variable part (ob_size) */
        (char *)"swigvarlink",              /* Type name (tp_name) */
        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
        0,                                  /* Itemsize (tp_itemsize) */
        0,                                  /* Deallocator (tp_dealloc) */ 
        (printfunc) swig_varlink_print,     /* Print (tp_print) */
        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        0,                                  /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        0,                                  /* tp_doc */
#if PY_VERSION_HEX >= 0x02000000
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };
    
    /* Create a variable linking object for use later */
    static PyObject *
    SWIG_Python_newvarlink(void) {
        swig_varlinkobject *result = 0;
        result = PyMem_NEW(swig_varlinkobject,1);
        varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
        result->ob_type = &varlinktype;
        result->vars = 0;
        result->ob_refcnt = 0;
        Py_XINCREF((PyObject *) result);
        return ((PyObject*) result);
    }
    
    static void
    SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
        swig_varlinkobject *v;
        swig_globalvar *gv;
        v= (swig_varlinkobject *) p;
        gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
        gv->name = (char *) malloc(strlen(name)+1);
        strcpy(gv->name,name);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
        v->vars = gv;
    }
    
    /* -----------------------------------------------------------------------------
     * constants/methods manipulation
     * ----------------------------------------------------------------------------- */
    
    /* Install Constants */
    static void
    SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
        PyObject *obj = 0;
        size_t i;
        for (i = 0; constants[i].type; i++) {
            switch(constants[i].type) {
                case SWIG_PY_INT:
                obj = PyInt_FromLong(constants[i].lvalue);
                break;
                case SWIG_PY_FLOAT:
                obj = PyFloat_FromDouble(constants[i].dvalue);
                break;
                case SWIG_PY_STRING:
                if (constants[i].pvalue) {
                    obj = PyString_FromString((char *) constants[i].pvalue);
                } else {
                    Py_INCREF(Py_None);
                    obj = Py_None;
                }
                break;
                case SWIG_PY_POINTER:
                obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
                break;
                case SWIG_PY_BINARY:
                obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
                break;
                default:
                obj = 0;
                break;
            }
            if (obj) {
                PyDict_SetItemString(d,constants[i].name,obj);
                Py_DECREF(obj);
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*/
    /* Fix SwigMethods to carry the callback ptrs when needed */
    /* -----------------------------------------------------------------------------*/
    
    static void
    SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
        size_t i;
        for (i = 0; methods[i].ml_name; ++i) {
            char *c = methods[i].ml_doc;
            if (c && (c = strstr(c, "swig_ptr: "))) {
                int j;
                swig_const_info *ci = 0;
                char *name = c + 10;
                for (j = 0; const_table[j].type; j++) {
                    if (strncmp(const_table[j].name, name, 
                    strlen(const_table[j].name)) == 0) {
                        ci = &(const_table[j]);
                        break;
                    }
                }
                if (ci) {
                    size_t shift = (ci->ptype) - types;
                    swig_type_info *ty = types_initial[shift];
                    size_t ldoc = (c - methods[i].ml_doc);
                    size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
                    char *ndoc = (char*)malloc(ldoc + lptr + 10);
                    char *buff = ndoc;
                    void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue: (void *)(ci->lvalue);
                    strncpy(buff, methods[i].ml_doc, ldoc);
                    buff += ldoc;
                    strncpy(buff, "swig_ptr: ", 10);
                    buff += 10;
                    SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
                    methods[i].ml_doc = ndoc;
                }
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*
     *  Initialize type list
     * -----------------------------------------------------------------------------*/
    
#if PY_MAJOR_VERSION < 2
    /* PyModule_AddObject function was introduced in Python 2.0.  The following function
    is copied out of Python/modsupport.c in python version 2.3.4 */
    static int
    PyModule_AddObject(PyObject *m, char *name, PyObject *o)
    {
        PyObject *dict;
        if (!PyModule_Check(m)) {
            PyErr_SetString(PyExc_TypeError,
            "PyModule_AddObject() needs module as first arg");
            return -1;
        }
        if (!o) {
            PyErr_SetString(PyExc_TypeError,
            "PyModule_AddObject() needs non-NULL value");
            return -1;
        }
        
        dict = PyModule_GetDict(m);
        if (dict == NULL) {
            /* Internal error -- modules must have a dict! */
            PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
            PyModule_GetName(m));
            return -1;
        }
        if (PyDict_SetItemString(dict, name, o))
        return -1;
        Py_DECREF(o);
        return 0;
    }
#endif
    
    static swig_type_info **
    SWIG_Python_SetTypeListHandle(swig_type_info **type_list_handle) {
        static PyMethodDef swig_empty_runtime_method_table[] = {
            {
                NULL, NULL, 0, NULL
            } 
        };/* Sentinel */
        
        PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
        swig_empty_runtime_method_table);
        PyObject *pointer = PyCObject_FromVoidPtr((void *) type_list_handle, NULL);
        if (pointer && module) {
            PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
        }
        return type_list_handle;
    } 
    
    static swig_type_info **
    SWIG_Python_LookupTypePointer(swig_type_info **type_list_handle) {
        swig_type_info **type_pointer;
        
        /* first check if module already created */
        type_pointer = SWIG_Python_GetTypeListHandle();
        if (type_pointer) {
            return type_pointer;
        } else {
            /* create a new module and variable */
            return SWIG_Python_SetTypeListHandle(type_list_handle);
        }
    }
    
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void *) SWIG_ReturnGlobalTypeList(void *);
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    
    /* Fix SwigMethods to carry the callback ptrs when needed */
    SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_types_initial);
    
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
#ifdef SWIG_LINK_RUNTIME
        swig_type_list_handle = (swig_type_info **) SWIG_ReturnGlobalTypeList(swig_type_list_handle);
#else
#  ifndef SWIG_STATIC_RUNTIME
        swig_type_list_handle = SWIG_Python_LookupTypePointer(swig_type_list_handle);
#  endif
#endif
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
}

