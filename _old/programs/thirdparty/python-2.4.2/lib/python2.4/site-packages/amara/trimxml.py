#!/usr/bin/env python
"""

"""

import os
import re
import sys
import codecs
import optparse
#import cStringIO
import amara
from amara import saxtools
from xml.dom import Node

#from xml.dom import EMPTY_NAMESPACE as NULL_NAMESPACE
#from xml.dom import EMPTY_PREFIX as NULL_PREFIX


#FIXME: Use 4Suite L10N
def _(t): return t


def run(source, xpattern, xpath, limit, sentinel, display):
    nss = saxtools.sniff_namespace(source)
    nodes = amara.pushbind(source, xpattern, prefixes=nss)
    count = 0
    for node in nodes:
        if not xpath or node.xml_xpath(xpath):
            count += 1
            if display:
                #Print specified subset
                result = node.xml_xpath(display)
                if isinstance(result, list):
                    print '\n'.join([ n.nodeType == Node.ATTRIBUTE_NODE and n.nodeValue or n.xml() for n in result ])
                else:
                    print result
            else:
                #Print the whole thing
                print node.xml()
            if limit and count >= limit:
                break
        if sentinel and node.xml_xpath(sentinel):
            break
    return


class Usage(Exception):
    def __init__(self, msg):
        self.msg = msg


def command_line(args):
    from optparse import OptionParser
    usage = "%prog [options] source xpattern [xpath]"
    parser = OptionParser(usage=usage)
    parser.add_option("-c", "--limit",
                      action="store", type="int", dest="limit", default=-1,
                      help="limit the number of xpattern matches retrieved; files will not be parsed beyond this number, so it serves as optimization", metavar="NUMBER")
    parser.add_option("-d", "--display",
                      action="store", type="string", dest="display",
                      help="xpath expression indicating what nodes to be displayed from matched and screened patterns", metavar="XPATH")
    parser.add_option("--sentinel",
                      action="store", type="string", dest="sentinel",
                      help="xpath expression to be checked for each pattern match.  If true it causes the   reporting to stop, with no further parsing", metavar="XPATH")
    #parser.add_option("-q", "--quiet",
    #                  action="store_false", dest="verbose", default=1,
    #                  help="don't print status messages to stdout")
    global OPTIONS, ARGS
    (OPTIONS, ARGS) = parser.parse_args(args)
    return parser

        
def main(argv=[__name__]):
    #Ideas borrowed from
    # http://www.artima.com/forums/flat.jsp?forum=106&thread=4829
    if argv is None:
        argv = sys.argv
    try:
        try:
            optparser = command_line(argv)
            source = ARGS[1]
            xpattern = ARGS[2]
        except KeyboardInterrupt:
            pass
        except:
             raise Usage(optparser.format_help())
        enc, dec, inwrap, outwrap = codecs.lookup('utf-8')
        try:
            xpath = dec(ARGS[3])[0]
        except IndexError:
            xpath = None
        xpattern = dec(xpattern)[0]
        sentinel = OPTIONS.sentinel and dec(OPTIONS.sentinel)[0]
        display = OPTIONS.display and dec(OPTIONS.display)[0]
        limit = OPTIONS.limit
        if source == '-':
            source = sys.stdin
        run(source, xpattern, xpath, limit, sentinel, display)
    except Usage, err:
        print >>sys.stderr, err.msg
        return 2


if __name__ == "__main__":
    sys.exit(main(sys.argv))

