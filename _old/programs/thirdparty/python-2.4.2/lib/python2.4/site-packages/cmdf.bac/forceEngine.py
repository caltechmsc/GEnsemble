import sys
class ForceEngine:
    def __init__(self):
        return


    def readForceFieldFile(filename):
        return


    def setupEnergyExpression(self, molecule):
        return 


    def downloadCoords(self, molecule):
        return


    def calcEnergyForce(self):
        return


    def calcValenceEnergyForce(self):
        return

    
    def calcCoulombEnergyForce(self):
        return


    def calcVdwEnergyForce(self):
        return


    def calcSolvationEnergyForce(self):
        return


    def getForces(self): 
        return list() 


    def getEnergy(self):
        return 0.0



    #******** methods for turning on and off energy terms ********#
    def setValenceOn(self):
        return

    def setValenceOff(self):
        return

    def setNonbondOn(self):
        return


    def setNonbondOff(self):
        return

    def setVdwOn(self):
        return

    def setCoulombOn(self):
        return

    def setSolvationOn(self):
        return       

    def setHBondOn(self):
        return


    def setRestraintOn(self):
        return
   


class MasterForceEngine:
    def __init__(self, valence=ForceEngine(), coulomb=ForceEngine(), vdw=ForceEngine(), solvation=ForceEngine()):
        self.valence = valence
        self.coulomb = coulomb
        self.vdw = vdw
        self.solvation = solvation

        self.forceEngines = []

        self.forceEngines.append(self.valence)
        self.forceEngines.append(self.coulomb)
        self.forceEngines.append(self.vdw)
        self.forceEngines.append(self.solvation)
        return


    def setupEnergyExpression(self, molecule):
        for fe in self.forceEngines:
            fe.setupEnergyExpression(molecule)
        return    

        
    def downloadCoords(self, molecule):
        for fe in self.forceEngines:
            fe.downloadCoords(molecule)
        return

    def calcEnergyForce(self):
        self.valence.calcValenceEnergyForce()
        self.coulomb.calcCoulombEnergyForce()
        self.vdw.calcVdwEnergyForce()
        self.solvation.calcSolvationEnergyForce()
        return


    def getForces(self):
        forces = []
        for fe in self.forceEngines:
            forces.append(fe.getForces())
        return forces
        

    def uploadForce(self, molecule):
        natoms = molecule.numAtoms()
        forces = self.getForces()
        sum = [0.0 for i in range(3*natoms)]

        for force in forces:
            if force:
                for i in range(natoms):
                    sum[3*i] += force[3*i]
                    sum[3*i+1] += force[3*i+1]
                    sum[3*i+2] += force[3*i+2]

        for i in range(natoms):
            atom = molecule.getAtomWithNumber(i+1)
            atom.setForce(sum[3*i], sum[3*i+1], sum[3*i+2])

        return


    def getEnergy(self):
       valenceEnergy = self.valence.getEnergy()
       coulombEnergy = self.coulomb.getEnergy()
       vdwEnergy = self.vdw.getEnergy()
       solvationEnergy = self.solvation.getEnergy()
       return (valenceEnergy, coulombEnergy, vdwEnergy, solvationEnergy)


    def uploadEnergy(self, molecule):
        valenceEnergy,coulombEnergy,vdwEnergy,solvationEnergy = self.getEnergy()
        molecule.setValenceEnergy(valenceEnergy)
        molecule.setCoulombEnergy(coulombEnergy)
        molecule.setVDWEnergy(vdwEnergy)
        molecule.setSolvationEnergy(solvationEnergy)
        return
        
        
    def uploadEnergyForce(self, molecule):
        self.uploadEnergy(molecule)
        self.uploadForce(molecule)




        

