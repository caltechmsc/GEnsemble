#!/usr/bin/env python

"""\
 This program is part of the CMDF.
 Copyright 2004 California Institute of Technology.  All Rights
 Reserved. Written by Jef Dodson, Caltech, 
 email: jef@caltech.edu

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation provided that the above copyright notice
 and this complete notice appear in all copies.

 This program is distributed in the hope that it will be useful, and in
 no event shall California Institute of Technology be liable to any
 party for direct, indirect, special, incidental or consequential
 damages, including lost profits, arising out of the use of this
 software and its documentation, even if the California Institute of
 Technology has been advised of the possibility of such damage. The
 California Institute of Technology specifically disclaims any
 warranties, including the implied warranties or merchantability and
 fitness for a particular purpose. The software and documentation
 provided hereunder is on an AS IS basis, and the California Institute
 of Technology has no obligations to provide maintenance, support,
 updates, enhancements or modifications.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307
"""
import cmdf.mee.mee as mee
from cmdf.utility.unit import Unit
import numpy

##############################################################
# generic energy engine interface functions to be 
# implemented by all energy engines so they can be called
# from various dynamics and minimization routines.

##############################################################

unit = Unit()

class MeeForceEngine:
    def __init__(self, natoms, cellDim=None):
        self.natoms = natoms
        self.energy = 0.0
        self.cellDim = cellDim
        mee.cmdf_mee_init(natoms)
        return

    def reset(self):
        mee.cmdf_mee_reset(self.natoms)
        return


    def readForceFieldFile(self, filename):
        return


    def setupEnergyExpression(self, coords, fixed, charges, fftypes, blist, bolist):
        for i in range(self.natoms):
            i3 = 3 * i
            i6 = i3 * 2
            x = coords[i3]
            y = coords[i3+1]
            z = coords[i3+2]

            start = i6
            end = i6 + 6
            bondlist = blist[start:end]
            orderlist = bolist[start:end]

            mee.cmdf_mee_set_atom(i+1, x, y, z, fixed[i], charges[i], fftypes[i], bondlist, orderlist)
            #mee.cmdf_mee_set_atom(i+1, x, y, z, fixed[i], charges[i], fftypes[i], list(bondlist), list(orderlist))
        
        print "loading done"

        # set up the energy expressions     
        mee.cmdf_mee_setup_energy_expression()
        return 


    def setCoords(self, coords):
        """
        Copy coordinates from modbabel to mee.
        """
        #natoms = len(coords)/3
       
        for i in range(self.natoms):
            i3 = 3 * i
            x = coords[i3]
            y = coords[i3+1]
            z = coords[i3+2]
            
            mee.cmdf_set_x(i+1, x, y, z)
        return


    def calcEnergyForce(self, coords):
        numAtoms = self.natoms
        # Set coordinates.
        for i in range(numAtoms):
            i3 = 3 * i
            x = coords[i3]
            y = coords[i3+1]
            z = coords[i3+2]
            
            mee.cmdf_set_x(i+1, x, y, z)

        # Compute energy and forces, and get energy.
        self.energy = mee.cmdf_mee_get_energy() * unit.kcalpermol

        # Get forces.
        forces = numpy.zeros(3 * numAtoms, numpy.Float64)
        for i in range(numAtoms):
            i1 = i + 1
            i3 = 3 * i
            forces[i3]   = -mee.cmdf_get_force_x(i1)
            forces[i3+1] = -mee.cmdf_get_force_y(i1)
            forces[i3+2] = -mee.cmdf_get_force_z(i1)

        self.forces = forces * unit.kcalpermol

        return self.energy, self.forces 

    def calcEnergy(self, coords):
        self.calcEnergyForce(coords)
        return self.energy

    def calcForces(self, coords):
        # Get forces without recomputing it.   
        return self.forces 

    def calcGradient(self, coords):
        return -self.forces 


    def calcValenceEnergyForce(self):
        self.setNonbondOff()
        self.setValenceOn()
        mee.cmdf_mee_calc_energy_force()
        return

    
    def calcCoulombEnergyForce(self):
        self.setValenceOff()
        self.setNonbondOff()
        self.setCoulombOn()
        mee.cmdf_mee_calc_energy_force()
        return


    def calcVdwEnergyForce(self):
        self.setValenceOff()
        self.setNonbondOff()
        self.setVdwOn()
        mee.cmdf_mee_calc_energy_force()
        return


    def calcSolvationEnergyForce(self):
        self.setValenceOff()
        self.setNonbondOff()
        self.setSolvationOn()
        mee.cmdf_mee_calc_energy_force()
        return


    def minimize(self, steps, conv):
        mee.cmdf_mee_set_minimization_parameters(steps, conv)
        mee.cmdf_mee_minimize_cg()


    #******** methods for turning on and off energy terms ********#
    def setValenceOn(self):
        # Turn valence terms on
        mee.cmdf_mee_set_bond_energy_on()
        mee.cmdf_mee_set_angle_energy_on()
        mee.cmdf_mee_set_torsion_energy_on()
        mee.cmdf_mee_set_inversion_energy_on()
        return

    def setValenceOff(self):
        # Turn valence terms on
        mee.cmdf_mee_set_bond_energy_off()
        mee.cmdf_mee_set_angle_energy_off()
        mee.cmdf_mee_set_torsion_energy_off()
        mee.cmdf_mee_set_inversion_energy_off()
        return

    def setNonbondOn(self):
        # Turn nonbond terms on
        # mee.cmdf_mee_set_hbond_energy_on()
        mee.cmdf_mee_set_vdw_energy_on()
        mee.cmdf_mee_set_electrostatic_energy_on()
        #mee.cmdf_mee_set_restraint_energy_on()
        #mee.cmdf_mee_set_solvation_energy_on()
        return


    def setNonbondOff(self):
        # Turn nonbond terms off
        #mee.cmdf_mee_set_hbond_energy_off()
        mee.cmdf_mee_set_vdw_energy_off()
        mee.cmdf_mee_set_electrostatic_energy_off()
        #mee.cmdf_mee_set_restraint_energy_off()
        #mee.cmdf_mee_set_solvation_energy_off()
        return

    def setVdwOn(self):
        self.setValenceOff()
        self.setNonbondOff()
        mee.cmdf_mee_set_vdw_energy_on()

    def setCoulombOn(self):
        self.setValenceOff()
        self.setNonbondOff()
        mee.cmdf_mee_set_electrostatic_energy_on()

    def setSolvationOn(self):
        self.setValenceOff()
        self.setNonbondOff()
        mee.cmdf_mee_set_solvation_energy_on()
        

    def setHBondOn(self):
        self.setValenceOff()
        self.setNonbondOff()
        mee.cmdf_mee_set_hbond_energy_on()

    def setRestraintOn(self):
        self.setValenceOff()
        self.setNonbondOff()
        mee.cmdf_mee_set_restraint_energy_on()

   

