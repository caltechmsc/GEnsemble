#!/usr/bin/env python
"""\
 GridPoint.py: A class to hold grid point data

 This program is part of the PyQuante quantum chemistry program suite.

 Copyright (c) 2004, Richard P. Muller. All Rights Reserved. 

 PyQuante version 1.2 and later is covered by the modified BSD
 license. Please see the file LICENSE that is part of this
 distribution. 
"""

from math import sqrt
from Numeric import zeros,reshape,Float,dot,array,matrixmultiply

class GridPoint:
    def __init__(self,x,y,z,w=1.0):
        self._x = float(x)
        self._y = float(y)
        self._z = float(z)
        self._w = float(w)
        self._r = sqrt(self._x*self._x+self._y*self._y+self._z*self._z)
        self._dens = 0
        self._dens0 = None
        self.bfs = []
        return

    def xyzw(self): return (self._x,self._y,self._z,self._w)
    def dens(self): return self._dens
    def ddens(self): return self._dens-self._dens0
    def weight(self): return self._w
    def nbf(self): return len(self.bfs)
    def r(self): return self._r

    def setweight(self,w): self._w = w
    def zeroweight(self): self._w = 0

    def translate(self,x,y,z):
        self._x += x
        self._y += y
        self._z += z
        return

    def setdens(self,D):
        "Sets and returns the density value"
        self._dens = 2*dot(self.bfs,matrixmultiply(D,self.bfs))
        return self._dens

    def setdens0_D(self,D):
        "Sets and returns the density value"
        self._dens0 = 2*dot(self.bfs,matrixmultiply(D,self.bfs))
        self._dens = self._dens0

    def setdens0(self,rho0):
        self._dens0 = rho0(self._r)
        self._dens = self._dens0 # default to dens0

    def set_bf_amps(self,bfs):
        x,y,z,w = self.xyzw()
        nbf = len(bfs)
        self.bfs = zeros(nbf,Float)
        for i in range(nbf):
            self.bfs[i] = bfs[i].amp(x,y,z)
        return

