C Fortran modules in integrators.
       subroutine verlet1(n, dt, trans, imove, mass, r, rold, v, f) 
            implicit none
            integer n, imove(n)
            integer i, i3, i31, i32, i33
            real trans(3), mass(n), r(3*n), rold(3*n), v(3*n)
            double precision f(3*n)
            real dt, dt2, dt2m
cf2py       integer intent (hide), depend(mass) :: n = len(mass)
cf2py       intent (in) imove
cf2py       intent (in) dt, trans, mass, f 
cf2py       intent (in, out) r, rold, v
            dt2 = 0.5 * dt 
            do 100 i = 1, n   
                i3  = 3 * (i - 1)
                i31 = i3 + 1
                i32 = i3 + 2
                i33 = i3 + 3
                dt2m = dt2 / mass(i)
                if (imove(i) .eq. 2) then
                    ! Translate atoms. 
                    r(i31) = r(i31) + trans(1)  
                    r(i32) = r(i32) + trans(2)  
                    r(i33) = r(i33) + trans(3)  
                    continue
                endif 
                rold(i31) = r(i31)
                rold(i32) = r(i32)
                rold(i33) = r(i33)
                ! Update velocities.
                v(i31) = v(i31) + f(i31) * dt2m
                v(i32) = v(i32) + f(i32) * dt2m
                v(i33) = v(i33) + f(i33) * dt2m
                ! Update positions.  
                r(i31) = r(i31) + v(i31) * dt
                r(i32) = r(i32) + v(i32) * dt
                r(i33) = r(i33) + v(i33) * dt
100         continue
       end subroutine verlet1 

       subroutine verlet2(n, dt, imove, mass, v, f) 
            implicit none
            integer n, imove(n)
            integer i, i3, i31, i32, i33
            real mass(n), v(3*n)
            double precision f(3*n)
            real dt, dt2, dt2m
cf2py       integer intent (hide), depend(mass) :: n = len(mass)
cf2py       intent (in) imove
cf2py       intent (in) dt, trans, mass, f 
cf2py       intent (in, out) v
            dt2 = 0.5 * dt 
            do 100 i = 1, n   
                i3  = 3 * (i - 1)
                i31 = i3 + 1
                i32 = i3 + 2
                i33 = i3 + 3
                dt2m = dt2 / mass(i)
                if (imove(i) .ne. 0) then
                    continue
                endif
                ! Update velocities.
                v(i31) = v(i31) + f(i31) * dt2m
                v(i32) = v(i32) + f(i32) * dt2m
                v(i33) = v(i33) + f(i33) * dt2m
100         continue
       end subroutine verlet2
       
