#!/usr/bin/env python

"""\
 IMDTOOLS.py: PYTHON routines for coupling ITAP IMD code to CMDF

 This program is part of the CMDF.
 Copyright 2004-2005 California Institute of Technology.  All Rights
 Reserved. Markus J. Buehler, mbuehler@wag.caltech.edu

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation provided that the above copyright notice
 and this complete notice appear in all copies.

 This program is distributed in the hope that it will be useful, and in
 no event shall California Institute of Technology be liable to any
 party for direct, indirect, special, incidental or consequential
 damages, including lost profits, arising out of the use of this
 software and its documentation, even if the California Institute of
 Technology has been advised of the possibility of such damage. The
 California Institute of Technology specifically disclaims any
 warranties, including the implied warranties or merchantability and
 fitness for a particular purpose. The software and documentation
 provided hereunder is on an AS IS basis, and the California Institute
 of Technology has no obligations to provide maintenance, support,
 updates, enhancements or modifications.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307
"""
from math import sqrt,pow


## Copy all atoms in OBMolS into ITAP IMD

def OBToPyIMD (OBMolS, IMDMod):

   # get number of atoms in OBMol structure
   natoms=OBMolS.NumAtoms()
   IMDMod.PyToIMDSetup ()
   
   i=0

   # create dictionary
   # this is necessary to get a pointer to the right atom in OBMol given its global ID
   #OBMolS.adict={}

   idnum=0
   while i<natoms:
   	
	atom=OBMolS.GetAtom (i+1)
	
	x=atom.GetX()
	y=atom.GetY()
	z=atom.GetZ()
	
   	vx= atom.GetVelocityX()
	vy= atom.GetVelocityY()
	vz= atom.GetVelocityZ()
   	
  	xxx= atom.GetForceX()  
	xxy= atom.GetForceY() 
	xxz= atom.GetForceZ() 
	
	mass=atom.GetAtomicMass()
	idnum=atom.GetGID ()      
	
	# set up dictionary: store which atom belongs to which global ID
	#OBMolS.adict [ idnum ] = atom
	
	s=0
	
	IMDMod.PyToIMDAddatom (x,y,z,vx,vy,vz,xxx,xxy,xxz, mass, idnum, s)
	 
	i=i+1
	
   IMDMod.PyToIMDFinal ()
   
   return 
   
   
   

## Copy all atoms in OBMolS into ITAP IMD

def OBToPyIMD_Alloy (OBMolS, IMDMod, rxty):

   # get number of atoms in OBMol structure
   natoms=OBMolS.NumAtoms()
   IMDMod.PyToIMDSetup ()
   
   i=0

   # create dictionary
   # this is necessary to get a pointer to the right atom in OBMol given its global ID
   #OBMolS.adict={}

   idnum=0
   while i<natoms:
   	
	atom=OBMolS.GetAtom (i+1)
	
	x=atom.GetX()
	y=atom.GetY()
	z=atom.GetZ()
	
   	vx= atom.GetVelocityX()
	vy= atom.GetVelocityY()
	vz= atom.GetVelocityZ()
   	
  	xxx= atom.GetForceX()  
	xxy= atom.GetForceY() 
	xxz= atom.GetForceZ() 
	
	mass=atom.GetAtomicMass()
	idnum=atom.GetGID ()      
	
	# set up dictionary: store which atom belongs to which global ID
	#OBMolS.adict [ idnum ] = atom
	
	s=rxty[ atom.GetElement () ]
	#print s 
	
	IMDMod.PyToIMDAddatom (x,y,z,vx,vy,vz,xxx,xxy,xxz, mass, idnum, s)
	 
	i=i+1
	
   IMDMod.PyToIMDFinal ()
   
   return 



def IMDToOBMol (OBMolS, IMDMod):
    
    
    k=0
    ii=0	# ii is the counter for the atoms in OBMol
    
    if IMDMod.GetNAtoms()!=OBMolS.NumAtoms():
        print "Error. Number of atoms in OBMol object and IMD data structure not identical"
    
    while k<IMDMod.getncells ():
      
      i=0
    
      while i<IMDMod.getninp (k):
    
           
	   # STEP 1: retrieve data from IMD
	   x=IMDMod.getX_x(k,i)
	   y=IMDMod.getX_y(k,i)
	   z=IMDMod.getX_z(k,i)
	   
	   vx=IMDMod.getX1_x(k,i)
	   vy=IMDMod.getX1_y(k,i)
	   vz=IMDMod.getX1_z(k,i)
	   
	   fx=IMDMod.getX2_x(k,i)
	   fy=IMDMod.getX2_y(k,i)
	   fz=IMDMod.getX2_z(k,i)
	   
	   ii=IMDMod.getNumber (k, i)
	   
	   atom=OBMolS.adict [ ii ] # get pointer to atom with propert global ID
	
	   atom.SetVector(x, y, z)

	   atom.SetVelX(vx)
	   atom.SetVelY(vy)
	   atom.SetVelZ(vz)

	   atom.SetForceX(fx)
	   atom.SetForceY(fy)
	   atom.SetForceZ(fz)
	   
	   atom.SetGID (ii)
	   
	   i=i+1
    
      k=k+1
    
    return

def IMDToNewOBMol (IMDMod):
        
    k=0
    ii=0	# ii is the counter for the atoms in OBMol
    
    OBMolS = OBMol()
    
    # create dictionary for GID
    OBMolS.adict={}
   
    while k<IMDMod.getncells ():
      
      i=0
    
      while i<IMDMod.getninp (k):
    
           
	   # STEP 1: retrieve data from IMD
	   x=IMDMod.getX_x(k,i)
	   y=IMDMod.getX_y(k,i)
	   z=IMDMod.getX_z(k,i)
	   
	   vx=IMDMod.getX1_x(k,i)
	   vy=IMDMod.getX1_y(k,i)
	   vz=IMDMod.getX1_z(k,i)
	   
	   fx=IMDMod.getX2_x(k,i)
	   fy=IMDMod.getX2_y(k,i)
	   fz=IMDMod.getX2_z(k,i)
	   
	   estr=IMDMod.getpoteng(k,i)
		  
	   # STEP 2: put data into OBMol object
	   atom=OBMolS.NewAtom ()
	
	   atom.SetVector(x, y, z)

 	   atom.SetPE (estr)
	   
	   atom.SetVelX(vx)
	   atom.SetVelY(vy)
	   atom.SetVelZ(vz)

	   atom.SetForceX(fx)
	   atom.SetForceY(fy)
	   atom.SetForceZ(fz)
	   
	   OBMolS.adict [IMDMod.getNumber (k, i)] = atom
 
	   ii=ii+1
	   i=i+1
    
      k=k+1
    
    OBMolS.EndModify()
   
    return OBMolS


############## only forces and energies

def IMDForcesToOBMol (OBMolS, IMDMod):
    
    k=0
    ii=0	# ii is the counter for the atoms in OBMol
    
    if IMDMod.GetNAtoms ()!=OBMolS.NumAtoms():
        print "Error. Number of atoms in OBMol object and IMD data structure not identical", IMDMod.GetNAtoms (), OBMolS.NumAtoms()
	
    # here loop over all atoms in the IMD data structure
    while k<IMDMod.getncells ():
      
      i=0
    
      while i<IMDMod.getninp (k):
    	   
	   fx=IMDMod.getX2_x(k,i)
	   fy=IMDMod.getX2_y(k,i)
	   fz=IMDMod.getX2_z(k,i)
	   
	   estr=IMDMod.getpoteng(k,i)

	   # get the global ID number
	   idnumber=IMDMod.getNumber(k,i)
	 	   
	   atom= OBMolS.GetAtom (idnumber)
	
	   atom.SetForceX (fx)
	   atom.SetForceY (fy)
	   atom.SetForceZ (fz)
	   
 	   atom.SetPE (estr)
           #print atom.GetForceX ()
	   i=i+1
      k=k+1
    return


#### ONLY copy xyz here

def UpdateIMD (OBMolS, IMDMod):
    
   
    k=0
    ii=0	# ii is the counter for the atoms in OBMol
    
    
    if IMDMod.GetNAtoms ()!=OBMolS.NumAtoms():
        print "Error. Number of atoms in OBMol object and IMD data structure not identical", IMDMod.GetNAtoms (), OBMolS.NumAtoms()
	
	
    # here loop over all atoms in the IMD data structure
    while k<IMDMod.getncells ():
      
      i=0
    
      while i<IMDMod.getninp (k):
    
           idnumber=IMDMod.getNumber(k,i)
	   
	   atom= OBMolS.GetAtom (idnumber)
	   
	   IMDMod.setX_x(k,i, atom.GetX())
	   IMDMod.setX_y(k,i, atom.GetY())
	   IMDMod.setX_z(k,i, atom.GetZ())
	
	   i=i+1
    
      k=k+1
    
    IMDMod.ApplyPBCs ()
    return



def IMDForcesCell (OBMolS, IMDMod, TOOLS, cellx, celly, cellz, pbcx, pbcy, pbcz):
    
    # clear the memory
    IMDMod.Cleanup()
    IMDMod.ChangeBox (cellx, celly, cellz, pbcx, pbcy, pbcz)
    TOOLS.OBToPyIMD (OBMolS, IMDMod)
    IMDMod.GetForces ()
    TOOLS.IMDForcesToOBMol (OBMolS, IMDMod)
    
    return
    


def IMDForces (OBMolS, IMDMod, TOOLS):
    
    IMDMod.Cleanup()
    TOOLS.OBToPyIMD (OBMolS, IMDMod)
    IMDMod.GetForces ()
    TOOLS.IMDForcesToOBMol (OBMolS, IMDMod)
    
    return



## PRINT all atoms in IMD on screen... for debugging
def IMDToSCREEN (IMDMod):
    
    k=0
    ii=0
       
    while k<IMDMod.getncells ():
      
      i=0
    
      while i<IMDMod.getninp (k):
    
           print "i = %10d "% ii, "     positions x=(x,y,z)=(%7.2f,%7.2f,%7.2f)  accelerations x2=(x2,y2,z2)=(%7.2f,%7.2f,%7.2f)" % ( IMDMod.getX_x(k,i),IMDMod.getX_y(k,i),IMDMod.getX_z(k,i), IMDMod.getX2_x(k,i),IMDMod.getX2_y(k,i),IMDMod.getX2_z(k,i) )
	   i=i+1
	   ii=ii+1
    
      k=k+1
    
    print "total number of atoms:", ii
    
    return

